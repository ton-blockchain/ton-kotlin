package org.ton.kotlin.examples.faucet

import org.ton.api.pk.PrivateKeyEd25519
import org.ton.bigint.BigInt
import org.ton.block.Coins
import org.ton.block.MsgAddressInt
import org.ton.contract.wallet.WalletTransfer
import org.ton.kotlin.examples.contract.WalletV1R3Contract
import org.ton.kotlin.examples.provider.Provider
import org.ton.kotlin.message.MessageLayout

class TestnetFaucet(
    val provider: Provider
) {
    @OptIn(ExperimentalStdlibApi::class)
    private val SECRET =
        PrivateKeyEd25519("46aab91daaaa375d40588384fdf7e36c62d0c0f38c46adfea7f9c904c5973d97c02ece00eceb299066597ccc7a8ac0b2d08f0ad425f28c0ea92e74e2064f41f0".hexToByteArray())
    val wallet = WalletV1R3Contract(0, SECRET.publicKey(), provider)

    suspend fun topUpContract(destination: MsgAddressInt, amount: BigInt) =
        topUpContract(destination, Coins(amount))

    suspend fun topUpContract(destination: MsgAddressInt, amount: Long) =
        topUpContract(destination, Coins(amount))

    suspend fun topUpContract(destination: MsgAddressInt, amount: Coins) {
//        val account = provider.getAccountState(wallet.address)
//        val seqno = account?.let { wallet.getSeqno(it) } ?: 0
        val seqno = 0
//        println("faucet balance: ${account.balance}")
        println(destination.toAddrStd().toString(userFriendly = true))
        val message = WalletV1R3Contract.WalletV1R3Message(seqno, WalletTransfer {
            this.destination = destination
            this.coins = amount
            this.bounceable = false
//            this.messageData = MessageData.text("github.com/ton-community/ton-kotlin")
        }).sign(SECRET).toMessage(wallet.address, layout = MessageLayout.PLAIN)
        provider.sendMessage(WalletV1R3Contract.SignedWalletV1R3Message, message)
    }
}
// faucet:
// 1011010100101010000101101011101000110111001101010101000000011101111100011001100110010111010101010000111001111110110101001100010000010111010101001110111001010000000111011110110110001010100001000001000010001000110011100100001001111000101101100110110111100100         100100 000000

// norm


