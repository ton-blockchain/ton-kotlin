public final class org/ton/crypto/AesCtr {
	public fun <init> ([B[B)V
	public final fun doFinal ()[B
	public final fun doFinal ([B)[B
	public final fun update ([B[B)[B
	public static synthetic fun update$default (Lorg/ton/crypto/AesCtr;[B[BILjava/lang/Object;)[B
}

public final class org/ton/crypto/Crc16Kt {
	public static final fun crc16 (Ljava/lang/String;)I
	public static final fun crc16 ([[B)I
}

public final class org/ton/crypto/Crc32JvmKt {
	public static final fun crc32 ([BII)I
	public static synthetic fun crc32$default ([BIIILjava/lang/Object;)I
	public static final fun crc32c ([BII)I
	public static synthetic fun crc32c$default ([BIIILjava/lang/Object;)I
}

public abstract interface class org/ton/crypto/Decryptor {
	public abstract fun decrypt ([B)[B
	public abstract fun sign ([B)[B
}

public final class org/ton/crypto/DecryptorAes : org/ton/crypto/Decryptor {
	public fun <init> ([B)V
	public fun decrypt ([B)[B
	public fun sign ([B)[B
}

public final class org/ton/crypto/DecryptorEd25519 : org/ton/crypto/Decryptor {
	public fun <init> (Lio/github/andreypfau/curve25519/ed25519/Ed25519PrivateKey;Lio/github/andreypfau/curve25519/ed25519/Ed25519PublicKey;)V
	public synthetic fun <init> (Lio/github/andreypfau/curve25519/ed25519/Ed25519PrivateKey;Lio/github/andreypfau/curve25519/ed25519/Ed25519PublicKey;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun <init> ([B)V
	public fun decrypt ([B)[B
	public fun sign ([B)[B
}

public final class org/ton/crypto/DecryptorFail : org/ton/crypto/Decryptor {
	public static final field INSTANCE Lorg/ton/crypto/DecryptorFail;
	public fun decrypt ([B)[B
	public fun sign ([B)[B
}

public final class org/ton/crypto/DecryptorNone : org/ton/crypto/Decryptor {
	public static final field INSTANCE Lorg/ton/crypto/DecryptorNone;
	public fun decrypt ([B)[B
	public fun sign ([B)[B
}

public final class org/ton/crypto/Ed25519 {
	public static final field INSTANCE Lorg/ton/crypto/Ed25519;
	public static final field KEY_SIZE_BYTES I
	public static final fun privateKey (Lkotlin/random/Random;)[B
	public static synthetic fun privateKey$default (Lkotlin/random/Random;ILjava/lang/Object;)[B
	public static final fun publicKey ([B)[B
	public static final fun sharedKey ([B[B)[B
	public static final fun sign ([B[B)[B
	public static final fun verify ([B[B[B)Z
}

public abstract interface class org/ton/crypto/Encryptor {
	public abstract fun encrypt ([B)[B
	public abstract fun verify ([B[B)Z
}

public final class org/ton/crypto/EncryptorAes : org/ton/crypto/Encryptor {
	public fun <init> ([B)V
	public fun encrypt ([B)[B
	public fun verify ([B[B)Z
}

public final class org/ton/crypto/EncryptorEd25519 : org/ton/crypto/Encryptor {
	public fun <init> (Lio/github/andreypfau/curve25519/ed25519/Ed25519PublicKey;Lio/github/andreypfau/curve25519/ed25519/Ed25519PrivateKey;)V
	public synthetic fun <init> (Lio/github/andreypfau/curve25519/ed25519/Ed25519PublicKey;Lio/github/andreypfau/curve25519/ed25519/Ed25519PrivateKey;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun <init> ([B)V
	public fun encrypt ([B)[B
	public fun verify ([B[B)Z
}

public final class org/ton/crypto/EncryptorFail : org/ton/crypto/Encryptor {
	public static final field INSTANCE Lorg/ton/crypto/EncryptorFail;
	public fun encrypt ([B)[B
	public fun verify ([B[B)Z
}

public final class org/ton/crypto/EncryptorNone : org/ton/crypto/Encryptor {
	public static final field INSTANCE Lorg/ton/crypto/EncryptorNone;
	public fun encrypt ([B)[B
	public fun verify ([B[B)Z
}

public final class org/ton/crypto/HexByteArraySerializer : kotlinx/serialization/KSerializer {
	public static final field INSTANCE Lorg/ton/crypto/HexByteArraySerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public fun deserialize (Lkotlinx/serialization/encoding/Decoder;)[B
	public fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun serialize (Lkotlinx/serialization/encoding/Encoder;[B)V
}

public final class org/ton/crypto/HexKt {
	public static final fun decodeHex (Ljava/lang/String;)[B
	public static final fun encodeHex ([B)Ljava/lang/String;
	public static final fun hex (Ljava/lang/Iterable;)Ljava/lang/String;
	public static final fun hex (Ljava/lang/String;)[B
	public static final fun hex ([B)Ljava/lang/String;
	public static final fun hex ([J)Ljava/lang/String;
}

public final class org/ton/crypto/SecureRandom : kotlin/random/Random {
	public static final field INSTANCE Lorg/ton/crypto/SecureRandom;
	public fun nextBits (I)I
	public fun nextBytes ([BII)[B
	public fun nextInt ()I
}

public abstract interface class org/ton/crypto/digest/Digest {
	public static final field Companion Lorg/ton/crypto/digest/Digest$Companion;
	public fun build ()[B
	public fun build ([B)[B
	public abstract fun build ([BI)[B
	public abstract fun getAlgorithmName ()Ljava/lang/String;
	public abstract fun getDigestSize ()I
	public fun plusAssign ([B)V
	public abstract fun reset ()V
	public fun update ([B)V
	public abstract fun update ([BII)V
}

public final class org/ton/crypto/digest/Digest$Companion {
	public final fun sha256 ()Lorg/ton/crypto/digest/Digest;
	public final fun sha512 ()Lorg/ton/crypto/digest/Digest;
}

public final class org/ton/crypto/digest/DigestJvmKt {
	public static final fun Digest (Ljava/lang/String;)Lorg/ton/crypto/digest/Digest;
	public static final fun sha256 ([B)[B
	public static final fun sha512 ([B)[B
}

public abstract class org/ton/crypto/digest/md4/GeneralDigest : org/ton/crypto/digest/Digest {
	public fun <init> ()V
	public final fun finish ()V
	protected abstract fun processBlock ()V
	protected abstract fun processLength (J)V
	protected abstract fun processWord ([BI)V
	public fun reset ()V
	public final fun update (B)V
	public fun update ([BII)V
}

public abstract class org/ton/crypto/digest/sha2/LongDigest : org/ton/crypto/digest/Digest {
	public fun <init> ()V
	protected final fun adjustByteCounts ()V
	public final fun finish ()V
	protected final fun getH1 ()J
	protected final fun getH2 ()J
	protected final fun getH3 ()J
	protected final fun getH4 ()J
	protected final fun getH5 ()J
	protected final fun getH6 ()J
	protected final fun getH7 ()J
	protected final fun getH8 ()J
	protected final fun processBlock ()V
	protected final fun processLength (JJ)V
	protected final fun processWord ([BI)V
	public fun reset ()V
	protected final fun setH1 (J)V
	protected final fun setH2 (J)V
	protected final fun setH3 (J)V
	protected final fun setH4 (J)V
	protected final fun setH5 (J)V
	protected final fun setH6 (J)V
	protected final fun setH7 (J)V
	protected final fun setH8 (J)V
	public final fun update (B)V
	public fun update ([BII)V
}

public final class org/ton/crypto/digest/sha2/SHA256Digest : org/ton/crypto/digest/md4/GeneralDigest {
	public static final field ALGORITHM_NAME Ljava/lang/String;
	public static final field Companion Lorg/ton/crypto/digest/sha2/SHA256Digest$Companion;
	public static final field SIZE_BITS I
	public static final field SIZE_BYTES I
	public fun <init> ()V
	public fun build ([BI)[B
	public fun getAlgorithmName ()Ljava/lang/String;
	public fun getDigestSize ()I
	public fun reset ()V
}

public final class org/ton/crypto/digest/sha2/SHA256Digest$Companion {
}

public final class org/ton/crypto/digest/sha2/SHA512Digest : org/ton/crypto/digest/sha2/LongDigest {
	public static final field ALGORITHM_NAME Ljava/lang/String;
	public static final field Companion Lorg/ton/crypto/digest/sha2/SHA512Digest$Companion;
	public static final field SIZE_BITS I
	public static final field SIZE_BYTES I
	public fun <init> ()V
	public fun build ([BI)[B
	public fun getAlgorithmName ()Ljava/lang/String;
	public fun getDigestSize ()I
	public fun reset ()V
}

public final class org/ton/crypto/digest/sha2/SHA512Digest$Companion {
}

public final class org/ton/crypto/encoding/Base64ByteArraySerializer : kotlinx/serialization/KSerializer {
	public static final field INSTANCE Lorg/ton/crypto/encoding/Base64ByteArraySerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public fun deserialize (Lkotlinx/serialization/encoding/Decoder;)[B
	public fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun serialize (Lkotlinx/serialization/encoding/Encoder;[B)V
}

public final class org/ton/crypto/encoding/Base64Kt {
	public static final fun base64 (Ljava/lang/String;)[B
	public static final fun base64 ([B)Ljava/lang/String;
	public static final fun base64url (Ljava/lang/String;)[B
	public static final fun base64url ([B)Ljava/lang/String;
}

public abstract class org/ton/crypto/kdf/PBEParametersGenerator {
	public fun <init> ()V
	public fun <init> ([B[BI)V
	public abstract fun generateDerivedMacParameters (I)[B
	public abstract fun generateDerivedParameters (I)[B
	public final fun getIterationCount ()I
	public final fun getPassword ()[B
	public final fun getSalt ()[B
	public final fun init ([B[BI)Lorg/ton/crypto/kdf/PBEParametersGenerator;
	protected final fun setIterationCount (I)V
	protected final fun setPassword ([B)V
	protected final fun setSalt ([B)V
}

public final class org/ton/crypto/kdf/PKCSS2ParametersGenerator : org/ton/crypto/kdf/PBEParametersGenerator {
	public fun <init> (Lorg/ton/crypto/digest/Digest;)V
	public fun <init> (Lorg/ton/crypto/digest/Digest;[B[BI)V
	public fun <init> (Lorg/ton/crypto/mac/hmac/HMac;)V
	public fun <init> (Lorg/ton/crypto/mac/hmac/HMac;[B[BI)V
	public fun generateDerivedMacParameters (I)[B
	public fun generateDerivedParameters (I)[B
}

public abstract interface class org/ton/crypto/mac/Mac {
	public fun build ()[B
	public fun build ([B)[B
	public abstract fun build ([BI)[B
	public abstract fun getAlgorithmName ()Ljava/lang/String;
	public abstract fun getMacSize ()I
	public abstract fun init ([B)Lorg/ton/crypto/mac/Mac;
	public fun plusAssign ([B)V
	public abstract fun reset ()V
	public fun update ([B)V
	public abstract fun update ([BII)V
}

public final class org/ton/crypto/mac/hmac/HMac : org/ton/crypto/mac/Mac {
	public fun <init> (Lorg/ton/crypto/digest/Digest;)V
	public fun <init> (Lorg/ton/crypto/digest/Digest;[B)V
	public fun build ([BI)[B
	public fun getAlgorithmName ()Ljava/lang/String;
	public fun getMacSize ()I
	public synthetic fun init ([B)Lorg/ton/crypto/mac/Mac;
	public fun init ([B)Lorg/ton/crypto/mac/hmac/HMac;
	public fun reset ()V
	public fun update ([BII)V
}

public final class org/ton/mnemonic/Mnemonic {
	public static final field DEFAULT_BASIC_ITERATIONS I
	public static final field DEFAULT_BASIC_SALT Ljava/lang/String;
	public static final field DEFAULT_ITERATIONS I
	public static final field DEFAULT_PASSWORD_ITERATIONS I
	public static final field DEFAULT_PASSWORD_SALT Ljava/lang/String;
	public static final field DEFAULT_SALT Ljava/lang/String;
	public static final field DEFAULT_WORD_COUNT I
	public static final field INSTANCE Lorg/ton/mnemonic/Mnemonic;
	public static final fun generate (Ljava/lang/String;ILjava/util/List;Lkotlin/random/Random;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun generate$default (Ljava/lang/String;ILjava/util/List;Lkotlin/random/Random;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static final fun isBasicSeed ([B)Z
	public static final fun isPasswordNeeded (Ljava/util/List;)Z
	public static final fun isPasswordSeed ([B)Z
	public static final fun isValid (Ljava/util/List;Ljava/lang/String;Ljava/util/List;)Z
	public static synthetic fun isValid$default (Ljava/util/List;Ljava/lang/String;Ljava/util/List;ILjava/lang/Object;)Z
	public final fun mnemonicWords ()Ljava/util/List;
	public static final fun toEntropy (Ljava/util/List;Ljava/lang/String;)[B
	public static synthetic fun toEntropy$default (Ljava/util/List;Ljava/lang/String;ILjava/lang/Object;)[B
	public static final fun toSeed (Ljava/util/List;Ljava/lang/String;)[B
	public static synthetic fun toSeed$default (Ljava/util/List;Ljava/lang/String;ILjava/lang/Object;)[B
}

