<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>EmptyFunctionBlock:LiteServerGetMasterchainInfo.kt$LiteServerGetMasterchainInfoTlConstructor${ }</ID>
    <ID>EmptyFunctionBlock:LiteServerGetTime.kt$LiteServerGetTimeTLConstructor${ }</ID>
    <ID>EmptyFunctionBlock:LiteServerGetVersion.kt$LiteServerGetVersionTlConstructor${ }</ID>
    <ID>EmptyFunctionBlock:LiteServerQueryPrefix.kt$LiteServerQueryPrefixTlConstructor${}</ID>
    <ID>InvalidPackageDeclaration:LiteApi.kt$package org.ton.lite.api</ID>
    <ID>InvalidPackageDeclaration:LiteApiClient.kt$package org.ton.lite.api</ID>
    <ID>InvalidPackageDeclaration:LiteServerAccountId.kt$package org.ton.lite.api.liteserver</ID>
    <ID>InvalidPackageDeclaration:LiteServerAccountState.kt$package org.ton.lite.api.liteserver</ID>
    <ID>InvalidPackageDeclaration:LiteServerAllShardsInfo.kt$package org.ton.lite.api.liteserver</ID>
    <ID>InvalidPackageDeclaration:LiteServerBlockData.kt$package org.ton.lite.api.liteserver</ID>
    <ID>InvalidPackageDeclaration:LiteServerBlockHeader.kt$package org.ton.lite.api.liteserver</ID>
    <ID>InvalidPackageDeclaration:LiteServerBlockLink.kt$package org.ton.lite.api.liteserver</ID>
    <ID>InvalidPackageDeclaration:LiteServerBlockLinkBack.kt$package org.ton.lite.api.liteserver</ID>
    <ID>InvalidPackageDeclaration:LiteServerBlockLinkForward.kt$package org.ton.lite.api.liteserver</ID>
    <ID>InvalidPackageDeclaration:LiteServerBlockState.kt$package org.ton.lite.api.liteserver</ID>
    <ID>InvalidPackageDeclaration:LiteServerBlockTransactions.kt$package org.ton.lite.api.liteserver</ID>
    <ID>InvalidPackageDeclaration:LiteServerConfigInfo.kt$package org.ton.lite.api.liteserver</ID>
    <ID>InvalidPackageDeclaration:LiteServerCurrentTime.kt$package org.ton.lite.api.liteserver</ID>
    <ID>InvalidPackageDeclaration:LiteServerDebugVerbosity.kt$package org.ton.lite.api.liteserver</ID>
    <ID>InvalidPackageDeclaration:LiteServerError.kt$package org.ton.lite.api.liteserver</ID>
    <ID>InvalidPackageDeclaration:LiteServerGetAccountState.kt$package org.ton.lite.api.liteserver.functions</ID>
    <ID>InvalidPackageDeclaration:LiteServerGetAllShardsInfo.kt$package org.ton.lite.api.liteserver.functions</ID>
    <ID>InvalidPackageDeclaration:LiteServerGetBlock.kt$package org.ton.lite.api.liteserver.functions</ID>
    <ID>InvalidPackageDeclaration:LiteServerGetBlockHeader.kt$package org.ton.lite.api.liteserver.functions</ID>
    <ID>InvalidPackageDeclaration:LiteServerGetBlockProof.kt$package org.ton.lite.api.liteserver.functions</ID>
    <ID>InvalidPackageDeclaration:LiteServerGetConfigAll.kt$package org.ton.lite.api.liteserver.functions</ID>
    <ID>InvalidPackageDeclaration:LiteServerGetConfigParams.kt$package org.ton.lite.api.liteserver.functions</ID>
    <ID>InvalidPackageDeclaration:LiteServerGetMasterchainInfo.kt$package org.ton.lite.api.liteserver.functions</ID>
    <ID>InvalidPackageDeclaration:LiteServerGetMasterchainInfoExt.kt$package org.ton.lite.api.liteserver.functions</ID>
    <ID>InvalidPackageDeclaration:LiteServerGetOneTransaction.kt$package org.ton.lite.api.liteserver.functions</ID>
    <ID>InvalidPackageDeclaration:LiteServerGetShardInfo.kt$package org.ton.lite.api.liteserver.functions</ID>
    <ID>InvalidPackageDeclaration:LiteServerGetState.kt$package org.ton.lite.api.liteserver.functions</ID>
    <ID>InvalidPackageDeclaration:LiteServerGetTime.kt$package org.ton.lite.api.liteserver.functions</ID>
    <ID>InvalidPackageDeclaration:LiteServerGetTransactions.kt$package org.ton.lite.api.liteserver.functions</ID>
    <ID>InvalidPackageDeclaration:LiteServerGetValidatorStats.kt$package org.ton.lite.api.liteserver.functions</ID>
    <ID>InvalidPackageDeclaration:LiteServerGetVersion.kt$package org.ton.lite.api.liteserver.functions</ID>
    <ID>InvalidPackageDeclaration:LiteServerListBlockTransactions.kt$package org.ton.lite.api.liteserver.functions</ID>
    <ID>InvalidPackageDeclaration:LiteServerLookupBlock.kt$package org.ton.lite.api.liteserver.functions</ID>
    <ID>InvalidPackageDeclaration:LiteServerMasterchainInfo.kt$package org.ton.lite.api.liteserver</ID>
    <ID>InvalidPackageDeclaration:LiteServerMasterchainInfoExt.kt$package org.ton.lite.api.liteserver</ID>
    <ID>InvalidPackageDeclaration:LiteServerPartialBlockProof.kt$package org.ton.lite.api.liteserver</ID>
    <ID>InvalidPackageDeclaration:LiteServerQuery.kt$package org.ton.lite.api.liteserver.functions</ID>
    <ID>InvalidPackageDeclaration:LiteServerQueryPrefix.kt$package org.ton.lite.api.liteserver</ID>
    <ID>InvalidPackageDeclaration:LiteServerRunMethodResult.kt$package org.ton.lite.api.liteserver</ID>
    <ID>InvalidPackageDeclaration:LiteServerRunSmcMethod.kt$package org.ton.lite.api.liteserver.functions</ID>
    <ID>InvalidPackageDeclaration:LiteServerSendMessage.kt$package org.ton.lite.api.liteserver.functions</ID>
    <ID>InvalidPackageDeclaration:LiteServerSendMsgStatus.kt$package org.ton.lite.api.liteserver</ID>
    <ID>InvalidPackageDeclaration:LiteServerShardInfo.kt$package org.ton.lite.api.liteserver</ID>
    <ID>InvalidPackageDeclaration:LiteServerSignature.kt$package org.ton.lite.api.liteserver</ID>
    <ID>InvalidPackageDeclaration:LiteServerSignatureSet.kt$package org.ton.lite.api.liteserver</ID>
    <ID>InvalidPackageDeclaration:LiteServerTransactionId.kt$package org.ton.lite.api.liteserver</ID>
    <ID>InvalidPackageDeclaration:LiteServerTransactionId3.kt$package org.ton.lite.api.liteserver</ID>
    <ID>InvalidPackageDeclaration:LiteServerTransactionInfo.kt$package org.ton.lite.api.liteserver</ID>
    <ID>InvalidPackageDeclaration:LiteServerTransactionList.kt$package org.ton.lite.api.liteserver</ID>
    <ID>InvalidPackageDeclaration:LiteServerValidatorStats.kt$package org.ton.lite.api.liteserver</ID>
    <ID>InvalidPackageDeclaration:LiteServerVersion.kt$package org.ton.lite.api.liteserver</ID>
    <ID>InvalidPackageDeclaration:LiteServerWaitMasterchainSeqno.kt$package org.ton.lite.api.liteserver.functions</ID>
    <ID>InvalidPackageDeclaration:exceptions.kt$package org.ton.lite.api.exception</ID>
    <ID>MaxLineLength:LiteServerAccountState.kt$LiteServerAccountState.Companion$schema = "liteServer.accountState id:tonNode.blockIdExt shardblk:tonNode.blockIdExt shard_proof:bytes proof:bytes state:bytes = liteServer.AccountState"</ID>
    <ID>MaxLineLength:LiteServerBlockLinkBack.kt$LiteServerBlockLinkBackTlConstructor$schema = "liteServer.blockLinkBack to_key_block:Bool from:tonNode.blockIdExt to:tonNode.blockIdExt dest_proof:bytes proof:bytes state_proof:bytes = liteServer.BlockLink"</ID>
    <ID>MaxLineLength:LiteServerBlockLinkForward.kt$LiteServerBlockLinkForwardTlConstructor$schema = "liteServer.blockLinkForward to_key_block:Bool from:tonNode.blockIdExt to:tonNode.blockIdExt dest_proof:bytes config_proof:bytes signatures:liteServer.SignatureSet = liteServer.BlockLink"</ID>
    <ID>MaxLineLength:LiteServerBlockState.kt$LiteServerBlockStateTlConstructor$schema = "liteServer.blockState id:tonNode.blockIdExt root_hash:int256 file_hash:int256 data:bytes = liteServer.BlockState"</ID>
    <ID>MaxLineLength:LiteServerBlockTransactions.kt$LiteServerBlockTransactionsTlConstructor$schema = "liteServer.blockTransactions id:tonNode.blockIdExt req_count:# incomplete:Bool ids:(vector liteServer.transactionId) proof:bytes = liteServer.BlockTransactions"</ID>
    <ID>MaxLineLength:LiteServerConfigInfo.kt$LiteServerConfigInfoTlConstructor$schema = "liteServer.configInfo mode:# id:tonNode.blockIdExt state_proof:bytes config_proof:bytes = liteServer.ConfigInfo"</ID>
    <ID>MaxLineLength:LiteServerGetBlockProof.kt$LiteServerGetBlockProofTlConstructor$schema = "liteServer.getBlockProof mode:# known_block:tonNode.blockIdExt target_block:mode.0?tonNode.blockIdExt = liteServer.PartialBlockProof"</ID>
    <ID>MaxLineLength:LiteServerGetOneTransaction.kt$LiteServerGetOneTransactionTlConstructor$schema = "liteServer.getOneTransaction id:tonNode.blockIdExt account:liteServer.accountId lt:long = liteServer.TransactionInfo"</ID>
    <ID>MaxLineLength:LiteServerGetTransactions.kt$LiteServerGetTransactionsTlConstructor$schema = "liteServer.getTransactions count:# account:liteServer.accountId lt:long hash:int256 = liteServer.TransactionList"</ID>
    <ID>MaxLineLength:LiteServerGetValidatorStats.kt$LiteServerGetValidatorStatsTlConstructor$schema = "liteServer.getValidatorStats#091a58bc mode:# id:tonNode.blockIdExt limit:int start_after:mode.0?int256 modified_after:mode.2?int = liteServer.ValidatorStats"</ID>
    <ID>MaxLineLength:LiteServerListBlockTransactions.kt$LiteServerListBlockTransactionsTlConstructor$schema = "liteServer.listBlockTransactions id:tonNode.blockIdExt mode:# count:# after:mode.7?liteServer.transactionId3 reverse_order:mode.6?true want_proof:mode.5?true = liteServer.BlockTransactions"</ID>
    <ID>MaxLineLength:LiteServerMasterchainInfo.kt$LiteServerMasterchainInfoTlbConstructor$schema = "liteServer.masterchainInfo last:tonNode.blockIdExt state_root_hash:int256 init:tonNode.zeroStateIdExt = liteServer.MasterchainInfo"</ID>
    <ID>MaxLineLength:LiteServerMasterchainInfoExt.kt$LiteServerMasterchainInfoExt.Companion$schema = "liteServer.masterchainInfoExt mode:# version:int capabilities:long last:tonNode.blockIdExt last_utime:int now:int state_root_hash:int256 init:tonNode.zeroStateIdExt = liteServer.MasterchainInfoExt"</ID>
    <ID>MaxLineLength:LiteServerPartialBlockProof.kt$LiteServerPartialBlockProofTlConstructor$schema = "liteServer.partialBlockProof complete:Bool from:tonNode.blockIdExt to:tonNode.blockIdExt steps:vector liteServer.BlockLink = liteServer.PartialBlockProof"</ID>
    <ID>MaxLineLength:LiteServerRunMethodResult.kt$LiteServerRunMethodResultTlConstructor$schema = "liteServer.runMethodResult mode:# id:tonNode.blockIdExt shardblk:tonNode.blockIdExt shard_proof:mode.0?bytes proof:mode.0?bytes state_proof:mode.1?bytes init_c7:mode.3?bytes lib_extras:mode.4?bytes exit_code:int result:mode.2?bytes = liteServer.RunMethodResult"</ID>
    <ID>MaxLineLength:LiteServerRunSmcMethod.kt$LiteServerRunSmcMethodTlConstructor$schema = "liteServer.runSmcMethod mode:# id:tonNode.blockIdExt account:liteServer.accountId method_id:long params:bytes = liteServer.RunMethodResult"</ID>
    <ID>MaxLineLength:LiteServerShardInfo.kt$LiteServerShardInfoTlConstructor$schema = "liteServer.shardInfo id:tonNode.blockIdExt shardblk:tonNode.blockIdExt shard_proof:bytes shard_descr:bytes = liteServer.ShardInfo"</ID>
    <ID>MaxLineLength:LiteServerSignatureSet.kt$LiteServerSignatureSetTlConstructor$schema = "liteServer.signatureSet validator_set_hash:int catchain_seqno:int signatures:vector liteServer.signature = liteServer.SignatureSet"</ID>
    <ID>MaxLineLength:LiteServerTransactionId.kt$LiteServerTransactionIdTlConstructor$schema = "liteServer.transactionId mode:# account:mode.0?int256 lt:mode.1?long hash:mode.2?int256 = liteServer.TransactionId"</ID>
    <ID>MaxLineLength:LiteServerTransactionInfo.kt$LiteServerTransactionInfoTlConstructor$schema = "liteServer.transactionInfo id:tonNode.blockIdExt proof:bytes transaction:bytes = liteServer.TransactionInfo"</ID>
    <ID>MaxLineLength:LiteServerTransactionList.kt$LiteServerTransactionListTlConstructor$schema = "liteServer.transactionList ids:(vector tonNode.blockIdExt) transactions:bytes = liteServer.TransactionList"</ID>
    <ID>MaxLineLength:LiteServerValidatorStats.kt$LiteServerValidatorStatsTlConstructor$schema = "liteServer.validatorStats mode:# id:tonNode.blockIdExt count:int complete:Bool state_proof:bytes data_proof:bytes = liteServer.ValidatorStats"</ID>
    <ID>SwallowedException:LiteApiClient.kt$LiteApiClient$e: Exception</ID>
    <ID>TooGenericExceptionCaught:LiteApiClient.kt$LiteApiClient$e: Exception</ID>
    <ID>TooManyFunctions:LiteApi.kt$LiteApi</ID>
    <ID>TooManyFunctions:LiteApiClient.kt$LiteApiClient : LiteApi</ID>
  </CurrentIssues>
</SmellBaseline>
