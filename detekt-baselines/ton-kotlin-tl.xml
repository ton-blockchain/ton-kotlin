<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>EmptyFunctionBlock:TlDecoderImpl.kt$TlStructureDecoder${ }</ID>
    <ID>EmptyFunctionBlock:TlEncoderImpl.kt$TlEncoderImpl${ }</ID>
    <ID>EmptyFunctionBlock:TlEncoderImpl.kt$TlEncoderImpl.TlCompositeEncoder${ }</ID>
    <ID>ForbiddenComment:annotations.kt$// TODO: use caching inside TL</ID>
    <ID>InvalidPackageDeclaration:ByteArrayBase64Serializer.kt$package org.ton.kotlin.tl.serializers</ID>
    <ID>InvalidPackageDeclaration:ByteStringBase64Serializer.kt$package org.ton.kotlin.tl.serializers</ID>
    <ID>InvalidPackageDeclaration:TL.kt$package org.ton.kotlin.tl</ID>
    <ID>InvalidPackageDeclaration:TlDecoderImpl.kt$package org.ton.kotlin.tl.internal</ID>
    <ID>InvalidPackageDeclaration:TlEncoderImpl.kt$package org.ton.kotlin.tl.internal</ID>
    <ID>InvalidPackageDeclaration:TlMeta.kt$package org.ton.kotlin.tl.internal</ID>
    <ID>InvalidPackageDeclaration:TlReader.kt$package org.ton.kotlin.tl.internal</ID>
    <ID>InvalidPackageDeclaration:TlWriter.kt$package org.ton.kotlin.tl.internal</ID>
    <ID>InvalidPackageDeclaration:annotations.kt$package org.ton.kotlin.tl</ID>
    <ID>LoopWithTooManyJumpStatements:TlDecoderImpl.kt$TlStructureDecoder$for</ID>
    <ID>LoopWithTooManyJumpStatements:TlEncoderImpl.kt$TlEncoderImpl.TlCompositeEncoder$for</ID>
    <ID>MaxLineLength:TlDecoderImpl.kt$TlDecoderImpl$?:</ID>
    <ID>MaxLineLength:TlDecoderImpl.kt$TlDecoderImpl$throw SerializationException("Unexpected constructor id 0x${constructorId.toHexString()} ($constructorId) for ${deserializer.descriptor.serialName}")</ID>
    <ID>MaxLineLength:TlDecoderImpl.kt$TlStructureDecoder$"Error decoding element at index $index in ${descriptor.serialName}: ${descriptor.getElementName(index)}"</ID>
    <ID>MaxLineLength:TlDecoderImpl.kt$TlStructureDecoder$?:</ID>
    <ID>MaxLineLength:TlReader.kt$SourceTlReader$else -&gt; throw IllegalStateException("Expected ${TL_BOOL_TRUE.toHexString()}($TL_BOOL_TRUE) or ${TL_BOOL_FALSE.toHexString()}($TL_BOOL_FALSE), got ${value.toHexString()}($value)")</ID>
    <ID>NestedBlockDepth:TlDecoderImpl.kt$TlDecoderImpl$@Suppress("UNCHECKED_CAST") @OptIn(InternalSerializationApi::class) override fun &lt;T&gt; decodeSerializableValue(deserializer: DeserializationStrategy&lt;T&gt;): T</ID>
    <ID>ReturnCount:TlDecoderImpl.kt$TlStructureDecoder$@OptIn(InternalSerializationApi::class) override fun &lt;T&gt; decodeSerializableValue(deserializer: DeserializationStrategy&lt;T&gt;): T</ID>
    <ID>SpreadOperator:ByteStringBase64Serializer.kt$ByteStringBase64Serializer$(*decoder.decodeSerializableValue(byteArraySerializer))</ID>
    <ID>TooGenericExceptionCaught:TlDecoderImpl.kt$TlStructureDecoder$e: Exception</ID>
    <ID>TooGenericExceptionCaught:TlReader.kt$SourceTlReader$e: Exception</ID>
    <ID>TooManyFunctions:TlDecoderImpl.kt$TlDecoderImpl : TlDecoder</ID>
    <ID>TooManyFunctions:TlDecoderImpl.kt$TlStructureDecoder : TlDecoderImplCompositeDecoder</ID>
    <ID>TooManyFunctions:TlEncoderImpl.kt$TlEncoderImpl : TlEncoder</ID>
    <ID>TooManyFunctions:TlEncoderImpl.kt$TlEncoderImpl$TlCompositeEncoder : TlEncoderImplCompositeEncoder</ID>
    <ID>TooManyFunctions:TlReader.kt$SourceTlReader : TlReader</ID>
    <ID>TooManyFunctions:TlReader.kt$TlReader</ID>
    <ID>TooManyFunctions:TlWriter.kt$SinkTlWriter : TlWriter</ID>
    <ID>TooManyFunctions:TlWriter.kt$TlWriter</ID>
    <ID>UnusedParameter:annotations.kt$tl: TL</ID>
    <ID>UnusedPrivateProperty:TlWriter.kt$SinkTlWriter$i</ID>
    <ID>UseCheckOrError:TlReader.kt$SourceTlReader$throw IllegalStateException("Expected ${TL_BOOL_TRUE.toHexString()}($TL_BOOL_TRUE) or ${TL_BOOL_FALSE.toHexString()}($TL_BOOL_FALSE), got ${value.toHexString()}($value)")</ID>
  </CurrentIssues>
</SmellBaseline>
