<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ForbiddenComment:BagOfCellsUtils.kt$// TODO: Crc32c check (calculate size of resulting bytearray)</ID>
    <ID>InvalidPackageDeclaration:BagOfCells.kt$package org.ton.boc</ID>
    <ID>InvalidPackageDeclaration:BagOfCellsImpl.kt$package org.ton.boc</ID>
    <ID>InvalidPackageDeclaration:BagOfCellsUtils.kt$package org.ton.boc</ID>
    <ID>InvalidPackageDeclaration:CachedBagOfCells.kt$package org.ton.boc</ID>
    <ID>InvalidPackageDeclaration:Cell.kt$package org.ton.cell</ID>
    <ID>InvalidPackageDeclaration:CellBuilder.kt$package org.ton.cell</ID>
    <ID>InvalidPackageDeclaration:CellDescriptor.kt$package org.ton.cell</ID>
    <ID>InvalidPackageDeclaration:CellSlice.kt$package org.ton.cell</ID>
    <ID>InvalidPackageDeclaration:CellType.kt$package org.ton.cell</ID>
    <ID>InvalidPackageDeclaration:DataCell.kt$package org.ton.cell</ID>
    <ID>InvalidPackageDeclaration:EmptyCell.kt$package org.ton.cell</ID>
    <ID>InvalidPackageDeclaration:LevelMask.kt$package org.ton.cell</ID>
    <ID>InvalidPackageDeclaration:PrunedBranchCell.kt$package org.ton.cell</ID>
    <ID>InvalidPackageDeclaration:Tvm.kt$package org.ton</ID>
    <ID>InvalidPackageDeclaration:VirtualCell.kt$package org.ton.cell</ID>
    <ID>InvalidPackageDeclaration:exceptions.kt$package org.ton.cell.exception</ID>
    <ID>LongMethod:BagOfCellsUtils.kt$internal fun Input.readBagOfCell(): BagOfCells</ID>
    <ID>LongMethod:BagOfCellsUtils.kt$private fun serializeBagOfCells( bagOfCells: BagOfCells, hasIndex: Boolean, hasCrc32c: Boolean, hasCacheBits: Boolean, flags: Int ): ByteArray</ID>
    <ID>LongMethod:CachedBagOfCells.kt$CachedBagOfCells$private fun reorderCells()</ID>
    <ID>LongMethod:CellBuilder.kt$CellBuilderImpl$private fun computeHashes(descriptor: CellDescriptor, childrenMask: LevelMask): List&lt;Pair&lt;ByteArray, Int&gt;&gt;</ID>
    <ID>LongParameterList:BagOfCellsUtils.kt$( index: Int, cells: Array&lt;CompletableDeferred&lt;Cell&gt;&gt;, bits: Array&lt;BitString&gt;, refs: Array&lt;IntArray&gt;, descriptors: Array&lt;CellDescriptor&gt;, cellHashes: Array&lt;List&lt;Pair&lt;ByteArray, Int&gt;&gt;?&gt; )</ID>
    <ID>MaxLineLength:BagOfCellsUtils.kt$check(prevOffset &lt;= offset) { "bag-of-cells error: offset of cell #$index must be higher, than $prevOffset" }</ID>
    <ID>MaxLineLength:BagOfCellsUtils.kt$check(refIndex &lt; cellCount) { "bag-of-cells error: reference #$k of cell #$cellIndex is to non-existent cell #$refIndex, only $cellCount cells are defined" }</ID>
    <ID>MaxLineLength:BagOfCellsUtils.kt$check(refIndex &gt; cellIndex) { "bag-of-cells error: reference #$k of cell #$cellIndex is to cell #$refIndex with smaller index" }</ID>
    <ID>MaxLineLength:CachedBagOfCells.kt$CachedBagOfCells$check(cellList.size == cellListTmp.size) { "cellList.size: ${cellList.size}, cellListTmp.size: ${cellListTmp.size}" }</ID>
    <ID>MaxLineLength:CellBuilder.kt$CellBuilderImpl$"Cell type mismatch, expected: ${CellType.LIBRARY_REFERENCE} ${CellType.LIBRARY_REFERENCE.value}, actual: ${data[0]}"</ID>
    <ID>MaxLineLength:CellBuilder.kt$CellBuilderImpl$"Cell type mismatch, expected: ${CellType.MERKLE_PROOF} ${CellType.MERKLE_PROOF.value}, actual: ${data[0]}"</ID>
    <ID>MaxLineLength:CellBuilder.kt$CellBuilderImpl$"Cell type mismatch, expected: ${CellType.MERKLE_UPDATE} ${CellType.MERKLE_UPDATE.value}, actual: ${data[0]}"</ID>
    <ID>MaxLineLength:CellBuilder.kt$CellBuilderImpl$"Cell type mismatch, expected: ${CellType.PRUNED_BRANCH} ${CellType.PRUNED_BRANCH.value}, actual: ${data[0]}"</ID>
    <ID>MaxLineLength:CellBuilder.kt$CellBuilderImpl$require(value &gt;= -intBits &amp;&amp; value &lt; intBits) { "Can't store an Int, because its value allocates more space than provided." }</ID>
    <ID>MaxLineLength:CellSize.kt$CellSize$return minBits in 0..Cell.MAX_BITS_SIZE &amp;&amp; maxBits in 0..Cell.MAX_BITS_SIZE &amp;&amp; minRefs in 0..4 &amp;&amp; maxRefs in 0..4</ID>
    <ID>NestedBlockDepth:CachedBagOfCells.kt$CachedBagOfCells$private fun revisit(cellIndex: Int, force: Revisit): Int</ID>
    <ID>NewLineAtEndOfFile:CellContext.kt$org.ton.kotlin.cell.CellContext.kt</ID>
    <ID>NewLineAtEndOfFile:CellSize.kt$org.ton.kotlin.cell.CellSize.kt</ID>
    <ID>ProtectedMemberInFinalClass:CellSlice.kt$CellSliceByteBackedBitString$protected fun checkBitsOverflow(length: Int)</ID>
    <ID>ProtectedMemberInFinalClass:CellSlice.kt$CellSliceByteBackedBitString$protected fun checkRefsOverflow()</ID>
    <ID>ReturnCount:CachedBagOfCells.kt$CachedBagOfCells$private fun revisit(cellIndex: Int, force: Revisit): Int</ID>
    <ID>SpreadOperator:CellBuilder.kt$(*BooleanArray(bits))</ID>
    <ID>SpreadOperator:CellBuilder.kt$CellBuilder$(*BooleanArray(bitCount))</ID>
    <ID>SpreadOperator:CellBuilder.kt$CellBuilderImpl$(*bits)</ID>
    <ID>SpreadOperator:CellSlice.kt$CellSlice$(*loadByteArray(byteCount))</ID>
    <ID>SpreadOperator:CellSlice.kt$CellSlice$(*preloadByteArray(byteCount))</ID>
    <ID>TooGenericExceptionCaught:BagOfCells.kt$BagOfCells.Companion$e: Exception</ID>
    <ID>TooManyFunctions:CellBuilder.kt$CellBuilder</ID>
    <ID>TooManyFunctions:CellBuilder.kt$CellBuilderImpl : CellBuilder</ID>
    <ID>TooManyFunctions:CellSlice.kt$CellSlice</ID>
    <ID>TooManyFunctions:CellSlice.kt$CellSliceByteBackedBitString : CellSlice</ID>
    <ID>UseRequire:CellContext.kt$CellContext.Companion.&lt;no name provided&gt;$throw IllegalArgumentException("Can't load ${cell::class} $cell")</ID>
  </CurrentIssues>
</SmellBaseline>
