<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ConstructorParameterNaming:AdnlPacketContents.kt$AdnlPacketContents$confirm_seqno: Long? = null</ID>
    <ID>ConstructorParameterNaming:AdnlPacketContents.kt$AdnlPacketContents$dst_reinit_date: Int? = null</ID>
    <ID>ConstructorParameterNaming:AdnlPacketContents.kt$AdnlPacketContents$from_short: AdnlIdShort? = null</ID>
    <ID>ConstructorParameterNaming:AdnlPacketContents.kt$AdnlPacketContents$priority_address: AdnlAddressList? = null</ID>
    <ID>ConstructorParameterNaming:AdnlPacketContents.kt$AdnlPacketContents$recv_addr_list_version: Int? = null</ID>
    <ID>ConstructorParameterNaming:AdnlPacketContents.kt$AdnlPacketContents$recv_priority_addr_list_version: Int? = null</ID>
    <ID>ConstructorParameterNaming:AdnlPacketContents.kt$AdnlPacketContents$reinit_date: Int? = null</ID>
    <ID>ConstructorParameterNaming:HttpRequest.kt$HttpRequest$val http_version: String</ID>
    <ID>EmptyClassBlock:TcpMessage.kt$TcpMessage${ }</ID>
    <ID>EmptyFunctionBlock:AdnlMessageNop.kt$AdnlMessageNop${ }</ID>
    <ID>EmptyFunctionBlock:DhtStored.kt$DhtStored${ }</ID>
    <ID>FunctionParameterNaming:AdnlPacketContents.kt$AdnlPacketContents.Companion$confirm_seqno: Boolean = false</ID>
    <ID>FunctionParameterNaming:AdnlPacketContents.kt$AdnlPacketContents.Companion$from_short: Boolean = false</ID>
    <ID>FunctionParameterNaming:AdnlPacketContents.kt$AdnlPacketContents.Companion$priority_address: Boolean = false</ID>
    <ID>FunctionParameterNaming:AdnlPacketContents.kt$AdnlPacketContents.Companion$recv_addr_list_version: Boolean = false</ID>
    <ID>FunctionParameterNaming:AdnlPacketContents.kt$AdnlPacketContents.Companion$recv_priority_addr_list_version: Boolean = false</ID>
    <ID>FunctionParameterNaming:AdnlPacketContents.kt$AdnlPacketContents.Companion$reinit_date: Boolean = false</ID>
    <ID>InvalidPackageDeclaration:AdnlAddress.kt$package org.ton.api.adnl</ID>
    <ID>InvalidPackageDeclaration:AdnlAddressList.kt$package org.ton.api.adnl</ID>
    <ID>InvalidPackageDeclaration:AdnlConfigGlobal.kt$package org.ton.api.adnl.config</ID>
    <ID>InvalidPackageDeclaration:AdnlIdShort.kt$package org.ton.api.adnl</ID>
    <ID>InvalidPackageDeclaration:AdnlMessage.kt$package org.ton.api.adnl.message</ID>
    <ID>InvalidPackageDeclaration:AdnlMessageAnswer.kt$package org.ton.api.adnl.message</ID>
    <ID>InvalidPackageDeclaration:AdnlMessageConfirmChannel.kt$package org.ton.api.adnl.message</ID>
    <ID>InvalidPackageDeclaration:AdnlMessageCreateChannel.kt$package org.ton.api.adnl.message</ID>
    <ID>InvalidPackageDeclaration:AdnlMessageCustom.kt$package org.ton.api.adnl.message</ID>
    <ID>InvalidPackageDeclaration:AdnlMessageNop.kt$package org.ton.api.adnl.message</ID>
    <ID>InvalidPackageDeclaration:AdnlMessagePart.kt$package org.ton.api.adnl.message</ID>
    <ID>InvalidPackageDeclaration:AdnlMessageQuery.kt$package org.ton.api.adnl.message</ID>
    <ID>InvalidPackageDeclaration:AdnlMessageReinit.kt$package org.ton.api.adnl.message</ID>
    <ID>InvalidPackageDeclaration:AdnlNode.kt$package org.ton.api.adnl</ID>
    <ID>InvalidPackageDeclaration:AdnlNodes.kt$package org.ton.api.adnl</ID>
    <ID>InvalidPackageDeclaration:AdnlPacketContents.kt$package org.ton.api.adnl</ID>
    <ID>InvalidPackageDeclaration:AdnlPing.kt$package org.ton.api.adnl</ID>
    <ID>InvalidPackageDeclaration:AdnlPong.kt$package org.ton.api.adnl</ID>
    <ID>InvalidPackageDeclaration:AdnlProxy.kt$package org.ton.api.adnl</ID>
    <ID>InvalidPackageDeclaration:AdnlProxyTo.kt$package org.ton.api.adnl</ID>
    <ID>InvalidPackageDeclaration:AdnlProxyToSign.kt$package org.ton.api.adnl</ID>
    <ID>InvalidPackageDeclaration:ConfigGlobal.kt$package org.ton.api.config</ID>
    <ID>InvalidPackageDeclaration:DhtConfigGlobal.kt$package org.ton.api.dht.config</ID>
    <ID>InvalidPackageDeclaration:DhtConfigIdLocal.kt$package org.ton.api.dht.config</ID>
    <ID>InvalidPackageDeclaration:DhtConfigLocal.kt$package org.ton.api.dht.config</ID>
    <ID>InvalidPackageDeclaration:DhtConfigRandomLocal.kt$package org.ton.api.dht.config</ID>
    <ID>InvalidPackageDeclaration:DhtDbBucket.kt$package org.ton.api.dht.db</ID>
    <ID>InvalidPackageDeclaration:DhtDbKey.kt$package org.ton.api.dht.db</ID>
    <ID>InvalidPackageDeclaration:DhtFindValue.kt$package org.ton.api.dht.functions</ID>
    <ID>InvalidPackageDeclaration:DhtKey.kt$package org.ton.api.dht</ID>
    <ID>InvalidPackageDeclaration:DhtKeyDescription.kt$package org.ton.api.dht</ID>
    <ID>InvalidPackageDeclaration:DhtMessage.kt$package org.ton.api.dht</ID>
    <ID>InvalidPackageDeclaration:DhtNode.kt$package org.ton.api.dht</ID>
    <ID>InvalidPackageDeclaration:DhtNodes.kt$package org.ton.api.dht</ID>
    <ID>InvalidPackageDeclaration:DhtPing.kt$package org.ton.api.dht.functions</ID>
    <ID>InvalidPackageDeclaration:DhtPong.kt$package org.ton.api.dht</ID>
    <ID>InvalidPackageDeclaration:DhtQuery.kt$package org.ton.api.dht.functions</ID>
    <ID>InvalidPackageDeclaration:DhtStore.kt$package org.ton.api.dht</ID>
    <ID>InvalidPackageDeclaration:DhtStored.kt$package org.ton.api.dht</ID>
    <ID>InvalidPackageDeclaration:DhtUpdateRule.kt$package org.ton.api.dht</ID>
    <ID>InvalidPackageDeclaration:DhtValue.kt$package org.ton.api.dht</ID>
    <ID>InvalidPackageDeclaration:DhtValueResult.kt$package org.ton.api.dht</ID>
    <ID>InvalidPackageDeclaration:FecRaptorQ.kt$package org.ton.api.fec</ID>
    <ID>InvalidPackageDeclaration:FecType.kt$package org.ton.api.fec</ID>
    <ID>InvalidPackageDeclaration:HttpGetNextPayloadPart.kt$package org.ton.api.http.functions</ID>
    <ID>InvalidPackageDeclaration:HttpHeader.kt$package org.ton.api.http</ID>
    <ID>InvalidPackageDeclaration:HttpPayloadPart.kt$package org.ton.api.http</ID>
    <ID>InvalidPackageDeclaration:HttpRequest.kt$package org.ton.api.http.functions</ID>
    <ID>InvalidPackageDeclaration:HttpResponse.kt$package org.ton.api.http</ID>
    <ID>InvalidPackageDeclaration:HttpServerDnsEntry.kt$package org.ton.api.http.server</ID>
    <ID>InvalidPackageDeclaration:HttpServerHost.kt$package org.ton.api.http.server</ID>
    <ID>InvalidPackageDeclaration:LiteClientConfigGlobal.kt$package org.ton.api.liteclient.config</ID>
    <ID>InvalidPackageDeclaration:LiteServerConfigLocal.kt$package org.ton.api.liteserver.config</ID>
    <ID>InvalidPackageDeclaration:LiteServerConfigRandomLocal.kt$package org.ton.api.liteserver.config</ID>
    <ID>InvalidPackageDeclaration:LiteServerDesc.kt$package org.ton.api.liteserver</ID>
    <ID>InvalidPackageDeclaration:OverlayNode.kt$package org.ton.api.overlay</ID>
    <ID>InvalidPackageDeclaration:OverlayNodeToSign.kt$package org.ton.api.overlay</ID>
    <ID>InvalidPackageDeclaration:OverlayNodes.kt$package org.ton.api.overlay</ID>
    <ID>InvalidPackageDeclaration:RldpAnswer.kt$package org.ton.api.rldp</ID>
    <ID>InvalidPackageDeclaration:RldpComplete.kt$package org.ton.api.rldp</ID>
    <ID>InvalidPackageDeclaration:RldpConfirm.kt$package org.ton.api.rldp</ID>
    <ID>InvalidPackageDeclaration:RldpMessage.kt$package org.ton.api.rldp</ID>
    <ID>InvalidPackageDeclaration:RldpMessageData.kt$package org.ton.api.rldp</ID>
    <ID>InvalidPackageDeclaration:RldpMessagePart.kt$package org.ton.api.rldp</ID>
    <ID>InvalidPackageDeclaration:RldpMessagePartData.kt$package org.ton.api.rldp</ID>
    <ID>InvalidPackageDeclaration:RldpQuery.kt$package org.ton.api.rldp</ID>
    <ID>InvalidPackageDeclaration:Shard.kt$package org.ton.api.tonnode</ID>
    <ID>InvalidPackageDeclaration:SignedTlObject.kt$package org.ton.api</ID>
    <ID>InvalidPackageDeclaration:TcpAuthentificate.kt$package org.ton.api.tcp</ID>
    <ID>InvalidPackageDeclaration:TcpAuthentificationComplete.kt$package org.ton.api.tcp</ID>
    <ID>InvalidPackageDeclaration:TcpAuthentificationNonce.kt$package org.ton.api.tcp</ID>
    <ID>InvalidPackageDeclaration:TcpMessage.kt$package org.ton.api.tcp</ID>
    <ID>InvalidPackageDeclaration:TcpPing.kt$package org.ton.api.tcp</ID>
    <ID>InvalidPackageDeclaration:TcpPong.kt$package org.ton.api.tcp</ID>
    <ID>InvalidPackageDeclaration:TonNodeBlockId.kt$package org.ton.api.tonnode</ID>
    <ID>InvalidPackageDeclaration:TonNodeBlockIdExt.kt$package org.ton.api.tonnode</ID>
    <ID>InvalidPackageDeclaration:TonNodeZeroStateIdExt.kt$package org.ton.api.tonnode</ID>
    <ID>InvalidPackageDeclaration:TvmException.kt$package org.ton.api.exception</ID>
    <ID>InvalidPackageDeclaration:ValidatorConfigGlobal.kt$package org.ton.api.validator.config</ID>
    <ID>InvalidPackageDeclaration:ValidatorConfigLocal.kt$package org.ton.api.validator.config</ID>
    <ID>InvalidPackageDeclaration:ValidatorConfigRandomLocal.kt$package org.ton.api.validator.config</ID>
    <ID>InvalidPackageDeclaration:Workchain.kt$package org.ton.api.tonnode</ID>
    <ID>InvalidPackageDeclaration:exceptions.kt$package org.ton.api.exception</ID>
    <ID>LongParameterList:AdnlPacketContents.kt$AdnlPacketContents.Companion$( from: Boolean = false, from_short: Boolean = false, message: Boolean = false, messages: Boolean = false, address: Boolean = false, priority_address: Boolean = false, seqno: Boolean = false, confirm_seqno: Boolean = false, recv_addr_list_version: Boolean = false, recv_priority_addr_list_version: Boolean = false, reinit_date: Boolean = false, signature: Boolean = false )</ID>
    <ID>MaxLineLength:AdnlAddressList.kt$AdnlAddressList.Companion$schema = "adnl.addressList addrs:(vector adnl.Address) version:int reinit_date:int priority:int expire_at:int = adnl.AddressList"</ID>
    <ID>MaxLineLength:ConfigGlobal.kt$ConfigGlobalTlConstructor$schema = "config.global adnl:adnl.config.global dht:dht.config.global validator:validator.config.global = config.Global"</ID>
    <ID>MaxLineLength:DhtKeyDescription.kt$DhtKeyDescriptionTlConstructor$schema = "dht.keyDescription key:dht.key id:PublicKey update_rule:dht.UpdateRule signature:bytes = dht.KeyDescription"</ID>
    <ID>MaxLineLength:FecType.kt$FecType.Companion$require(fecType.symbolSize &lt;= 1 shl 11) { "symbol_size must be less than ${1 shl 11}, actual: ${fecType.symbolSize}" }</ID>
    <ID>MaxLineLength:FecType.kt$FecType.Companion$throw IllegalArgumentException("expected symbol_count: $expectedSymbolCount, actual: ${fecType.symbolCount}")</ID>
    <ID>MaxLineLength:HttpRequest.kt$HttpRequest.Companion$schema = "http.request id:int256 method:string url:string http_version:string headers:(vector http.header) = http.Response"</ID>
    <ID>MaxLineLength:HttpResponse.kt$HttpResponseTlConstructor$schema = "http.response http_version:string status_code:int reason:string headers:(vector http.header) no_payload:Bool = http.Response"</ID>
    <ID>MaxLineLength:RldpMessagePartData.kt$RldpMessagePartData.Companion$schema = "rldp.messagePart transfer_id:int256 fec_type:fec.Type part:int total_size:long seqno:int data:bytes = rldp.MessagePart"</ID>
    <ID>MaxLineLength:TonNodeBlockIdExt.kt$TonNodeBlockIdExtTlConstructor$schema = "tonNode.blockIdExt workchain:int shard:long seqno:int root_hash:int256 file_hash:int256 = tonNode.BlockIdExt"</ID>
    <ID>MaxLineLength:ValidatorConfigGlobal.kt$ValidatorConfigGlobalTlConstructor$schema = "validator.config.global zero_state:tonNode.blockIdExt init_block:tonNode.blockIdExt hardforks:(vector tonNode.blockIdExt) = validator.config.Global"</ID>
    <ID>SpreadOperator:AdnlMessagePart.kt$AdnlMessagePart.Companion$(*data.copyOfRange(offset, offset + partSize))</ID>
    <ID>SpreadOperator:AdnlMessagePart.kt$AdnlMessagePart.Companion$(*hash)</ID>
    <ID>SpreadOperator:AdnlPacketContents.kt$AdnlPacketContents$(*Random.nextBytes(if (Random.nextBoolean()) 7 else 15))</ID>
    <ID>SpreadOperator:AdnlPacketContents.kt$AdnlPacketContents$(*signature)</ID>
    <ID>SpreadOperator:DhtKeyDescription.kt$DhtKeyDescription$( *privateKey.signToByteArray( copy(signature = ByteString()).toByteArray() ) )</ID>
    <ID>SpreadOperator:DhtNode.kt$DhtNode$(*privateKey.signToByteArray(tlCodec().encodeToByteArray(this)))</ID>
    <ID>SpreadOperator:DhtValue.kt$DhtValue$(*privateKey.signToByteArray(tlCodec().encodeToByteArray(this)))</ID>
    <ID>SpreadOperator:OverlayNode.kt$OverlayNode$( *signer.signToByteArray( tlCodec().encodeToByteArray( copy(signature = ByteString()) ) ) )</ID>
    <ID>SpreadOperator:TonNodeBlockIdExt.kt$TonNodeBlockIdExt$(*ByteArray(32))</ID>
    <ID>SwallowedException:TonNodeBlockId.kt$TonNodeBlockId.Companion$e: Exception</ID>
    <ID>SwallowedException:TonNodeBlockIdExt.kt$TonNodeBlockIdExt.Companion$e: Exception</ID>
    <ID>TooGenericExceptionCaught:TonNodeBlockId.kt$TonNodeBlockId.Companion$e: Exception</ID>
    <ID>TooGenericExceptionCaught:TonNodeBlockIdExt.kt$TonNodeBlockIdExt.Companion$e: Exception</ID>
    <ID>UnusedParameter:Shard.kt$Shard.Companion$shardBlock: TonNodeBlockIdExt</ID>
    <ID>UnusedParameter:Shard.kt$Shard.Companion$shardProof: Cell</ID>
    <ID>UseRequire:AdnlPacketContents.kt$AdnlPacketContents$throw IllegalArgumentException("`from` and `from_short` mismatch")</ID>
    <ID>UseRequire:AdnlPacketContents.kt$AdnlPacketContents$throw IllegalArgumentException("`priority_address` contains empty list")</ID>
    <ID>UseRequire:AdnlPacketContents.kt$AdnlPacketContents$throw IllegalArgumentException("both fields `message` and `messages` set")</ID>
    <ID>UseRequire:FecType.kt$FecType.Companion$throw IllegalArgumentException("expected symbol_count: $expectedSymbolCount, actual: ${fecType.symbolCount}")</ID>
  </CurrentIssues>
</SmellBaseline>
