// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, watchosArm32, watchosArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <org.ton.kotlin:ton-kotlin-tonapi-tl>
final enum class org.ton.api.dht/DhtUpdateRule : kotlin/Enum<org.ton.api.dht/DhtUpdateRule>, org.ton.tl/TlObject<org.ton.api.dht/DhtUpdateRule> { // org.ton.api.dht/DhtUpdateRule|null[0]
    enum entry ANYBODY // org.ton.api.dht/DhtUpdateRule.ANYBODY|null[0]
    enum entry OVERLAY_NODES // org.ton.api.dht/DhtUpdateRule.OVERLAY_NODES|null[0]
    enum entry SIGNATURE // org.ton.api.dht/DhtUpdateRule.SIGNATURE|null[0]

    final val entries // org.ton.api.dht/DhtUpdateRule.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<org.ton.api.dht/DhtUpdateRule> // org.ton.api.dht/DhtUpdateRule.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.dht/DhtUpdateRule> // org.ton.api.dht/DhtUpdateRule.tlCodec|tlCodec(){}[0]
    final fun valueOf(kotlin/String): org.ton.api.dht/DhtUpdateRule // org.ton.api.dht/DhtUpdateRule.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<org.ton.api.dht/DhtUpdateRule> // org.ton.api.dht/DhtUpdateRule.values|values#static(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory, org.ton.tl.constructors/EnumTlCombinator<org.ton.api.dht/DhtUpdateRule> { // org.ton.api.dht/DhtUpdateRule.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.dht/DhtUpdateRule> // org.ton.api.dht/DhtUpdateRule.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // org.ton.api.dht/DhtUpdateRule.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

abstract interface <#A: org.ton.tl/TlObject<#A>> org.ton.api/SignedTlObject : org.ton.tl/TlObject<#A> { // org.ton.api/SignedTlObject|null[0]
    abstract val signature // org.ton.api/SignedTlObject.signature|{}signature[0]
        abstract fun <get-signature>(): kotlinx.io.bytestring/ByteString? // org.ton.api/SignedTlObject.signature.<get-signature>|<get-signature>(){}[0]

    abstract fun signed(org.ton.kotlin.crypto/Signer): #A // org.ton.api/SignedTlObject.signed|signed(org.ton.kotlin.crypto.Signer){}[0]
    abstract fun verify(org.ton.kotlin.crypto/SignatureVerifier): kotlin/Boolean // org.ton.api/SignedTlObject.verify|verify(org.ton.kotlin.crypto.SignatureVerifier){}[0]
}

abstract interface org.ton.api.adnl/AdnlProxy { // org.ton.api.adnl/AdnlProxy|null[0]
    abstract val id // org.ton.api.adnl/AdnlProxy.id|{}id[0]
        abstract fun <get-id>(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl/AdnlProxy.id.<get-id>|<get-id>(){}[0]

    final object Companion : org.ton.tl/TlCombinator<org.ton.api.adnl/AdnlProxy> // org.ton.api.adnl/AdnlProxy.Companion|null[0]
}

abstract interface org.ton.api.dht.functions/DhtQueryFunction { // org.ton.api.dht.functions/DhtQueryFunction|null[0]
    abstract fun query(org.ton.api.dht/DhtNode) // org.ton.api.dht.functions/DhtQueryFunction.query|query(org.ton.api.dht.DhtNode){}[0]
}

abstract interface org.ton.api.tonnode/TonNodeBlockId { // org.ton.api.tonnode/TonNodeBlockId|null[0]
    abstract val seqno // org.ton.api.tonnode/TonNodeBlockId.seqno|{}seqno[0]
        abstract fun <get-seqno>(): kotlin/Int // org.ton.api.tonnode/TonNodeBlockId.seqno.<get-seqno>|<get-seqno>(){}[0]
    abstract val shard // org.ton.api.tonnode/TonNodeBlockId.shard|{}shard[0]
        abstract fun <get-shard>(): kotlin/Long // org.ton.api.tonnode/TonNodeBlockId.shard.<get-shard>|<get-shard>(){}[0]
    abstract val workchain // org.ton.api.tonnode/TonNodeBlockId.workchain|{}workchain[0]
        abstract fun <get-workchain>(): kotlin/Int // org.ton.api.tonnode/TonNodeBlockId.workchain.<get-workchain>|<get-workchain>(){}[0]

    open fun component1(): kotlin/Int // org.ton.api.tonnode/TonNodeBlockId.component1|component1(){}[0]
    open fun component2(): kotlin/Long // org.ton.api.tonnode/TonNodeBlockId.component2|component2(){}[0]
    open fun component3(): kotlin/Int // org.ton.api.tonnode/TonNodeBlockId.component3|component3(){}[0]
    open fun isMasterchain(): kotlin/Boolean // org.ton.api.tonnode/TonNodeBlockId.isMasterchain|isMasterchain(){}[0]
    open fun isValid(): kotlin/Boolean // org.ton.api.tonnode/TonNodeBlockId.isValid|isValid(){}[0]
    open fun isValidExt(): kotlin/Boolean // org.ton.api.tonnode/TonNodeBlockId.isValidExt|isValidExt(){}[0]
    open fun isValidFull(): kotlin/Boolean // org.ton.api.tonnode/TonNodeBlockId.isValidFull|isValidFull(){}[0]
    open fun withSeqno(kotlin/Int): org.ton.api.tonnode/TonNodeBlockId // org.ton.api.tonnode/TonNodeBlockId.withSeqno|withSeqno(kotlin.Int){}[0]

    final object Companion : org.ton.tl/TlCodec<org.ton.api.tonnode/TonNodeBlockId> { // org.ton.api.tonnode/TonNodeBlockId.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.api.tonnode/TonNodeBlockId // org.ton.api.tonnode/TonNodeBlockId.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.api.tonnode/TonNodeBlockId // org.ton.api.tonnode/TonNodeBlockId.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.api.tonnode/TonNodeBlockId // org.ton.api.tonnode/TonNodeBlockId.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.tonnode/TonNodeBlockId // org.ton.api.tonnode/TonNodeBlockId.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.api.tonnode/TonNodeBlockId // org.ton.api.tonnode/TonNodeBlockId.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.api.tonnode/TonNodeBlockId // org.ton.api.tonnode/TonNodeBlockId.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.api.tonnode/TonNodeBlockId // org.ton.api.tonnode/TonNodeBlockId.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.api.tonnode/TonNodeBlockId // org.ton.api.tonnode/TonNodeBlockId.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.api.tonnode/TonNodeBlockId) // org.ton.api.tonnode/TonNodeBlockId.Companion.encode|encode(kotlinx.io.Sink;org.ton.api.tonnode.TonNodeBlockId){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.tonnode/TonNodeBlockId) // org.ton.api.tonnode/TonNodeBlockId.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.tonnode.TonNodeBlockId){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.api.tonnode/TonNodeBlockId) // org.ton.api.tonnode/TonNodeBlockId.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.api.tonnode.TonNodeBlockId){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.api.tonnode/TonNodeBlockId) // org.ton.api.tonnode/TonNodeBlockId.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.api.tonnode.TonNodeBlockId){}[0]
        final fun encodeToByteArray(org.ton.api.tonnode/TonNodeBlockId, kotlin/Boolean): kotlin/ByteArray // org.ton.api.tonnode/TonNodeBlockId.Companion.encodeToByteArray|encodeToByteArray(org.ton.api.tonnode.TonNodeBlockId;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.api.tonnode/TonNodeBlockId, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.api.tonnode/TonNodeBlockId.Companion.encodeToByteString|encodeToByteString(org.ton.api.tonnode.TonNodeBlockId;kotlin.Boolean){}[0]
        final fun hash(org.ton.api.tonnode/TonNodeBlockId): kotlin/ByteArray // org.ton.api.tonnode/TonNodeBlockId.Companion.hash|hash(org.ton.api.tonnode.TonNodeBlockId){}[0]
        final fun of(kotlin/Int, kotlin/Long, kotlin/Int): org.ton.api.tonnode/TonNodeBlockId // org.ton.api.tonnode/TonNodeBlockId.Companion.of|of(kotlin.Int;kotlin.Long;kotlin.Int){}[0]
        final fun parse(kotlin/String): org.ton.api.tonnode/TonNodeBlockId // org.ton.api.tonnode/TonNodeBlockId.Companion.parse|parse(kotlin.String){}[0]
        final fun parseOrNull(kotlin/String): org.ton.api.tonnode/TonNodeBlockId? // org.ton.api.tonnode/TonNodeBlockId.Companion.parseOrNull|parseOrNull(kotlin.String){}[0]
    }
}

sealed interface org.ton.api.adnl.message/AdnlMessage : org.ton.tl/TlObject<org.ton.api.adnl.message/AdnlMessage> { // org.ton.api.adnl.message/AdnlMessage|null[0]
    open fun tlCodec(): org.ton.tl/TlCodec<out org.ton.api.adnl.message/AdnlMessage> // org.ton.api.adnl.message/AdnlMessage.tlCodec|tlCodec(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory, org.ton.tl/TlCombinator<org.ton.api.adnl.message/AdnlMessage> { // org.ton.api.adnl.message/AdnlMessage.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.adnl.message/AdnlMessage> // org.ton.api.adnl.message/AdnlMessage.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // org.ton.api.adnl.message/AdnlMessage.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
        final fun sizeOf(org.ton.api.adnl.message/AdnlMessage): kotlin/Int // org.ton.api.adnl.message/AdnlMessage.Companion.sizeOf|sizeOf(org.ton.api.adnl.message.AdnlMessage){}[0]
    }
}

sealed interface org.ton.api.adnl/AdnlAddress : org.ton.tl/TlObject<org.ton.api.adnl/AdnlAddress> { // org.ton.api.adnl/AdnlAddress|null[0]
    open fun tlCodec(): org.ton.tl/TlCodec<out org.ton.api.adnl/AdnlAddress> // org.ton.api.adnl/AdnlAddress.tlCodec|tlCodec(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory, org.ton.tl/TlCombinator<org.ton.api.adnl/AdnlAddress> { // org.ton.api.adnl/AdnlAddress.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.adnl/AdnlAddress> // org.ton.api.adnl/AdnlAddress.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // org.ton.api.adnl/AdnlAddress.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

sealed interface org.ton.api.adnl/AdnlIp : org.ton.api.adnl/AdnlAddress { // org.ton.api.adnl/AdnlIp|null[0]
    abstract val ip // org.ton.api.adnl/AdnlIp.ip|{}ip[0]
        abstract fun <get-ip>(): kotlin/Int // org.ton.api.adnl/AdnlIp.ip.<get-ip>|<get-ip>(){}[0]
    abstract val port // org.ton.api.adnl/AdnlIp.port|{}port[0]
        abstract fun <get-port>(): kotlin/Int // org.ton.api.adnl/AdnlIp.port.<get-port>|<get-port>(){}[0]
}

sealed interface org.ton.api.adnl/AdnlIp6 : org.ton.api.adnl/AdnlAddress { // org.ton.api.adnl/AdnlIp6|null[0]
    abstract val ip // org.ton.api.adnl/AdnlIp6.ip|{}ip[0]
        abstract fun <get-ip>(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl/AdnlIp6.ip.<get-ip>|<get-ip>(){}[0]
    abstract val port // org.ton.api.adnl/AdnlIp6.port|{}port[0]
        abstract fun <get-port>(): kotlin/Int // org.ton.api.adnl/AdnlIp6.port.<get-port>|<get-port>(){}[0]
}

sealed interface org.ton.api.dht.config/DhtConfigLocal : org.ton.tl/TlObject<org.ton.api.dht.config/DhtConfigLocal> { // org.ton.api.dht.config/DhtConfigLocal|null[0]
    open fun tlCodec(): org.ton.tl/TlCodec<out org.ton.api.dht.config/DhtConfigLocal> // org.ton.api.dht.config/DhtConfigLocal.tlCodec|tlCodec(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory, org.ton.tl/TlCombinator<org.ton.api.dht.config/DhtConfigLocal> { // org.ton.api.dht.config/DhtConfigLocal.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.dht.config/DhtConfigLocal> // org.ton.api.dht.config/DhtConfigLocal.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // org.ton.api.dht.config/DhtConfigLocal.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

sealed interface org.ton.api.dht/DhtValueResult : org.ton.tl/TlObject<org.ton.api.dht/DhtValueResult> { // org.ton.api.dht/DhtValueResult|null[0]
    abstract fun valueOrNull(): org.ton.api.dht/DhtValue? // org.ton.api.dht/DhtValueResult.valueOrNull|valueOrNull(){}[0]
    open fun tlCodec(): org.ton.tl/TlCodec<out org.ton.api.dht/DhtValueResult> // org.ton.api.dht/DhtValueResult.tlCodec|tlCodec(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory, org.ton.tl/TlCombinator<org.ton.api.dht/DhtValueResult> { // org.ton.api.dht/DhtValueResult.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.dht/DhtValueResult> // org.ton.api.dht/DhtValueResult.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // org.ton.api.dht/DhtValueResult.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

sealed interface org.ton.api.fec/FecType : org.ton.tl/TlObject<org.ton.api.fec/FecType> { // org.ton.api.fec/FecType|null[0]
    abstract val dataSize // org.ton.api.fec/FecType.dataSize|{}dataSize[0]
        abstract fun <get-dataSize>(): kotlin/Int // org.ton.api.fec/FecType.dataSize.<get-dataSize>|<get-dataSize>(){}[0]
    abstract val symbolCount // org.ton.api.fec/FecType.symbolCount|{}symbolCount[0]
        abstract fun <get-symbolCount>(): kotlin/Int // org.ton.api.fec/FecType.symbolCount.<get-symbolCount>|<get-symbolCount>(){}[0]
    abstract val symbolSize // org.ton.api.fec/FecType.symbolSize|{}symbolSize[0]
        abstract fun <get-symbolSize>(): kotlin/Int // org.ton.api.fec/FecType.symbolSize.<get-symbolSize>|<get-symbolSize>(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory, org.ton.tl/TlCombinator<org.ton.api.fec/FecType> { // org.ton.api.fec/FecType.Companion|null[0]
        final fun check(org.ton.api.fec/FecType) // org.ton.api.fec/FecType.Companion.check|check(org.ton.api.fec.FecType){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.fec/FecType> // org.ton.api.fec/FecType.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // org.ton.api.fec/FecType.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

sealed interface org.ton.api.liteserver.config/LiteServerConfigLocal { // org.ton.api.liteserver.config/LiteServerConfigLocal|null[0]
    final object Companion : kotlinx.serialization.internal/SerializerFactory { // org.ton.api.liteserver.config/LiteServerConfigLocal.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.liteserver.config/LiteServerConfigLocal> // org.ton.api.liteserver.config/LiteServerConfigLocal.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // org.ton.api.liteserver.config/LiteServerConfigLocal.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

sealed interface org.ton.api.rldp/RldpMessage : org.ton.tl/TlObject<org.ton.api.rldp/RldpMessage> { // org.ton.api.rldp/RldpMessage|null[0]
    abstract val data // org.ton.api.rldp/RldpMessage.data|{}data[0]
        abstract fun <get-data>(): kotlinx.io.bytestring/ByteString // org.ton.api.rldp/RldpMessage.data.<get-data>|<get-data>(){}[0]
    abstract val id // org.ton.api.rldp/RldpMessage.id|{}id[0]
        abstract fun <get-id>(): kotlinx.io.bytestring/ByteString // org.ton.api.rldp/RldpMessage.id.<get-id>|<get-id>(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory, org.ton.tl/TlCombinator<org.ton.api.rldp/RldpMessage> { // org.ton.api.rldp/RldpMessage.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.rldp/RldpMessage> // org.ton.api.rldp/RldpMessage.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // org.ton.api.rldp/RldpMessage.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

sealed interface org.ton.api.rldp/RldpMessagePart : org.ton.tl/TlObject<org.ton.api.rldp/RldpMessagePart> { // org.ton.api.rldp/RldpMessagePart|null[0]
    abstract val part // org.ton.api.rldp/RldpMessagePart.part|{}part[0]
        abstract fun <get-part>(): kotlin/Int // org.ton.api.rldp/RldpMessagePart.part.<get-part>|<get-part>(){}[0]
    abstract val transferId // org.ton.api.rldp/RldpMessagePart.transferId|{}transferId[0]
        abstract fun <get-transferId>(): kotlinx.io.bytestring/ByteString // org.ton.api.rldp/RldpMessagePart.transferId.<get-transferId>|<get-transferId>(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory, org.ton.tl/TlCombinator<org.ton.api.rldp/RldpMessagePart> { // org.ton.api.rldp/RldpMessagePart.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.rldp/RldpMessagePart> // org.ton.api.rldp/RldpMessagePart.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // org.ton.api.rldp/RldpMessagePart.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

sealed interface org.ton.api.tcp/TcpMessage // org.ton.api.tcp/TcpMessage|null[0]

sealed interface org.ton.api.validator.config/ValidatorConfigLocal { // org.ton.api.validator.config/ValidatorConfigLocal|null[0]
    final object Companion : kotlinx.serialization.internal/SerializerFactory { // org.ton.api.validator.config/ValidatorConfigLocal.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.validator.config/ValidatorConfigLocal> // org.ton.api.validator.config/ValidatorConfigLocal.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // org.ton.api.validator.config/ValidatorConfigLocal.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

abstract class org.ton.api.exception/TonException : kotlin/RuntimeException { // org.ton.api.exception/TonException|null[0]
    constructor <init>(kotlin/String, kotlin/Throwable? = ...) // org.ton.api.exception/TonException.<init>|<init>(kotlin.String;kotlin.Throwable?){}[0]

    abstract val code // org.ton.api.exception/TonException.code|{}code[0]
        abstract fun <get-code>(): kotlin/Int // org.ton.api.exception/TonException.code.<get-code>|<get-code>(){}[0]
    open val cause // org.ton.api.exception/TonException.cause|{}cause[0]
        open fun <get-cause>(): kotlin/Throwable? // org.ton.api.exception/TonException.cause.<get-cause>|<get-cause>(){}[0]
    open val message // org.ton.api.exception/TonException.message|{}message[0]
        open fun <get-message>(): kotlin/String // org.ton.api.exception/TonException.message.<get-message>|<get-message>(){}[0]
}

final class org.ton.api.adnl.config/AdnlConfigGlobal { // org.ton.api.adnl.config/AdnlConfigGlobal|null[0]
    constructor <init>(org.ton.api.adnl/AdnlNodes = ...) // org.ton.api.adnl.config/AdnlConfigGlobal.<init>|<init>(org.ton.api.adnl.AdnlNodes){}[0]

    final val staticNodes // org.ton.api.adnl.config/AdnlConfigGlobal.staticNodes|{}staticNodes[0]
        final fun <get-staticNodes>(): org.ton.api.adnl/AdnlNodes // org.ton.api.adnl.config/AdnlConfigGlobal.staticNodes.<get-staticNodes>|<get-staticNodes>(){}[0]

    final fun component1(): org.ton.api.adnl/AdnlNodes // org.ton.api.adnl.config/AdnlConfigGlobal.component1|component1(){}[0]
    final fun copy(org.ton.api.adnl/AdnlNodes = ...): org.ton.api.adnl.config/AdnlConfigGlobal // org.ton.api.adnl.config/AdnlConfigGlobal.copy|copy(org.ton.api.adnl.AdnlNodes){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.adnl.config/AdnlConfigGlobal.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.adnl.config/AdnlConfigGlobal.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.adnl.config/AdnlConfigGlobal.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.adnl.config/AdnlConfigGlobal> { // org.ton.api.adnl.config/AdnlConfigGlobal.$serializer|null[0]
        final val descriptor // org.ton.api.adnl.config/AdnlConfigGlobal.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.adnl.config/AdnlConfigGlobal.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.adnl.config/AdnlConfigGlobal.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.adnl.config/AdnlConfigGlobal // org.ton.api.adnl.config/AdnlConfigGlobal.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.adnl.config/AdnlConfigGlobal) // org.ton.api.adnl.config/AdnlConfigGlobal.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.adnl.config.AdnlConfigGlobal){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.api.adnl.config/AdnlConfigGlobal> { // org.ton.api.adnl.config/AdnlConfigGlobal.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.api.adnl.config/AdnlConfigGlobal // org.ton.api.adnl.config/AdnlConfigGlobal.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.api.adnl.config/AdnlConfigGlobal // org.ton.api.adnl.config/AdnlConfigGlobal.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.api.adnl.config/AdnlConfigGlobal // org.ton.api.adnl.config/AdnlConfigGlobal.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.adnl.config/AdnlConfigGlobal // org.ton.api.adnl.config/AdnlConfigGlobal.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.api.adnl.config/AdnlConfigGlobal // org.ton.api.adnl.config/AdnlConfigGlobal.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.api.adnl.config/AdnlConfigGlobal // org.ton.api.adnl.config/AdnlConfigGlobal.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.api.adnl.config/AdnlConfigGlobal // org.ton.api.adnl.config/AdnlConfigGlobal.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.api.adnl.config/AdnlConfigGlobal // org.ton.api.adnl.config/AdnlConfigGlobal.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.api.adnl.config/AdnlConfigGlobal) // org.ton.api.adnl.config/AdnlConfigGlobal.Companion.encode|encode(kotlinx.io.Sink;org.ton.api.adnl.config.AdnlConfigGlobal){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.adnl.config/AdnlConfigGlobal) // org.ton.api.adnl.config/AdnlConfigGlobal.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.adnl.config.AdnlConfigGlobal){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.api.adnl.config/AdnlConfigGlobal) // org.ton.api.adnl.config/AdnlConfigGlobal.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.api.adnl.config.AdnlConfigGlobal){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.api.adnl.config/AdnlConfigGlobal) // org.ton.api.adnl.config/AdnlConfigGlobal.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.api.adnl.config.AdnlConfigGlobal){}[0]
        final fun encodeToByteArray(org.ton.api.adnl.config/AdnlConfigGlobal, kotlin/Boolean): kotlin/ByteArray // org.ton.api.adnl.config/AdnlConfigGlobal.Companion.encodeToByteArray|encodeToByteArray(org.ton.api.adnl.config.AdnlConfigGlobal;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.api.adnl.config/AdnlConfigGlobal, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.api.adnl.config/AdnlConfigGlobal.Companion.encodeToByteString|encodeToByteString(org.ton.api.adnl.config.AdnlConfigGlobal;kotlin.Boolean){}[0]
        final fun hash(org.ton.api.adnl.config/AdnlConfigGlobal): kotlin/ByteArray // org.ton.api.adnl.config/AdnlConfigGlobal.Companion.hash|hash(org.ton.api.adnl.config.AdnlConfigGlobal){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.adnl.config/AdnlConfigGlobal> // org.ton.api.adnl.config/AdnlConfigGlobal.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.adnl.message/AdnlMessageAnswer : org.ton.api.adnl.message/AdnlMessage { // org.ton.api.adnl.message/AdnlMessageAnswer|null[0]
    constructor <init>(kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString) // org.ton.api.adnl.message/AdnlMessageAnswer.<init>|<init>(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]

    final val answer // org.ton.api.adnl.message/AdnlMessageAnswer.answer|{}answer[0]
        final fun <get-answer>(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl.message/AdnlMessageAnswer.answer.<get-answer>|<get-answer>(){}[0]
    final val queryId // org.ton.api.adnl.message/AdnlMessageAnswer.queryId|{}queryId[0]
        final fun <get-queryId>(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl.message/AdnlMessageAnswer.queryId.<get-queryId>|<get-queryId>(){}[0]

    final fun component1(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl.message/AdnlMessageAnswer.component1|component1(){}[0]
    final fun component2(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl.message/AdnlMessageAnswer.component2|component2(){}[0]
    final fun copy(kotlinx.io.bytestring/ByteString = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.api.adnl.message/AdnlMessageAnswer // org.ton.api.adnl.message/AdnlMessageAnswer.copy|copy(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.adnl.message/AdnlMessageAnswer.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.adnl.message/AdnlMessageAnswer.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.adnl.message/AdnlMessageAnswer.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.adnl.message/AdnlMessageAnswer> { // org.ton.api.adnl.message/AdnlMessageAnswer.$serializer|null[0]
        final val descriptor // org.ton.api.adnl.message/AdnlMessageAnswer.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.adnl.message/AdnlMessageAnswer.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.adnl.message/AdnlMessageAnswer.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.adnl.message/AdnlMessageAnswer // org.ton.api.adnl.message/AdnlMessageAnswer.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.adnl.message/AdnlMessageAnswer) // org.ton.api.adnl.message/AdnlMessageAnswer.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.adnl.message.AdnlMessageAnswer){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.adnl.message/AdnlMessageAnswer> { // org.ton.api.adnl.message/AdnlMessageAnswer.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.adnl.message/AdnlMessageAnswer // org.ton.api.adnl.message/AdnlMessageAnswer.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.adnl.message/AdnlMessageAnswer) // org.ton.api.adnl.message/AdnlMessageAnswer.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.adnl.message.AdnlMessageAnswer){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.adnl.message/AdnlMessageAnswer> // org.ton.api.adnl.message/AdnlMessageAnswer.Companion.serializer|serializer(){}[0]
        final fun sizeOf(org.ton.api.adnl.message/AdnlMessageAnswer): kotlin/Int // org.ton.api.adnl.message/AdnlMessageAnswer.Companion.sizeOf|sizeOf(org.ton.api.adnl.message.AdnlMessageAnswer){}[0]
    }
}

final class org.ton.api.adnl.message/AdnlMessageConfirmChannel : org.ton.api.adnl.message/AdnlMessage { // org.ton.api.adnl.message/AdnlMessageConfirmChannel|null[0]
    constructor <init>(kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString, kotlin/Int) // org.ton.api.adnl.message/AdnlMessageConfirmChannel.<init>|<init>(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString;kotlin.Int){}[0]

    final val date // org.ton.api.adnl.message/AdnlMessageConfirmChannel.date|{}date[0]
        final fun <get-date>(): kotlin/Int // org.ton.api.adnl.message/AdnlMessageConfirmChannel.date.<get-date>|<get-date>(){}[0]
    final val key // org.ton.api.adnl.message/AdnlMessageConfirmChannel.key|{}key[0]
        final fun <get-key>(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl.message/AdnlMessageConfirmChannel.key.<get-key>|<get-key>(){}[0]
    final val peerKey // org.ton.api.adnl.message/AdnlMessageConfirmChannel.peerKey|{}peerKey[0]
        final fun <get-peerKey>(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl.message/AdnlMessageConfirmChannel.peerKey.<get-peerKey>|<get-peerKey>(){}[0]

    final fun component1(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl.message/AdnlMessageConfirmChannel.component1|component1(){}[0]
    final fun component2(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl.message/AdnlMessageConfirmChannel.component2|component2(){}[0]
    final fun component3(): kotlin/Int // org.ton.api.adnl.message/AdnlMessageConfirmChannel.component3|component3(){}[0]
    final fun copy(kotlinx.io.bytestring/ByteString = ..., kotlinx.io.bytestring/ByteString = ..., kotlin/Int = ...): org.ton.api.adnl.message/AdnlMessageConfirmChannel // org.ton.api.adnl.message/AdnlMessageConfirmChannel.copy|copy(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.adnl.message/AdnlMessageConfirmChannel.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.adnl.message/AdnlMessageConfirmChannel.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.adnl.message/AdnlMessageConfirmChannel.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.adnl.message/AdnlMessageConfirmChannel> { // org.ton.api.adnl.message/AdnlMessageConfirmChannel.$serializer|null[0]
        final val descriptor // org.ton.api.adnl.message/AdnlMessageConfirmChannel.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.adnl.message/AdnlMessageConfirmChannel.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.adnl.message/AdnlMessageConfirmChannel.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.adnl.message/AdnlMessageConfirmChannel // org.ton.api.adnl.message/AdnlMessageConfirmChannel.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.adnl.message/AdnlMessageConfirmChannel) // org.ton.api.adnl.message/AdnlMessageConfirmChannel.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.adnl.message.AdnlMessageConfirmChannel){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.adnl.message/AdnlMessageConfirmChannel> { // org.ton.api.adnl.message/AdnlMessageConfirmChannel.Companion|null[0]
        final const val SIZE_BYTES // org.ton.api.adnl.message/AdnlMessageConfirmChannel.Companion.SIZE_BYTES|{}SIZE_BYTES[0]
            final fun <get-SIZE_BYTES>(): kotlin/Int // org.ton.api.adnl.message/AdnlMessageConfirmChannel.Companion.SIZE_BYTES.<get-SIZE_BYTES>|<get-SIZE_BYTES>(){}[0]

        final fun decode(org.ton.tl/TlReader): org.ton.api.adnl.message/AdnlMessageConfirmChannel // org.ton.api.adnl.message/AdnlMessageConfirmChannel.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.adnl.message/AdnlMessageConfirmChannel) // org.ton.api.adnl.message/AdnlMessageConfirmChannel.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.adnl.message.AdnlMessageConfirmChannel){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.adnl.message/AdnlMessageConfirmChannel> // org.ton.api.adnl.message/AdnlMessageConfirmChannel.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.adnl.message/AdnlMessageCreateChannel : org.ton.api.adnl.message/AdnlMessage { // org.ton.api.adnl.message/AdnlMessageCreateChannel|null[0]
    constructor <init>(kotlinx.io.bytestring/ByteString, kotlin/Int) // org.ton.api.adnl.message/AdnlMessageCreateChannel.<init>|<init>(kotlinx.io.bytestring.ByteString;kotlin.Int){}[0]

    final val date // org.ton.api.adnl.message/AdnlMessageCreateChannel.date|{}date[0]
        final fun <get-date>(): kotlin/Int // org.ton.api.adnl.message/AdnlMessageCreateChannel.date.<get-date>|<get-date>(){}[0]
    final val key // org.ton.api.adnl.message/AdnlMessageCreateChannel.key|{}key[0]
        final fun <get-key>(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl.message/AdnlMessageCreateChannel.key.<get-key>|<get-key>(){}[0]

    final fun component1(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl.message/AdnlMessageCreateChannel.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.api.adnl.message/AdnlMessageCreateChannel.component2|component2(){}[0]
    final fun copy(kotlinx.io.bytestring/ByteString = ..., kotlin/Int = ...): org.ton.api.adnl.message/AdnlMessageCreateChannel // org.ton.api.adnl.message/AdnlMessageCreateChannel.copy|copy(kotlinx.io.bytestring.ByteString;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.adnl.message/AdnlMessageCreateChannel.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.adnl.message/AdnlMessageCreateChannel.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.adnl.message/AdnlMessageCreateChannel.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.adnl.message/AdnlMessageCreateChannel> { // org.ton.api.adnl.message/AdnlMessageCreateChannel.$serializer|null[0]
        final val descriptor // org.ton.api.adnl.message/AdnlMessageCreateChannel.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.adnl.message/AdnlMessageCreateChannel.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.adnl.message/AdnlMessageCreateChannel.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.adnl.message/AdnlMessageCreateChannel // org.ton.api.adnl.message/AdnlMessageCreateChannel.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.adnl.message/AdnlMessageCreateChannel) // org.ton.api.adnl.message/AdnlMessageCreateChannel.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.adnl.message.AdnlMessageCreateChannel){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.adnl.message/AdnlMessageCreateChannel> { // org.ton.api.adnl.message/AdnlMessageCreateChannel.Companion|null[0]
        final const val SIZE_BYTES // org.ton.api.adnl.message/AdnlMessageCreateChannel.Companion.SIZE_BYTES|{}SIZE_BYTES[0]
            final fun <get-SIZE_BYTES>(): kotlin/Int // org.ton.api.adnl.message/AdnlMessageCreateChannel.Companion.SIZE_BYTES.<get-SIZE_BYTES>|<get-SIZE_BYTES>(){}[0]

        final fun decode(org.ton.tl/TlReader): org.ton.api.adnl.message/AdnlMessageCreateChannel // org.ton.api.adnl.message/AdnlMessageCreateChannel.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.adnl.message/AdnlMessageCreateChannel) // org.ton.api.adnl.message/AdnlMessageCreateChannel.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.adnl.message.AdnlMessageCreateChannel){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.adnl.message/AdnlMessageCreateChannel> // org.ton.api.adnl.message/AdnlMessageCreateChannel.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.adnl.message/AdnlMessageCustom : org.ton.api.adnl.message/AdnlMessage { // org.ton.api.adnl.message/AdnlMessageCustom|null[0]
    constructor <init>(kotlinx.io.bytestring/ByteString) // org.ton.api.adnl.message/AdnlMessageCustom.<init>|<init>(kotlinx.io.bytestring.ByteString){}[0]

    final val data // org.ton.api.adnl.message/AdnlMessageCustom.data|{}data[0]
        final fun <get-data>(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl.message/AdnlMessageCustom.data.<get-data>|<get-data>(){}[0]

    final fun component1(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl.message/AdnlMessageCustom.component1|component1(){}[0]
    final fun copy(kotlinx.io.bytestring/ByteString = ...): org.ton.api.adnl.message/AdnlMessageCustom // org.ton.api.adnl.message/AdnlMessageCustom.copy|copy(kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.adnl.message/AdnlMessageCustom.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.adnl.message/AdnlMessageCustom.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.adnl.message/AdnlMessageCustom.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.adnl.message/AdnlMessageCustom> { // org.ton.api.adnl.message/AdnlMessageCustom.$serializer|null[0]
        final val descriptor // org.ton.api.adnl.message/AdnlMessageCustom.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.adnl.message/AdnlMessageCustom.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.adnl.message/AdnlMessageCustom.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.adnl.message/AdnlMessageCustom // org.ton.api.adnl.message/AdnlMessageCustom.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.adnl.message/AdnlMessageCustom) // org.ton.api.adnl.message/AdnlMessageCustom.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.adnl.message.AdnlMessageCustom){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.adnl.message/AdnlMessageCustom> { // org.ton.api.adnl.message/AdnlMessageCustom.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.adnl.message/AdnlMessageCustom // org.ton.api.adnl.message/AdnlMessageCustom.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.adnl.message/AdnlMessageCustom) // org.ton.api.adnl.message/AdnlMessageCustom.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.adnl.message.AdnlMessageCustom){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.adnl.message/AdnlMessageCustom> // org.ton.api.adnl.message/AdnlMessageCustom.Companion.serializer|serializer(){}[0]
        final fun sizeOf(org.ton.api.adnl.message/AdnlMessageCustom): kotlin/Int // org.ton.api.adnl.message/AdnlMessageCustom.Companion.sizeOf|sizeOf(org.ton.api.adnl.message.AdnlMessageCustom){}[0]
    }
}

final class org.ton.api.adnl.message/AdnlMessagePart : org.ton.api.adnl.message/AdnlMessage { // org.ton.api.adnl.message/AdnlMessagePart|null[0]
    constructor <init>(kotlinx.io.bytestring/ByteString, kotlin/Int, kotlin/Int, kotlinx.io.bytestring/ByteString) // org.ton.api.adnl.message/AdnlMessagePart.<init>|<init>(kotlinx.io.bytestring.ByteString;kotlin.Int;kotlin.Int;kotlinx.io.bytestring.ByteString){}[0]

    final val data // org.ton.api.adnl.message/AdnlMessagePart.data|{}data[0]
        final fun <get-data>(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl.message/AdnlMessagePart.data.<get-data>|<get-data>(){}[0]
    final val hash // org.ton.api.adnl.message/AdnlMessagePart.hash|{}hash[0]
        final fun <get-hash>(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl.message/AdnlMessagePart.hash.<get-hash>|<get-hash>(){}[0]
    final val offset // org.ton.api.adnl.message/AdnlMessagePart.offset|{}offset[0]
        final fun <get-offset>(): kotlin/Int // org.ton.api.adnl.message/AdnlMessagePart.offset.<get-offset>|<get-offset>(){}[0]
    final val totalSize // org.ton.api.adnl.message/AdnlMessagePart.totalSize|{}totalSize[0]
        final fun <get-totalSize>(): kotlin/Int // org.ton.api.adnl.message/AdnlMessagePart.totalSize.<get-totalSize>|<get-totalSize>(){}[0]

    final fun component1(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl.message/AdnlMessagePart.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.api.adnl.message/AdnlMessagePart.component2|component2(){}[0]
    final fun component3(): kotlin/Int // org.ton.api.adnl.message/AdnlMessagePart.component3|component3(){}[0]
    final fun component4(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl.message/AdnlMessagePart.component4|component4(){}[0]
    final fun copy(kotlinx.io.bytestring/ByteString = ..., kotlin/Int = ..., kotlin/Int = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.api.adnl.message/AdnlMessagePart // org.ton.api.adnl.message/AdnlMessagePart.copy|copy(kotlinx.io.bytestring.ByteString;kotlin.Int;kotlin.Int;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.adnl.message/AdnlMessagePart.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.adnl.message/AdnlMessagePart.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.adnl.message/AdnlMessagePart.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.adnl.message/AdnlMessagePart> { // org.ton.api.adnl.message/AdnlMessagePart.$serializer|null[0]
        final val descriptor // org.ton.api.adnl.message/AdnlMessagePart.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.adnl.message/AdnlMessagePart.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.adnl.message/AdnlMessagePart.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.adnl.message/AdnlMessagePart // org.ton.api.adnl.message/AdnlMessagePart.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.adnl.message/AdnlMessagePart) // org.ton.api.adnl.message/AdnlMessagePart.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.adnl.message.AdnlMessagePart){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.api.adnl.message/AdnlMessagePart> { // org.ton.api.adnl.message/AdnlMessagePart.Companion|null[0]
        final fun build(org.ton.api.adnl.message/AdnlMessage, kotlin/Int): kotlin.collections/List<org.ton.api.adnl.message/AdnlMessagePart> // org.ton.api.adnl.message/AdnlMessagePart.Companion.build|build(org.ton.api.adnl.message.AdnlMessage;kotlin.Int){}[0]
        final fun decode(kotlin/ByteArray): org.ton.api.adnl.message/AdnlMessagePart // org.ton.api.adnl.message/AdnlMessagePart.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.api.adnl.message/AdnlMessagePart // org.ton.api.adnl.message/AdnlMessagePart.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.api.adnl.message/AdnlMessagePart // org.ton.api.adnl.message/AdnlMessagePart.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.adnl.message/AdnlMessagePart // org.ton.api.adnl.message/AdnlMessagePart.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.api.adnl.message/AdnlMessagePart // org.ton.api.adnl.message/AdnlMessagePart.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.api.adnl.message/AdnlMessagePart // org.ton.api.adnl.message/AdnlMessagePart.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.api.adnl.message/AdnlMessagePart // org.ton.api.adnl.message/AdnlMessagePart.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.api.adnl.message/AdnlMessagePart // org.ton.api.adnl.message/AdnlMessagePart.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.api.adnl.message/AdnlMessagePart) // org.ton.api.adnl.message/AdnlMessagePart.Companion.encode|encode(kotlinx.io.Sink;org.ton.api.adnl.message.AdnlMessagePart){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.adnl.message/AdnlMessagePart) // org.ton.api.adnl.message/AdnlMessagePart.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.adnl.message.AdnlMessagePart){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.api.adnl.message/AdnlMessagePart) // org.ton.api.adnl.message/AdnlMessagePart.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.api.adnl.message.AdnlMessagePart){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.api.adnl.message/AdnlMessagePart) // org.ton.api.adnl.message/AdnlMessagePart.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.api.adnl.message.AdnlMessagePart){}[0]
        final fun encodeToByteArray(org.ton.api.adnl.message/AdnlMessagePart, kotlin/Boolean): kotlin/ByteArray // org.ton.api.adnl.message/AdnlMessagePart.Companion.encodeToByteArray|encodeToByteArray(org.ton.api.adnl.message.AdnlMessagePart;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.api.adnl.message/AdnlMessagePart, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.api.adnl.message/AdnlMessagePart.Companion.encodeToByteString|encodeToByteString(org.ton.api.adnl.message.AdnlMessagePart;kotlin.Boolean){}[0]
        final fun hash(org.ton.api.adnl.message/AdnlMessagePart): kotlin/ByteArray // org.ton.api.adnl.message/AdnlMessagePart.Companion.hash|hash(org.ton.api.adnl.message.AdnlMessagePart){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.adnl.message/AdnlMessagePart> // org.ton.api.adnl.message/AdnlMessagePart.Companion.serializer|serializer(){}[0]
        final fun sizeOf(org.ton.api.adnl.message/AdnlMessagePart): kotlin/Int // org.ton.api.adnl.message/AdnlMessagePart.Companion.sizeOf|sizeOf(org.ton.api.adnl.message.AdnlMessagePart){}[0]
        final fun tlConstructor(): org.ton.tl/TlConstructor<org.ton.api.adnl.message/AdnlMessagePart> // org.ton.api.adnl.message/AdnlMessagePart.Companion.tlConstructor|tlConstructor(){}[0]
    }
}

final class org.ton.api.adnl.message/AdnlMessageQuery : org.ton.api.adnl.message/AdnlMessage { // org.ton.api.adnl.message/AdnlMessageQuery|null[0]
    constructor <init>(kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString) // org.ton.api.adnl.message/AdnlMessageQuery.<init>|<init>(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]

    final val query // org.ton.api.adnl.message/AdnlMessageQuery.query|{}query[0]
        final fun <get-query>(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl.message/AdnlMessageQuery.query.<get-query>|<get-query>(){}[0]
    final val queryId // org.ton.api.adnl.message/AdnlMessageQuery.queryId|{}queryId[0]
        final fun <get-queryId>(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl.message/AdnlMessageQuery.queryId.<get-queryId>|<get-queryId>(){}[0]

    final fun component1(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl.message/AdnlMessageQuery.component1|component1(){}[0]
    final fun component2(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl.message/AdnlMessageQuery.component2|component2(){}[0]
    final fun copy(kotlinx.io.bytestring/ByteString = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.api.adnl.message/AdnlMessageQuery // org.ton.api.adnl.message/AdnlMessageQuery.copy|copy(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.adnl.message/AdnlMessageQuery.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.adnl.message/AdnlMessageQuery.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.adnl.message/AdnlMessageQuery.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.adnl.message/AdnlMessageQuery> { // org.ton.api.adnl.message/AdnlMessageQuery.$serializer|null[0]
        final val descriptor // org.ton.api.adnl.message/AdnlMessageQuery.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.adnl.message/AdnlMessageQuery.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.adnl.message/AdnlMessageQuery.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.adnl.message/AdnlMessageQuery // org.ton.api.adnl.message/AdnlMessageQuery.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.adnl.message/AdnlMessageQuery) // org.ton.api.adnl.message/AdnlMessageQuery.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.adnl.message.AdnlMessageQuery){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.adnl.message/AdnlMessageQuery> { // org.ton.api.adnl.message/AdnlMessageQuery.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.adnl.message/AdnlMessageQuery // org.ton.api.adnl.message/AdnlMessageQuery.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.adnl.message/AdnlMessageQuery) // org.ton.api.adnl.message/AdnlMessageQuery.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.adnl.message.AdnlMessageQuery){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.adnl.message/AdnlMessageQuery> // org.ton.api.adnl.message/AdnlMessageQuery.Companion.serializer|serializer(){}[0]
        final fun sizeOf(org.ton.api.adnl.message/AdnlMessageQuery): kotlin/Int // org.ton.api.adnl.message/AdnlMessageQuery.Companion.sizeOf|sizeOf(org.ton.api.adnl.message.AdnlMessageQuery){}[0]
    }
}

final class org.ton.api.adnl.message/AdnlMessageReinit : org.ton.api.adnl.message/AdnlMessage { // org.ton.api.adnl.message/AdnlMessageReinit|null[0]
    constructor <init>(kotlin/Int) // org.ton.api.adnl.message/AdnlMessageReinit.<init>|<init>(kotlin.Int){}[0]

    final val date // org.ton.api.adnl.message/AdnlMessageReinit.date|{}date[0]
        final fun <get-date>(): kotlin/Int // org.ton.api.adnl.message/AdnlMessageReinit.date.<get-date>|<get-date>(){}[0]

    final fun component1(): kotlin/Int // org.ton.api.adnl.message/AdnlMessageReinit.component1|component1(){}[0]
    final fun copy(kotlin/Int = ...): org.ton.api.adnl.message/AdnlMessageReinit // org.ton.api.adnl.message/AdnlMessageReinit.copy|copy(kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.adnl.message/AdnlMessageReinit.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.adnl.message/AdnlMessageReinit.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.adnl.message/AdnlMessageReinit.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.adnl.message/AdnlMessageReinit> { // org.ton.api.adnl.message/AdnlMessageReinit.$serializer|null[0]
        final val descriptor // org.ton.api.adnl.message/AdnlMessageReinit.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.adnl.message/AdnlMessageReinit.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.adnl.message/AdnlMessageReinit.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.adnl.message/AdnlMessageReinit // org.ton.api.adnl.message/AdnlMessageReinit.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.adnl.message/AdnlMessageReinit) // org.ton.api.adnl.message/AdnlMessageReinit.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.adnl.message.AdnlMessageReinit){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.adnl.message/AdnlMessageReinit> { // org.ton.api.adnl.message/AdnlMessageReinit.Companion|null[0]
        final const val SIZE_BYTES // org.ton.api.adnl.message/AdnlMessageReinit.Companion.SIZE_BYTES|{}SIZE_BYTES[0]
            final fun <get-SIZE_BYTES>(): kotlin/Int // org.ton.api.adnl.message/AdnlMessageReinit.Companion.SIZE_BYTES.<get-SIZE_BYTES>|<get-SIZE_BYTES>(){}[0]

        final fun decode(org.ton.tl/TlReader): org.ton.api.adnl.message/AdnlMessageReinit // org.ton.api.adnl.message/AdnlMessageReinit.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.adnl.message/AdnlMessageReinit) // org.ton.api.adnl.message/AdnlMessageReinit.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.adnl.message.AdnlMessageReinit){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.adnl.message/AdnlMessageReinit> // org.ton.api.adnl.message/AdnlMessageReinit.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.adnl/AdnlAddressList : org.ton.tl/TlObject<org.ton.api.adnl/AdnlAddressList> { // org.ton.api.adnl/AdnlAddressList|null[0]
    constructor <init>(kotlin.collections/List<org.ton.api.adnl/AdnlAddress> = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...) // org.ton.api.adnl/AdnlAddressList.<init>|<init>(kotlin.collections.List<org.ton.api.adnl.AdnlAddress>;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]

    final val addrs // org.ton.api.adnl/AdnlAddressList.addrs|{}addrs[0]
        final fun <get-addrs>(): kotlin.collections/List<org.ton.api.adnl/AdnlAddress> // org.ton.api.adnl/AdnlAddressList.addrs.<get-addrs>|<get-addrs>(){}[0]
    final val expireAt // org.ton.api.adnl/AdnlAddressList.expireAt|{}expireAt[0]
        final fun <get-expireAt>(): kotlin/Int // org.ton.api.adnl/AdnlAddressList.expireAt.<get-expireAt>|<get-expireAt>(){}[0]
    final val priority // org.ton.api.adnl/AdnlAddressList.priority|{}priority[0]
        final fun <get-priority>(): kotlin/Int // org.ton.api.adnl/AdnlAddressList.priority.<get-priority>|<get-priority>(){}[0]
    final val reinitDate // org.ton.api.adnl/AdnlAddressList.reinitDate|{}reinitDate[0]
        final fun <get-reinitDate>(): kotlin/Int // org.ton.api.adnl/AdnlAddressList.reinitDate.<get-reinitDate>|<get-reinitDate>(){}[0]
    final val version // org.ton.api.adnl/AdnlAddressList.version|{}version[0]
        final fun <get-version>(): kotlin/Int // org.ton.api.adnl/AdnlAddressList.version.<get-version>|<get-version>(){}[0]

    final fun component1(): kotlin.collections/List<org.ton.api.adnl/AdnlAddress> // org.ton.api.adnl/AdnlAddressList.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.api.adnl/AdnlAddressList.component2|component2(){}[0]
    final fun component3(): kotlin/Int // org.ton.api.adnl/AdnlAddressList.component3|component3(){}[0]
    final fun component4(): kotlin/Int // org.ton.api.adnl/AdnlAddressList.component4|component4(){}[0]
    final fun component5(): kotlin/Int // org.ton.api.adnl/AdnlAddressList.component5|component5(){}[0]
    final fun copy(kotlin.collections/List<org.ton.api.adnl/AdnlAddress> = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): org.ton.api.adnl/AdnlAddressList // org.ton.api.adnl/AdnlAddressList.copy|copy(kotlin.collections.List<org.ton.api.adnl.AdnlAddress>;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.adnl/AdnlAddressList.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.adnl/AdnlAddressList.hashCode|hashCode(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.adnl/AdnlAddressList> // org.ton.api.adnl/AdnlAddressList.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.api.adnl/AdnlAddressList.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.adnl/AdnlAddressList> { // org.ton.api.adnl/AdnlAddressList.$serializer|null[0]
        final val descriptor // org.ton.api.adnl/AdnlAddressList.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.adnl/AdnlAddressList.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.adnl/AdnlAddressList.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.adnl/AdnlAddressList // org.ton.api.adnl/AdnlAddressList.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.adnl/AdnlAddressList) // org.ton.api.adnl/AdnlAddressList.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.adnl.AdnlAddressList){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.adnl/AdnlAddressList> { // org.ton.api.adnl/AdnlAddressList.Companion|null[0]
        final val $childSerializers // org.ton.api.adnl/AdnlAddressList.Companion.$childSerializers|{}$childSerializers[0]

        final fun decode(org.ton.tl/TlReader): org.ton.api.adnl/AdnlAddressList // org.ton.api.adnl/AdnlAddressList.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.adnl/AdnlAddressList) // org.ton.api.adnl/AdnlAddressList.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.adnl.AdnlAddressList){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.adnl/AdnlAddressList> // org.ton.api.adnl/AdnlAddressList.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.adnl/AdnlAddressTunnel : org.ton.api.adnl/AdnlAddress { // org.ton.api.adnl/AdnlAddressTunnel|null[0]
    constructor <init>(kotlinx.io.bytestring/ByteString, org.ton.kotlin.crypto/PublicKey) // org.ton.api.adnl/AdnlAddressTunnel.<init>|<init>(kotlinx.io.bytestring.ByteString;org.ton.kotlin.crypto.PublicKey){}[0]

    final val pubKey // org.ton.api.adnl/AdnlAddressTunnel.pubKey|{}pubKey[0]
        final fun <get-pubKey>(): org.ton.kotlin.crypto/PublicKey // org.ton.api.adnl/AdnlAddressTunnel.pubKey.<get-pubKey>|<get-pubKey>(){}[0]
    final val to // org.ton.api.adnl/AdnlAddressTunnel.to|{}to[0]
        final fun <get-to>(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl/AdnlAddressTunnel.to.<get-to>|<get-to>(){}[0]

    final fun component1(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl/AdnlAddressTunnel.component1|component1(){}[0]
    final fun component2(): org.ton.kotlin.crypto/PublicKey // org.ton.api.adnl/AdnlAddressTunnel.component2|component2(){}[0]
    final fun copy(kotlinx.io.bytestring/ByteString = ..., org.ton.kotlin.crypto/PublicKey = ...): org.ton.api.adnl/AdnlAddressTunnel // org.ton.api.adnl/AdnlAddressTunnel.copy|copy(kotlinx.io.bytestring.ByteString;org.ton.kotlin.crypto.PublicKey){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.adnl/AdnlAddressTunnel.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.adnl/AdnlAddressTunnel.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.adnl/AdnlAddressTunnel.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.adnl/AdnlAddressTunnel> { // org.ton.api.adnl/AdnlAddressTunnel.$serializer|null[0]
        final val descriptor // org.ton.api.adnl/AdnlAddressTunnel.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.adnl/AdnlAddressTunnel.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.adnl/AdnlAddressTunnel.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.adnl/AdnlAddressTunnel // org.ton.api.adnl/AdnlAddressTunnel.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.adnl/AdnlAddressTunnel) // org.ton.api.adnl/AdnlAddressTunnel.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.adnl.AdnlAddressTunnel){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.adnl/AdnlAddressTunnel> { // org.ton.api.adnl/AdnlAddressTunnel.Companion|null[0]
        final val $childSerializers // org.ton.api.adnl/AdnlAddressTunnel.Companion.$childSerializers|{}$childSerializers[0]

        final fun decode(org.ton.tl/TlReader): org.ton.api.adnl/AdnlAddressTunnel // org.ton.api.adnl/AdnlAddressTunnel.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.adnl/AdnlAddressTunnel) // org.ton.api.adnl/AdnlAddressTunnel.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.adnl.AdnlAddressTunnel){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.adnl/AdnlAddressTunnel> // org.ton.api.adnl/AdnlAddressTunnel.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.adnl/AdnlAddressUdp : org.ton.api.adnl/AdnlAddress, org.ton.api.adnl/AdnlIp { // org.ton.api.adnl/AdnlAddressUdp|null[0]
    constructor <init>(kotlin/Int, kotlin/Int) // org.ton.api.adnl/AdnlAddressUdp.<init>|<init>(kotlin.Int;kotlin.Int){}[0]

    final val ip // org.ton.api.adnl/AdnlAddressUdp.ip|{}ip[0]
        final fun <get-ip>(): kotlin/Int // org.ton.api.adnl/AdnlAddressUdp.ip.<get-ip>|<get-ip>(){}[0]
    final val port // org.ton.api.adnl/AdnlAddressUdp.port|{}port[0]
        final fun <get-port>(): kotlin/Int // org.ton.api.adnl/AdnlAddressUdp.port.<get-port>|<get-port>(){}[0]

    final fun component1(): kotlin/Int // org.ton.api.adnl/AdnlAddressUdp.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.api.adnl/AdnlAddressUdp.component2|component2(){}[0]
    final fun copy(kotlin/Int = ..., kotlin/Int = ...): org.ton.api.adnl/AdnlAddressUdp // org.ton.api.adnl/AdnlAddressUdp.copy|copy(kotlin.Int;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.adnl/AdnlAddressUdp.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.adnl/AdnlAddressUdp.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.adnl/AdnlAddressUdp.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.adnl/AdnlAddressUdp> { // org.ton.api.adnl/AdnlAddressUdp.$serializer|null[0]
        final val descriptor // org.ton.api.adnl/AdnlAddressUdp.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.adnl/AdnlAddressUdp.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.adnl/AdnlAddressUdp.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.adnl/AdnlAddressUdp // org.ton.api.adnl/AdnlAddressUdp.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.adnl/AdnlAddressUdp) // org.ton.api.adnl/AdnlAddressUdp.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.adnl.AdnlAddressUdp){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.adnl/AdnlAddressUdp> { // org.ton.api.adnl/AdnlAddressUdp.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.adnl/AdnlAddressUdp // org.ton.api.adnl/AdnlAddressUdp.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.adnl/AdnlAddressUdp) // org.ton.api.adnl/AdnlAddressUdp.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.adnl.AdnlAddressUdp){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.adnl/AdnlAddressUdp> // org.ton.api.adnl/AdnlAddressUdp.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.adnl/AdnlAddressUdp6 : org.ton.api.adnl/AdnlAddress, org.ton.api.adnl/AdnlIp6 { // org.ton.api.adnl/AdnlAddressUdp6|null[0]
    constructor <init>(kotlinx.io.bytestring/ByteString, kotlin/Int) // org.ton.api.adnl/AdnlAddressUdp6.<init>|<init>(kotlinx.io.bytestring.ByteString;kotlin.Int){}[0]

    final val ip // org.ton.api.adnl/AdnlAddressUdp6.ip|{}ip[0]
        final fun <get-ip>(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl/AdnlAddressUdp6.ip.<get-ip>|<get-ip>(){}[0]
    final val port // org.ton.api.adnl/AdnlAddressUdp6.port|{}port[0]
        final fun <get-port>(): kotlin/Int // org.ton.api.adnl/AdnlAddressUdp6.port.<get-port>|<get-port>(){}[0]

    final fun component1(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl/AdnlAddressUdp6.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.api.adnl/AdnlAddressUdp6.component2|component2(){}[0]
    final fun copy(kotlinx.io.bytestring/ByteString = ..., kotlin/Int = ...): org.ton.api.adnl/AdnlAddressUdp6 // org.ton.api.adnl/AdnlAddressUdp6.copy|copy(kotlinx.io.bytestring.ByteString;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.adnl/AdnlAddressUdp6.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.adnl/AdnlAddressUdp6.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.adnl/AdnlAddressUdp6.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.adnl/AdnlAddressUdp6> { // org.ton.api.adnl/AdnlAddressUdp6.$serializer|null[0]
        final val descriptor // org.ton.api.adnl/AdnlAddressUdp6.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.adnl/AdnlAddressUdp6.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.adnl/AdnlAddressUdp6.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.adnl/AdnlAddressUdp6 // org.ton.api.adnl/AdnlAddressUdp6.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.adnl/AdnlAddressUdp6) // org.ton.api.adnl/AdnlAddressUdp6.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.adnl.AdnlAddressUdp6){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.adnl/AdnlAddressUdp6> { // org.ton.api.adnl/AdnlAddressUdp6.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.adnl/AdnlAddressUdp6 // org.ton.api.adnl/AdnlAddressUdp6.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.adnl/AdnlAddressUdp6) // org.ton.api.adnl/AdnlAddressUdp6.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.adnl.AdnlAddressUdp6){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.adnl/AdnlAddressUdp6> // org.ton.api.adnl/AdnlAddressUdp6.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.adnl/AdnlIdShort : kotlin/Comparable<org.ton.api.adnl/AdnlIdShort>, org.ton.tl/TlObject<org.ton.api.adnl/AdnlIdShort> { // org.ton.api.adnl/AdnlIdShort|null[0]
    constructor <init>(kotlinx.io.bytestring/ByteString) // org.ton.api.adnl/AdnlIdShort.<init>|<init>(kotlinx.io.bytestring.ByteString){}[0]

    final val id // org.ton.api.adnl/AdnlIdShort.id|{}id[0]
        final fun <get-id>(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl/AdnlIdShort.id.<get-id>|<get-id>(){}[0]

    final fun compareTo(org.ton.api.adnl/AdnlIdShort): kotlin/Int // org.ton.api.adnl/AdnlIdShort.compareTo|compareTo(org.ton.api.adnl.AdnlIdShort){}[0]
    final fun component1(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl/AdnlIdShort.component1|component1(){}[0]
    final fun copy(kotlinx.io.bytestring/ByteString = ...): org.ton.api.adnl/AdnlIdShort // org.ton.api.adnl/AdnlIdShort.copy|copy(kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.adnl/AdnlIdShort.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.adnl/AdnlIdShort.hashCode|hashCode(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.adnl/AdnlIdShort> // org.ton.api.adnl/AdnlIdShort.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.api.adnl/AdnlIdShort.toString|toString(){}[0]
    final fun verify(org.ton.api.overlay/OverlayNode): kotlin/Boolean // org.ton.api.adnl/AdnlIdShort.verify|verify(org.ton.api.overlay.OverlayNode){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.adnl/AdnlIdShort> { // org.ton.api.adnl/AdnlIdShort.$serializer|null[0]
        final val descriptor // org.ton.api.adnl/AdnlIdShort.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.adnl/AdnlIdShort.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.adnl/AdnlIdShort.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.adnl/AdnlIdShort // org.ton.api.adnl/AdnlIdShort.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.adnl/AdnlIdShort) // org.ton.api.adnl/AdnlIdShort.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.adnl.AdnlIdShort){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.api.adnl/AdnlIdShort> { // org.ton.api.adnl/AdnlIdShort.Companion|null[0]
        final const val SIZE_BYTES // org.ton.api.adnl/AdnlIdShort.Companion.SIZE_BYTES|{}SIZE_BYTES[0]
            final fun <get-SIZE_BYTES>(): kotlin/Int // org.ton.api.adnl/AdnlIdShort.Companion.SIZE_BYTES.<get-SIZE_BYTES>|<get-SIZE_BYTES>(){}[0]

        final fun decode(kotlin/ByteArray): org.ton.api.adnl/AdnlIdShort // org.ton.api.adnl/AdnlIdShort.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.api.adnl/AdnlIdShort // org.ton.api.adnl/AdnlIdShort.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.api.adnl/AdnlIdShort // org.ton.api.adnl/AdnlIdShort.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.adnl/AdnlIdShort // org.ton.api.adnl/AdnlIdShort.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.api.adnl/AdnlIdShort // org.ton.api.adnl/AdnlIdShort.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.api.adnl/AdnlIdShort // org.ton.api.adnl/AdnlIdShort.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.api.adnl/AdnlIdShort // org.ton.api.adnl/AdnlIdShort.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.api.adnl/AdnlIdShort // org.ton.api.adnl/AdnlIdShort.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.api.adnl/AdnlIdShort) // org.ton.api.adnl/AdnlIdShort.Companion.encode|encode(kotlinx.io.Sink;org.ton.api.adnl.AdnlIdShort){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.adnl/AdnlIdShort) // org.ton.api.adnl/AdnlIdShort.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.adnl.AdnlIdShort){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.api.adnl/AdnlIdShort) // org.ton.api.adnl/AdnlIdShort.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.api.adnl.AdnlIdShort){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.api.adnl/AdnlIdShort) // org.ton.api.adnl/AdnlIdShort.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.api.adnl.AdnlIdShort){}[0]
        final fun encodeToByteArray(org.ton.api.adnl/AdnlIdShort, kotlin/Boolean): kotlin/ByteArray // org.ton.api.adnl/AdnlIdShort.Companion.encodeToByteArray|encodeToByteArray(org.ton.api.adnl.AdnlIdShort;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.api.adnl/AdnlIdShort, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.api.adnl/AdnlIdShort.Companion.encodeToByteString|encodeToByteString(org.ton.api.adnl.AdnlIdShort;kotlin.Boolean){}[0]
        final fun hash(org.ton.api.adnl/AdnlIdShort): kotlin/ByteArray // org.ton.api.adnl/AdnlIdShort.Companion.hash|hash(org.ton.api.adnl.AdnlIdShort){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.adnl/AdnlIdShort> // org.ton.api.adnl/AdnlIdShort.Companion.serializer|serializer(){}[0]
        final fun tlConstructor(): org.ton.tl/TlConstructor<org.ton.api.adnl/AdnlIdShort> // org.ton.api.adnl/AdnlIdShort.Companion.tlConstructor|tlConstructor(){}[0]
    }
}

final class org.ton.api.adnl/AdnlNode { // org.ton.api.adnl/AdnlNode|null[0]
    constructor <init>(org.ton.kotlin.crypto/PublicKey, org.ton.api.adnl/AdnlAddressList) // org.ton.api.adnl/AdnlNode.<init>|<init>(org.ton.kotlin.crypto.PublicKey;org.ton.api.adnl.AdnlAddressList){}[0]

    final val addrList // org.ton.api.adnl/AdnlNode.addrList|{}addrList[0]
        final fun <get-addrList>(): org.ton.api.adnl/AdnlAddressList // org.ton.api.adnl/AdnlNode.addrList.<get-addrList>|<get-addrList>(){}[0]
    final val id // org.ton.api.adnl/AdnlNode.id|{}id[0]
        final fun <get-id>(): org.ton.kotlin.crypto/PublicKey // org.ton.api.adnl/AdnlNode.id.<get-id>|<get-id>(){}[0]

    final fun component1(): org.ton.kotlin.crypto/PublicKey // org.ton.api.adnl/AdnlNode.component1|component1(){}[0]
    final fun component2(): org.ton.api.adnl/AdnlAddressList // org.ton.api.adnl/AdnlNode.component2|component2(){}[0]
    final fun copy(org.ton.kotlin.crypto/PublicKey = ..., org.ton.api.adnl/AdnlAddressList = ...): org.ton.api.adnl/AdnlNode // org.ton.api.adnl/AdnlNode.copy|copy(org.ton.kotlin.crypto.PublicKey;org.ton.api.adnl.AdnlAddressList){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.adnl/AdnlNode.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.adnl/AdnlNode.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.adnl/AdnlNode.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.adnl/AdnlNode> { // org.ton.api.adnl/AdnlNode.$serializer|null[0]
        final val descriptor // org.ton.api.adnl/AdnlNode.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.adnl/AdnlNode.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.adnl/AdnlNode.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.adnl/AdnlNode // org.ton.api.adnl/AdnlNode.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.adnl/AdnlNode) // org.ton.api.adnl/AdnlNode.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.adnl.AdnlNode){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.adnl/AdnlNode> { // org.ton.api.adnl/AdnlNode.Companion|null[0]
        final val $childSerializers // org.ton.api.adnl/AdnlNode.Companion.$childSerializers|{}$childSerializers[0]

        final fun decode(org.ton.tl/TlReader): org.ton.api.adnl/AdnlNode // org.ton.api.adnl/AdnlNode.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.adnl/AdnlNode) // org.ton.api.adnl/AdnlNode.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.adnl.AdnlNode){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.adnl/AdnlNode> // org.ton.api.adnl/AdnlNode.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.adnl/AdnlNodes { // org.ton.api.adnl/AdnlNodes|null[0]
    constructor <init>(kotlin.collections/List<org.ton.api.adnl/AdnlNode> = ...) // org.ton.api.adnl/AdnlNodes.<init>|<init>(kotlin.collections.List<org.ton.api.adnl.AdnlNode>){}[0]

    final val nodes // org.ton.api.adnl/AdnlNodes.nodes|{}nodes[0]
        final fun <get-nodes>(): kotlin.collections/List<org.ton.api.adnl/AdnlNode> // org.ton.api.adnl/AdnlNodes.nodes.<get-nodes>|<get-nodes>(){}[0]

    final fun component1(): kotlin.collections/List<org.ton.api.adnl/AdnlNode> // org.ton.api.adnl/AdnlNodes.component1|component1(){}[0]
    final fun copy(kotlin.collections/List<org.ton.api.adnl/AdnlNode> = ...): org.ton.api.adnl/AdnlNodes // org.ton.api.adnl/AdnlNodes.copy|copy(kotlin.collections.List<org.ton.api.adnl.AdnlNode>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.adnl/AdnlNodes.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.adnl/AdnlNodes.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.adnl/AdnlNodes.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.adnl/AdnlNodes> { // org.ton.api.adnl/AdnlNodes.$serializer|null[0]
        final val descriptor // org.ton.api.adnl/AdnlNodes.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.adnl/AdnlNodes.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.adnl/AdnlNodes.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.adnl/AdnlNodes // org.ton.api.adnl/AdnlNodes.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.adnl/AdnlNodes) // org.ton.api.adnl/AdnlNodes.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.adnl.AdnlNodes){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.api.adnl/AdnlNodes> { // org.ton.api.adnl/AdnlNodes.Companion|null[0]
        final val $childSerializers // org.ton.api.adnl/AdnlNodes.Companion.$childSerializers|{}$childSerializers[0]

        final fun decode(kotlin/ByteArray): org.ton.api.adnl/AdnlNodes // org.ton.api.adnl/AdnlNodes.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.api.adnl/AdnlNodes // org.ton.api.adnl/AdnlNodes.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.api.adnl/AdnlNodes // org.ton.api.adnl/AdnlNodes.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.adnl/AdnlNodes // org.ton.api.adnl/AdnlNodes.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.api.adnl/AdnlNodes // org.ton.api.adnl/AdnlNodes.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.api.adnl/AdnlNodes // org.ton.api.adnl/AdnlNodes.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.api.adnl/AdnlNodes // org.ton.api.adnl/AdnlNodes.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.api.adnl/AdnlNodes // org.ton.api.adnl/AdnlNodes.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.api.adnl/AdnlNodes) // org.ton.api.adnl/AdnlNodes.Companion.encode|encode(kotlinx.io.Sink;org.ton.api.adnl.AdnlNodes){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.adnl/AdnlNodes) // org.ton.api.adnl/AdnlNodes.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.adnl.AdnlNodes){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.api.adnl/AdnlNodes) // org.ton.api.adnl/AdnlNodes.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.api.adnl.AdnlNodes){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.api.adnl/AdnlNodes) // org.ton.api.adnl/AdnlNodes.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.api.adnl.AdnlNodes){}[0]
        final fun encodeToByteArray(org.ton.api.adnl/AdnlNodes, kotlin/Boolean): kotlin/ByteArray // org.ton.api.adnl/AdnlNodes.Companion.encodeToByteArray|encodeToByteArray(org.ton.api.adnl.AdnlNodes;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.api.adnl/AdnlNodes, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.api.adnl/AdnlNodes.Companion.encodeToByteString|encodeToByteString(org.ton.api.adnl.AdnlNodes;kotlin.Boolean){}[0]
        final fun hash(org.ton.api.adnl/AdnlNodes): kotlin/ByteArray // org.ton.api.adnl/AdnlNodes.Companion.hash|hash(org.ton.api.adnl.AdnlNodes){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.adnl/AdnlNodes> // org.ton.api.adnl/AdnlNodes.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.adnl/AdnlPacketContents : org.ton.api/SignedTlObject<org.ton.api.adnl/AdnlPacketContents> { // org.ton.api.adnl/AdnlPacketContents|null[0]
    constructor <init>(kotlinx.io.bytestring/ByteString = ..., org.ton.kotlin.crypto/PublicKey? = ..., org.ton.api.adnl/AdnlIdShort? = ..., org.ton.api.adnl.message/AdnlMessage? = ..., kotlin.collections/List<org.ton.api.adnl.message/AdnlMessage>? = ..., org.ton.api.adnl/AdnlAddressList? = ..., org.ton.api.adnl/AdnlAddressList? = ..., kotlin/Long? = ..., kotlin/Long? = ..., kotlin/Int? = ..., kotlin/Int? = ..., kotlin/Int? = ..., kotlin/Int? = ..., kotlinx.io.bytestring/ByteString? = ..., kotlinx.io.bytestring/ByteString = ...) // org.ton.api.adnl/AdnlPacketContents.<init>|<init>(kotlinx.io.bytestring.ByteString;org.ton.kotlin.crypto.PublicKey?;org.ton.api.adnl.AdnlIdShort?;org.ton.api.adnl.message.AdnlMessage?;kotlin.collections.List<org.ton.api.adnl.message.AdnlMessage>?;org.ton.api.adnl.AdnlAddressList?;org.ton.api.adnl.AdnlAddressList?;kotlin.Long?;kotlin.Long?;kotlin.Int?;kotlin.Int?;kotlin.Int?;kotlin.Int?;kotlinx.io.bytestring.ByteString?;kotlinx.io.bytestring.ByteString){}[0]
    constructor <init>(kotlinx.io.bytestring/ByteString, kotlin/Int, org.ton.kotlin.crypto/PublicKey?, org.ton.api.adnl/AdnlIdShort?, org.ton.api.adnl.message/AdnlMessage?, kotlin.collections/List<org.ton.api.adnl.message/AdnlMessage>?, org.ton.api.adnl/AdnlAddressList?, org.ton.api.adnl/AdnlAddressList?, kotlin/Long?, kotlin/Long?, kotlin/Int?, kotlin/Int?, kotlin/Int?, kotlin/Int?, kotlinx.io.bytestring/ByteString?, kotlinx.io.bytestring/ByteString) // org.ton.api.adnl/AdnlPacketContents.<init>|<init>(kotlinx.io.bytestring.ByteString;kotlin.Int;org.ton.kotlin.crypto.PublicKey?;org.ton.api.adnl.AdnlIdShort?;org.ton.api.adnl.message.AdnlMessage?;kotlin.collections.List<org.ton.api.adnl.message.AdnlMessage>?;org.ton.api.adnl.AdnlAddressList?;org.ton.api.adnl.AdnlAddressList?;kotlin.Long?;kotlin.Long?;kotlin.Int?;kotlin.Int?;kotlin.Int?;kotlin.Int?;kotlinx.io.bytestring.ByteString?;kotlinx.io.bytestring.ByteString){}[0]

    final val address // org.ton.api.adnl/AdnlPacketContents.address|{}address[0]
        final fun <get-address>(): org.ton.api.adnl/AdnlAddressList? // org.ton.api.adnl/AdnlPacketContents.address.<get-address>|<get-address>(){}[0]
    final val confirmSeqno // org.ton.api.adnl/AdnlPacketContents.confirmSeqno|{}confirmSeqno[0]
        final fun <get-confirmSeqno>(): kotlin/Long? // org.ton.api.adnl/AdnlPacketContents.confirmSeqno.<get-confirmSeqno>|<get-confirmSeqno>(){}[0]
    final val dstReinitDate // org.ton.api.adnl/AdnlPacketContents.dstReinitDate|{}dstReinitDate[0]
        final fun <get-dstReinitDate>(): kotlin/Int? // org.ton.api.adnl/AdnlPacketContents.dstReinitDate.<get-dstReinitDate>|<get-dstReinitDate>(){}[0]
    final val flags // org.ton.api.adnl/AdnlPacketContents.flags|{}flags[0]
        final fun <get-flags>(): kotlin/Int // org.ton.api.adnl/AdnlPacketContents.flags.<get-flags>|<get-flags>(){}[0]
    final val from // org.ton.api.adnl/AdnlPacketContents.from|{}from[0]
        final fun <get-from>(): org.ton.kotlin.crypto/PublicKey? // org.ton.api.adnl/AdnlPacketContents.from.<get-from>|<get-from>(){}[0]
    final val fromShort // org.ton.api.adnl/AdnlPacketContents.fromShort|{}fromShort[0]
        final fun <get-fromShort>(): org.ton.api.adnl/AdnlIdShort? // org.ton.api.adnl/AdnlPacketContents.fromShort.<get-fromShort>|<get-fromShort>(){}[0]
    final val message // org.ton.api.adnl/AdnlPacketContents.message|{}message[0]
        final fun <get-message>(): org.ton.api.adnl.message/AdnlMessage? // org.ton.api.adnl/AdnlPacketContents.message.<get-message>|<get-message>(){}[0]
    final val messages // org.ton.api.adnl/AdnlPacketContents.messages|{}messages[0]
        final fun <get-messages>(): kotlin.collections/List<org.ton.api.adnl.message/AdnlMessage>? // org.ton.api.adnl/AdnlPacketContents.messages.<get-messages>|<get-messages>(){}[0]
    final val priorityAddress // org.ton.api.adnl/AdnlPacketContents.priorityAddress|{}priorityAddress[0]
        final fun <get-priorityAddress>(): org.ton.api.adnl/AdnlAddressList? // org.ton.api.adnl/AdnlPacketContents.priorityAddress.<get-priorityAddress>|<get-priorityAddress>(){}[0]
    final val rand1 // org.ton.api.adnl/AdnlPacketContents.rand1|{}rand1[0]
        final fun <get-rand1>(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl/AdnlPacketContents.rand1.<get-rand1>|<get-rand1>(){}[0]
    final val rand2 // org.ton.api.adnl/AdnlPacketContents.rand2|{}rand2[0]
        final fun <get-rand2>(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl/AdnlPacketContents.rand2.<get-rand2>|<get-rand2>(){}[0]
    final val recvAddrListVersion // org.ton.api.adnl/AdnlPacketContents.recvAddrListVersion|{}recvAddrListVersion[0]
        final fun <get-recvAddrListVersion>(): kotlin/Int? // org.ton.api.adnl/AdnlPacketContents.recvAddrListVersion.<get-recvAddrListVersion>|<get-recvAddrListVersion>(){}[0]
    final val recvPriorityAddrListVersion // org.ton.api.adnl/AdnlPacketContents.recvPriorityAddrListVersion|{}recvPriorityAddrListVersion[0]
        final fun <get-recvPriorityAddrListVersion>(): kotlin/Int? // org.ton.api.adnl/AdnlPacketContents.recvPriorityAddrListVersion.<get-recvPriorityAddrListVersion>|<get-recvPriorityAddrListVersion>(){}[0]
    final val reinitDate // org.ton.api.adnl/AdnlPacketContents.reinitDate|{}reinitDate[0]
        final fun <get-reinitDate>(): kotlin/Int? // org.ton.api.adnl/AdnlPacketContents.reinitDate.<get-reinitDate>|<get-reinitDate>(){}[0]
    final val seqno // org.ton.api.adnl/AdnlPacketContents.seqno|{}seqno[0]
        final fun <get-seqno>(): kotlin/Long? // org.ton.api.adnl/AdnlPacketContents.seqno.<get-seqno>|<get-seqno>(){}[0]
    final val signature // org.ton.api.adnl/AdnlPacketContents.signature|{}signature[0]
        final fun <get-signature>(): kotlinx.io.bytestring/ByteString? // org.ton.api.adnl/AdnlPacketContents.signature.<get-signature>|<get-signature>(){}[0]

    final fun collectMessages(): kotlin.collections/List<org.ton.api.adnl.message/AdnlMessage> // org.ton.api.adnl/AdnlPacketContents.collectMessages|collectMessages(){}[0]
    final fun component1(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl/AdnlPacketContents.component1|component1(){}[0]
    final fun component10(): kotlin/Long? // org.ton.api.adnl/AdnlPacketContents.component10|component10(){}[0]
    final fun component11(): kotlin/Int? // org.ton.api.adnl/AdnlPacketContents.component11|component11(){}[0]
    final fun component12(): kotlin/Int? // org.ton.api.adnl/AdnlPacketContents.component12|component12(){}[0]
    final fun component13(): kotlin/Int? // org.ton.api.adnl/AdnlPacketContents.component13|component13(){}[0]
    final fun component14(): kotlin/Int? // org.ton.api.adnl/AdnlPacketContents.component14|component14(){}[0]
    final fun component15(): kotlinx.io.bytestring/ByteString? // org.ton.api.adnl/AdnlPacketContents.component15|component15(){}[0]
    final fun component16(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl/AdnlPacketContents.component16|component16(){}[0]
    final fun component2(): kotlin/Int // org.ton.api.adnl/AdnlPacketContents.component2|component2(){}[0]
    final fun component3(): org.ton.kotlin.crypto/PublicKey? // org.ton.api.adnl/AdnlPacketContents.component3|component3(){}[0]
    final fun component4(): org.ton.api.adnl/AdnlIdShort? // org.ton.api.adnl/AdnlPacketContents.component4|component4(){}[0]
    final fun component5(): org.ton.api.adnl.message/AdnlMessage? // org.ton.api.adnl/AdnlPacketContents.component5|component5(){}[0]
    final fun component6(): kotlin.collections/List<org.ton.api.adnl.message/AdnlMessage>? // org.ton.api.adnl/AdnlPacketContents.component6|component6(){}[0]
    final fun component7(): org.ton.api.adnl/AdnlAddressList? // org.ton.api.adnl/AdnlPacketContents.component7|component7(){}[0]
    final fun component8(): org.ton.api.adnl/AdnlAddressList? // org.ton.api.adnl/AdnlPacketContents.component8|component8(){}[0]
    final fun component9(): kotlin/Long? // org.ton.api.adnl/AdnlPacketContents.component9|component9(){}[0]
    final fun copy(kotlinx.io.bytestring/ByteString = ..., kotlin/Int = ..., org.ton.kotlin.crypto/PublicKey? = ..., org.ton.api.adnl/AdnlIdShort? = ..., org.ton.api.adnl.message/AdnlMessage? = ..., kotlin.collections/List<org.ton.api.adnl.message/AdnlMessage>? = ..., org.ton.api.adnl/AdnlAddressList? = ..., org.ton.api.adnl/AdnlAddressList? = ..., kotlin/Long? = ..., kotlin/Long? = ..., kotlin/Int? = ..., kotlin/Int? = ..., kotlin/Int? = ..., kotlin/Int? = ..., kotlinx.io.bytestring/ByteString? = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.api.adnl/AdnlPacketContents // org.ton.api.adnl/AdnlPacketContents.copy|copy(kotlinx.io.bytestring.ByteString;kotlin.Int;org.ton.kotlin.crypto.PublicKey?;org.ton.api.adnl.AdnlIdShort?;org.ton.api.adnl.message.AdnlMessage?;kotlin.collections.List<org.ton.api.adnl.message.AdnlMessage>?;org.ton.api.adnl.AdnlAddressList?;org.ton.api.adnl.AdnlAddressList?;kotlin.Long?;kotlin.Long?;kotlin.Int?;kotlin.Int?;kotlin.Int?;kotlin.Int?;kotlinx.io.bytestring.ByteString?;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.adnl/AdnlPacketContents.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.adnl/AdnlPacketContents.hashCode|hashCode(){}[0]
    final fun signed(org.ton.kotlin.crypto/Signer): org.ton.api.adnl/AdnlPacketContents // org.ton.api.adnl/AdnlPacketContents.signed|signed(org.ton.kotlin.crypto.Signer){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.adnl/AdnlPacketContents> // org.ton.api.adnl/AdnlPacketContents.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.api.adnl/AdnlPacketContents.toString|toString(){}[0]
    final fun verify(org.ton.kotlin.crypto/SignatureVerifier): kotlin/Boolean // org.ton.api.adnl/AdnlPacketContents.verify|verify(org.ton.kotlin.crypto.SignatureVerifier){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.adnl/AdnlPacketContents> { // org.ton.api.adnl/AdnlPacketContents.$serializer|null[0]
        final val descriptor // org.ton.api.adnl/AdnlPacketContents.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.adnl/AdnlPacketContents.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.adnl/AdnlPacketContents.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.adnl/AdnlPacketContents // org.ton.api.adnl/AdnlPacketContents.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.adnl/AdnlPacketContents) // org.ton.api.adnl/AdnlPacketContents.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.adnl.AdnlPacketContents){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.api.adnl/AdnlPacketContents> { // org.ton.api.adnl/AdnlPacketContents.Companion|null[0]
        final val $childSerializers // org.ton.api.adnl/AdnlPacketContents.Companion.$childSerializers|{}$childSerializers[0]

        final fun decode(kotlin/ByteArray): org.ton.api.adnl/AdnlPacketContents // org.ton.api.adnl/AdnlPacketContents.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.api.adnl/AdnlPacketContents // org.ton.api.adnl/AdnlPacketContents.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.api.adnl/AdnlPacketContents // org.ton.api.adnl/AdnlPacketContents.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.adnl/AdnlPacketContents // org.ton.api.adnl/AdnlPacketContents.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.api.adnl/AdnlPacketContents // org.ton.api.adnl/AdnlPacketContents.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.api.adnl/AdnlPacketContents // org.ton.api.adnl/AdnlPacketContents.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.api.adnl/AdnlPacketContents // org.ton.api.adnl/AdnlPacketContents.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.api.adnl/AdnlPacketContents // org.ton.api.adnl/AdnlPacketContents.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.api.adnl/AdnlPacketContents) // org.ton.api.adnl/AdnlPacketContents.Companion.encode|encode(kotlinx.io.Sink;org.ton.api.adnl.AdnlPacketContents){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.adnl/AdnlPacketContents) // org.ton.api.adnl/AdnlPacketContents.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.adnl.AdnlPacketContents){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.api.adnl/AdnlPacketContents) // org.ton.api.adnl/AdnlPacketContents.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.api.adnl.AdnlPacketContents){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.api.adnl/AdnlPacketContents) // org.ton.api.adnl/AdnlPacketContents.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.api.adnl.AdnlPacketContents){}[0]
        final fun encodeToByteArray(org.ton.api.adnl/AdnlPacketContents, kotlin/Boolean): kotlin/ByteArray // org.ton.api.adnl/AdnlPacketContents.Companion.encodeToByteArray|encodeToByteArray(org.ton.api.adnl.AdnlPacketContents;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.api.adnl/AdnlPacketContents, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.api.adnl/AdnlPacketContents.Companion.encodeToByteString|encodeToByteString(org.ton.api.adnl.AdnlPacketContents;kotlin.Boolean){}[0]
        final fun flags(kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ...): kotlin/Int // org.ton.api.adnl/AdnlPacketContents.Companion.flags|flags(kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean){}[0]
        final fun hash(org.ton.api.adnl/AdnlPacketContents): kotlin/ByteArray // org.ton.api.adnl/AdnlPacketContents.Companion.hash|hash(org.ton.api.adnl.AdnlPacketContents){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.adnl/AdnlPacketContents> // org.ton.api.adnl/AdnlPacketContents.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.adnl/AdnlPing { // org.ton.api.adnl/AdnlPing|null[0]
    constructor <init>(kotlin/Long) // org.ton.api.adnl/AdnlPing.<init>|<init>(kotlin.Long){}[0]

    final val value // org.ton.api.adnl/AdnlPing.value|{}value[0]
        final fun <get-value>(): kotlin/Long // org.ton.api.adnl/AdnlPing.value.<get-value>|<get-value>(){}[0]

    final fun component1(): kotlin/Long // org.ton.api.adnl/AdnlPing.component1|component1(){}[0]
    final fun copy(kotlin/Long = ...): org.ton.api.adnl/AdnlPing // org.ton.api.adnl/AdnlPing.copy|copy(kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.adnl/AdnlPing.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.adnl/AdnlPing.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.adnl/AdnlPing.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.adnl/AdnlPing> { // org.ton.api.adnl/AdnlPing.$serializer|null[0]
        final val descriptor // org.ton.api.adnl/AdnlPing.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.adnl/AdnlPing.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.adnl/AdnlPing.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.adnl/AdnlPing // org.ton.api.adnl/AdnlPing.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.adnl/AdnlPing) // org.ton.api.adnl/AdnlPing.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.adnl.AdnlPing){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.adnl/AdnlPing> { // org.ton.api.adnl/AdnlPing.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.adnl/AdnlPing // org.ton.api.adnl/AdnlPing.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.adnl/AdnlPing) // org.ton.api.adnl/AdnlPing.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.adnl.AdnlPing){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.adnl/AdnlPing> // org.ton.api.adnl/AdnlPing.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.adnl/AdnlPong { // org.ton.api.adnl/AdnlPong|null[0]
    constructor <init>(kotlin/Long) // org.ton.api.adnl/AdnlPong.<init>|<init>(kotlin.Long){}[0]

    final val value // org.ton.api.adnl/AdnlPong.value|{}value[0]
        final fun <get-value>(): kotlin/Long // org.ton.api.adnl/AdnlPong.value.<get-value>|<get-value>(){}[0]

    final fun component1(): kotlin/Long // org.ton.api.adnl/AdnlPong.component1|component1(){}[0]
    final fun copy(kotlin/Long = ...): org.ton.api.adnl/AdnlPong // org.ton.api.adnl/AdnlPong.copy|copy(kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.adnl/AdnlPong.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.adnl/AdnlPong.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.adnl/AdnlPong.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.adnl/AdnlPong> { // org.ton.api.adnl/AdnlPong.$serializer|null[0]
        final val descriptor // org.ton.api.adnl/AdnlPong.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.adnl/AdnlPong.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.adnl/AdnlPong.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.adnl/AdnlPong // org.ton.api.adnl/AdnlPong.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.adnl/AdnlPong) // org.ton.api.adnl/AdnlPong.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.adnl.AdnlPong){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.adnl/AdnlPong> { // org.ton.api.adnl/AdnlPong.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.adnl/AdnlPong // org.ton.api.adnl/AdnlPong.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.adnl/AdnlPong) // org.ton.api.adnl/AdnlPong.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.adnl.AdnlPong){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.adnl/AdnlPong> // org.ton.api.adnl/AdnlPong.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.adnl/AdnlProxyFast : org.ton.api.adnl/AdnlProxy { // org.ton.api.adnl/AdnlProxyFast|null[0]
    constructor <init>(kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString) // org.ton.api.adnl/AdnlProxyFast.<init>|<init>(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]

    final val id // org.ton.api.adnl/AdnlProxyFast.id|{}id[0]
        final fun <get-id>(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl/AdnlProxyFast.id.<get-id>|<get-id>(){}[0]
    final val sharedSecret // org.ton.api.adnl/AdnlProxyFast.sharedSecret|{}sharedSecret[0]
        final fun <get-sharedSecret>(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl/AdnlProxyFast.sharedSecret.<get-sharedSecret>|<get-sharedSecret>(){}[0]

    final fun component1(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl/AdnlProxyFast.component1|component1(){}[0]
    final fun component2(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl/AdnlProxyFast.component2|component2(){}[0]
    final fun copy(kotlinx.io.bytestring/ByteString = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.api.adnl/AdnlProxyFast // org.ton.api.adnl/AdnlProxyFast.copy|copy(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.adnl/AdnlProxyFast.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.adnl/AdnlProxyFast.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.adnl/AdnlProxyFast.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.adnl/AdnlProxyFast> { // org.ton.api.adnl/AdnlProxyFast.$serializer|null[0]
        final val descriptor // org.ton.api.adnl/AdnlProxyFast.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.adnl/AdnlProxyFast.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.adnl/AdnlProxyFast.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.adnl/AdnlProxyFast // org.ton.api.adnl/AdnlProxyFast.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.adnl/AdnlProxyFast) // org.ton.api.adnl/AdnlProxyFast.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.adnl.AdnlProxyFast){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.adnl/AdnlProxyFast> { // org.ton.api.adnl/AdnlProxyFast.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.adnl/AdnlProxyFast // org.ton.api.adnl/AdnlProxyFast.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.adnl/AdnlProxyFast) // org.ton.api.adnl/AdnlProxyFast.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.adnl.AdnlProxyFast){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.adnl/AdnlProxyFast> // org.ton.api.adnl/AdnlProxyFast.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.adnl/AdnlProxyNone : org.ton.api.adnl/AdnlProxy { // org.ton.api.adnl/AdnlProxyNone|null[0]
    constructor <init>(kotlinx.io.bytestring/ByteString) // org.ton.api.adnl/AdnlProxyNone.<init>|<init>(kotlinx.io.bytestring.ByteString){}[0]

    final val id // org.ton.api.adnl/AdnlProxyNone.id|{}id[0]
        final fun <get-id>(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl/AdnlProxyNone.id.<get-id>|<get-id>(){}[0]

    final fun component1(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl/AdnlProxyNone.component1|component1(){}[0]
    final fun copy(kotlinx.io.bytestring/ByteString = ...): org.ton.api.adnl/AdnlProxyNone // org.ton.api.adnl/AdnlProxyNone.copy|copy(kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.adnl/AdnlProxyNone.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.adnl/AdnlProxyNone.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.adnl/AdnlProxyNone.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.adnl/AdnlProxyNone> { // org.ton.api.adnl/AdnlProxyNone.$serializer|null[0]
        final val descriptor // org.ton.api.adnl/AdnlProxyNone.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.adnl/AdnlProxyNone.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.adnl/AdnlProxyNone.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.adnl/AdnlProxyNone // org.ton.api.adnl/AdnlProxyNone.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.adnl/AdnlProxyNone) // org.ton.api.adnl/AdnlProxyNone.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.adnl.AdnlProxyNone){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.adnl/AdnlProxyNone> { // org.ton.api.adnl/AdnlProxyNone.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.adnl/AdnlProxyNone // org.ton.api.adnl/AdnlProxyNone.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.adnl/AdnlProxyNone) // org.ton.api.adnl/AdnlProxyNone.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.adnl.AdnlProxyNone){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.adnl/AdnlProxyNone> // org.ton.api.adnl/AdnlProxyNone.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.adnl/AdnlProxyTo { // org.ton.api.adnl/AdnlProxyTo|null[0]
    constructor <init>(kotlin/Int, kotlin/Int, kotlin/Int, kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString) // org.ton.api.adnl/AdnlProxyTo.<init>|<init>(kotlin.Int;kotlin.Int;kotlin.Int;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]

    final val date // org.ton.api.adnl/AdnlProxyTo.date|{}date[0]
        final fun <get-date>(): kotlin/Int // org.ton.api.adnl/AdnlProxyTo.date.<get-date>|<get-date>(){}[0]
    final val dateHash // org.ton.api.adnl/AdnlProxyTo.dateHash|{}dateHash[0]
        final fun <get-dateHash>(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl/AdnlProxyTo.dateHash.<get-dateHash>|<get-dateHash>(){}[0]
    final val ip // org.ton.api.adnl/AdnlProxyTo.ip|{}ip[0]
        final fun <get-ip>(): kotlin/Int // org.ton.api.adnl/AdnlProxyTo.ip.<get-ip>|<get-ip>(){}[0]
    final val port // org.ton.api.adnl/AdnlProxyTo.port|{}port[0]
        final fun <get-port>(): kotlin/Int // org.ton.api.adnl/AdnlProxyTo.port.<get-port>|<get-port>(){}[0]
    final val sharedSecret // org.ton.api.adnl/AdnlProxyTo.sharedSecret|{}sharedSecret[0]
        final fun <get-sharedSecret>(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl/AdnlProxyTo.sharedSecret.<get-sharedSecret>|<get-sharedSecret>(){}[0]

    final fun component1(): kotlin/Int // org.ton.api.adnl/AdnlProxyTo.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.api.adnl/AdnlProxyTo.component2|component2(){}[0]
    final fun component3(): kotlin/Int // org.ton.api.adnl/AdnlProxyTo.component3|component3(){}[0]
    final fun component4(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl/AdnlProxyTo.component4|component4(){}[0]
    final fun component5(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl/AdnlProxyTo.component5|component5(){}[0]
    final fun copy(kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., kotlinx.io.bytestring/ByteString = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.api.adnl/AdnlProxyTo // org.ton.api.adnl/AdnlProxyTo.copy|copy(kotlin.Int;kotlin.Int;kotlin.Int;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.adnl/AdnlProxyTo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.adnl/AdnlProxyTo.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.adnl/AdnlProxyTo.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.adnl/AdnlProxyTo> { // org.ton.api.adnl/AdnlProxyTo.$serializer|null[0]
        final val descriptor // org.ton.api.adnl/AdnlProxyTo.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.adnl/AdnlProxyTo.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.adnl/AdnlProxyTo.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.adnl/AdnlProxyTo // org.ton.api.adnl/AdnlProxyTo.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.adnl/AdnlProxyTo) // org.ton.api.adnl/AdnlProxyTo.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.adnl.AdnlProxyTo){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.adnl/AdnlProxyTo> { // org.ton.api.adnl/AdnlProxyTo.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.adnl/AdnlProxyTo // org.ton.api.adnl/AdnlProxyTo.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.adnl/AdnlProxyTo) // org.ton.api.adnl/AdnlProxyTo.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.adnl.AdnlProxyTo){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.adnl/AdnlProxyTo> // org.ton.api.adnl/AdnlProxyTo.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.adnl/AdnlProxyToSign { // org.ton.api.adnl/AdnlProxyToSign|null[0]
    constructor <init>(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/ByteArray) // org.ton.api.adnl/AdnlProxyToSign.<init>|<init>(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.ByteArray){}[0]
    constructor <init>(kotlin/Int, kotlin/Int, kotlin/Int, kotlinx.io.bytestring/ByteString) // org.ton.api.adnl/AdnlProxyToSign.<init>|<init>(kotlin.Int;kotlin.Int;kotlin.Int;kotlinx.io.bytestring.ByteString){}[0]

    final val date // org.ton.api.adnl/AdnlProxyToSign.date|{}date[0]
        final fun <get-date>(): kotlin/Int // org.ton.api.adnl/AdnlProxyToSign.date.<get-date>|<get-date>(){}[0]
    final val ip // org.ton.api.adnl/AdnlProxyToSign.ip|{}ip[0]
        final fun <get-ip>(): kotlin/Int // org.ton.api.adnl/AdnlProxyToSign.ip.<get-ip>|<get-ip>(){}[0]
    final val port // org.ton.api.adnl/AdnlProxyToSign.port|{}port[0]
        final fun <get-port>(): kotlin/Int // org.ton.api.adnl/AdnlProxyToSign.port.<get-port>|<get-port>(){}[0]
    final val signature // org.ton.api.adnl/AdnlProxyToSign.signature|{}signature[0]
        final fun <get-signature>(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl/AdnlProxyToSign.signature.<get-signature>|<get-signature>(){}[0]

    final fun component1(): kotlin/Int // org.ton.api.adnl/AdnlProxyToSign.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.api.adnl/AdnlProxyToSign.component2|component2(){}[0]
    final fun component3(): kotlin/Int // org.ton.api.adnl/AdnlProxyToSign.component3|component3(){}[0]
    final fun component4(): kotlinx.io.bytestring/ByteString // org.ton.api.adnl/AdnlProxyToSign.component4|component4(){}[0]
    final fun copy(kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.api.adnl/AdnlProxyToSign // org.ton.api.adnl/AdnlProxyToSign.copy|copy(kotlin.Int;kotlin.Int;kotlin.Int;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.adnl/AdnlProxyToSign.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.adnl/AdnlProxyToSign.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.adnl/AdnlProxyToSign.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.adnl/AdnlProxyToSign> { // org.ton.api.adnl/AdnlProxyToSign.$serializer|null[0]
        final val descriptor // org.ton.api.adnl/AdnlProxyToSign.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.adnl/AdnlProxyToSign.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.adnl/AdnlProxyToSign.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.adnl/AdnlProxyToSign // org.ton.api.adnl/AdnlProxyToSign.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.adnl/AdnlProxyToSign) // org.ton.api.adnl/AdnlProxyToSign.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.adnl.AdnlProxyToSign){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.adnl/AdnlProxyToSign> { // org.ton.api.adnl/AdnlProxyToSign.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.adnl/AdnlProxyToSign // org.ton.api.adnl/AdnlProxyToSign.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.adnl/AdnlProxyToSign) // org.ton.api.adnl/AdnlProxyToSign.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.adnl.AdnlProxyToSign){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.adnl/AdnlProxyToSign> // org.ton.api.adnl/AdnlProxyToSign.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.config/ConfigGlobal : org.ton.tl/TlObject<org.ton.api.config/ConfigGlobal> { // org.ton.api.config/ConfigGlobal|null[0]
    constructor <init>(org.ton.api.adnl.config/AdnlConfigGlobal = ..., org.ton.api.dht.config/DhtConfigGlobal = ..., org.ton.api.validator.config/ValidatorConfigGlobal) // org.ton.api.config/ConfigGlobal.<init>|<init>(org.ton.api.adnl.config.AdnlConfigGlobal;org.ton.api.dht.config.DhtConfigGlobal;org.ton.api.validator.config.ValidatorConfigGlobal){}[0]

    final val adnl // org.ton.api.config/ConfigGlobal.adnl|{}adnl[0]
        final fun <get-adnl>(): org.ton.api.adnl.config/AdnlConfigGlobal // org.ton.api.config/ConfigGlobal.adnl.<get-adnl>|<get-adnl>(){}[0]
    final val dht // org.ton.api.config/ConfigGlobal.dht|{}dht[0]
        final fun <get-dht>(): org.ton.api.dht.config/DhtConfigGlobal // org.ton.api.config/ConfigGlobal.dht.<get-dht>|<get-dht>(){}[0]
    final val validator // org.ton.api.config/ConfigGlobal.validator|{}validator[0]
        final fun <get-validator>(): org.ton.api.validator.config/ValidatorConfigGlobal // org.ton.api.config/ConfigGlobal.validator.<get-validator>|<get-validator>(){}[0]

    final fun component1(): org.ton.api.adnl.config/AdnlConfigGlobal // org.ton.api.config/ConfigGlobal.component1|component1(){}[0]
    final fun component2(): org.ton.api.dht.config/DhtConfigGlobal // org.ton.api.config/ConfigGlobal.component2|component2(){}[0]
    final fun component3(): org.ton.api.validator.config/ValidatorConfigGlobal // org.ton.api.config/ConfigGlobal.component3|component3(){}[0]
    final fun copy(org.ton.api.adnl.config/AdnlConfigGlobal = ..., org.ton.api.dht.config/DhtConfigGlobal = ..., org.ton.api.validator.config/ValidatorConfigGlobal = ...): org.ton.api.config/ConfigGlobal // org.ton.api.config/ConfigGlobal.copy|copy(org.ton.api.adnl.config.AdnlConfigGlobal;org.ton.api.dht.config.DhtConfigGlobal;org.ton.api.validator.config.ValidatorConfigGlobal){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.config/ConfigGlobal.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.config/ConfigGlobal.hashCode|hashCode(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.config/ConfigGlobal> // org.ton.api.config/ConfigGlobal.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.api.config/ConfigGlobal.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.config/ConfigGlobal> { // org.ton.api.config/ConfigGlobal.$serializer|null[0]
        final val descriptor // org.ton.api.config/ConfigGlobal.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.config/ConfigGlobal.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.config/ConfigGlobal.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.config/ConfigGlobal // org.ton.api.config/ConfigGlobal.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.config/ConfigGlobal) // org.ton.api.config/ConfigGlobal.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.config.ConfigGlobal){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.api.config/ConfigGlobal> { // org.ton.api.config/ConfigGlobal.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.api.config/ConfigGlobal // org.ton.api.config/ConfigGlobal.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.api.config/ConfigGlobal // org.ton.api.config/ConfigGlobal.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.api.config/ConfigGlobal // org.ton.api.config/ConfigGlobal.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.config/ConfigGlobal // org.ton.api.config/ConfigGlobal.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.api.config/ConfigGlobal // org.ton.api.config/ConfigGlobal.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.api.config/ConfigGlobal // org.ton.api.config/ConfigGlobal.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.api.config/ConfigGlobal // org.ton.api.config/ConfigGlobal.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.api.config/ConfigGlobal // org.ton.api.config/ConfigGlobal.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.api.config/ConfigGlobal) // org.ton.api.config/ConfigGlobal.Companion.encode|encode(kotlinx.io.Sink;org.ton.api.config.ConfigGlobal){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.config/ConfigGlobal) // org.ton.api.config/ConfigGlobal.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.config.ConfigGlobal){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.api.config/ConfigGlobal) // org.ton.api.config/ConfigGlobal.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.api.config.ConfigGlobal){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.api.config/ConfigGlobal) // org.ton.api.config/ConfigGlobal.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.api.config.ConfigGlobal){}[0]
        final fun encodeToByteArray(org.ton.api.config/ConfigGlobal, kotlin/Boolean): kotlin/ByteArray // org.ton.api.config/ConfigGlobal.Companion.encodeToByteArray|encodeToByteArray(org.ton.api.config.ConfigGlobal;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.api.config/ConfigGlobal, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.api.config/ConfigGlobal.Companion.encodeToByteString|encodeToByteString(org.ton.api.config.ConfigGlobal;kotlin.Boolean){}[0]
        final fun hash(org.ton.api.config/ConfigGlobal): kotlin/ByteArray // org.ton.api.config/ConfigGlobal.Companion.hash|hash(org.ton.api.config.ConfigGlobal){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.config/ConfigGlobal> // org.ton.api.config/ConfigGlobal.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.dht.config/DhtConfigGlobal : org.ton.tl/TlObject<org.ton.api.dht.config/DhtConfigGlobal> { // org.ton.api.dht.config/DhtConfigGlobal|null[0]
    constructor <init>(kotlin.collections/List<org.ton.api.dht/DhtNode>, kotlin/Int, kotlin/Int) // org.ton.api.dht.config/DhtConfigGlobal.<init>|<init>(kotlin.collections.List<org.ton.api.dht.DhtNode>;kotlin.Int;kotlin.Int){}[0]
    constructor <init>(org.ton.api.dht/DhtNodes = ..., kotlin/Int = ..., kotlin/Int = ...) // org.ton.api.dht.config/DhtConfigGlobal.<init>|<init>(org.ton.api.dht.DhtNodes;kotlin.Int;kotlin.Int){}[0]

    final val a // org.ton.api.dht.config/DhtConfigGlobal.a|{}a[0]
        final fun <get-a>(): kotlin/Int // org.ton.api.dht.config/DhtConfigGlobal.a.<get-a>|<get-a>(){}[0]
    final val k // org.ton.api.dht.config/DhtConfigGlobal.k|{}k[0]
        final fun <get-k>(): kotlin/Int // org.ton.api.dht.config/DhtConfigGlobal.k.<get-k>|<get-k>(){}[0]
    final val staticNodes // org.ton.api.dht.config/DhtConfigGlobal.staticNodes|{}staticNodes[0]
        final fun <get-staticNodes>(): org.ton.api.dht/DhtNodes // org.ton.api.dht.config/DhtConfigGlobal.staticNodes.<get-staticNodes>|<get-staticNodes>(){}[0]

    final fun component1(): org.ton.api.dht/DhtNodes // org.ton.api.dht.config/DhtConfigGlobal.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.api.dht.config/DhtConfigGlobal.component2|component2(){}[0]
    final fun component3(): kotlin/Int // org.ton.api.dht.config/DhtConfigGlobal.component3|component3(){}[0]
    final fun copy(org.ton.api.dht/DhtNodes = ..., kotlin/Int = ..., kotlin/Int = ...): org.ton.api.dht.config/DhtConfigGlobal // org.ton.api.dht.config/DhtConfigGlobal.copy|copy(org.ton.api.dht.DhtNodes;kotlin.Int;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.dht.config/DhtConfigGlobal.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.dht.config/DhtConfigGlobal.hashCode|hashCode(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.dht.config/DhtConfigGlobal> // org.ton.api.dht.config/DhtConfigGlobal.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.api.dht.config/DhtConfigGlobal.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.dht.config/DhtConfigGlobal> { // org.ton.api.dht.config/DhtConfigGlobal.$serializer|null[0]
        final val descriptor // org.ton.api.dht.config/DhtConfigGlobal.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.dht.config/DhtConfigGlobal.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.dht.config/DhtConfigGlobal.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.dht.config/DhtConfigGlobal // org.ton.api.dht.config/DhtConfigGlobal.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.dht.config/DhtConfigGlobal) // org.ton.api.dht.config/DhtConfigGlobal.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.dht.config.DhtConfigGlobal){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.dht.config/DhtConfigGlobal> { // org.ton.api.dht.config/DhtConfigGlobal.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.dht.config/DhtConfigGlobal // org.ton.api.dht.config/DhtConfigGlobal.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.dht.config/DhtConfigGlobal) // org.ton.api.dht.config/DhtConfigGlobal.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.dht.config.DhtConfigGlobal){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.dht.config/DhtConfigGlobal> // org.ton.api.dht.config/DhtConfigGlobal.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.dht.config/DhtConfigIdLocal : org.ton.api.dht.config/DhtConfigLocal { // org.ton.api.dht.config/DhtConfigIdLocal|null[0]
    constructor <init>(org.ton.api.adnl/AdnlIdShort) // org.ton.api.dht.config/DhtConfigIdLocal.<init>|<init>(org.ton.api.adnl.AdnlIdShort){}[0]

    final val id // org.ton.api.dht.config/DhtConfigIdLocal.id|{}id[0]
        final fun <get-id>(): org.ton.api.adnl/AdnlIdShort // org.ton.api.dht.config/DhtConfigIdLocal.id.<get-id>|<get-id>(){}[0]

    final fun component1(): org.ton.api.adnl/AdnlIdShort // org.ton.api.dht.config/DhtConfigIdLocal.component1|component1(){}[0]
    final fun copy(org.ton.api.adnl/AdnlIdShort = ...): org.ton.api.dht.config/DhtConfigIdLocal // org.ton.api.dht.config/DhtConfigIdLocal.copy|copy(org.ton.api.adnl.AdnlIdShort){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.dht.config/DhtConfigIdLocal.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.dht.config/DhtConfigIdLocal.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.dht.config/DhtConfigIdLocal.toString|toString(){}[0]

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.dht.config/DhtConfigIdLocal> { // org.ton.api.dht.config/DhtConfigIdLocal.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.dht.config/DhtConfigIdLocal // org.ton.api.dht.config/DhtConfigIdLocal.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.dht.config/DhtConfigIdLocal) // org.ton.api.dht.config/DhtConfigIdLocal.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.dht.config.DhtConfigIdLocal){}[0]
    }
}

final class org.ton.api.dht.config/DhtConfigRandomLocal : org.ton.api.dht.config/DhtConfigLocal { // org.ton.api.dht.config/DhtConfigRandomLocal|null[0]
    constructor <init>(kotlin/Int) // org.ton.api.dht.config/DhtConfigRandomLocal.<init>|<init>(kotlin.Int){}[0]

    final val cnt // org.ton.api.dht.config/DhtConfigRandomLocal.cnt|{}cnt[0]
        final fun <get-cnt>(): kotlin/Int // org.ton.api.dht.config/DhtConfigRandomLocal.cnt.<get-cnt>|<get-cnt>(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.dht.config/DhtConfigRandomLocal> { // org.ton.api.dht.config/DhtConfigRandomLocal.$serializer|null[0]
        final val descriptor // org.ton.api.dht.config/DhtConfigRandomLocal.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.dht.config/DhtConfigRandomLocal.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.dht.config/DhtConfigRandomLocal.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.dht.config/DhtConfigRandomLocal // org.ton.api.dht.config/DhtConfigRandomLocal.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.dht.config/DhtConfigRandomLocal) // org.ton.api.dht.config/DhtConfigRandomLocal.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.dht.config.DhtConfigRandomLocal){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.dht.config/DhtConfigRandomLocal> { // org.ton.api.dht.config/DhtConfigRandomLocal.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.dht.config/DhtConfigRandomLocal // org.ton.api.dht.config/DhtConfigRandomLocal.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.dht.config/DhtConfigRandomLocal) // org.ton.api.dht.config/DhtConfigRandomLocal.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.dht.config.DhtConfigRandomLocal){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.dht.config/DhtConfigRandomLocal> // org.ton.api.dht.config/DhtConfigRandomLocal.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.dht.db/DhtDbBucket : org.ton.tl/TlObject<org.ton.api.dht.db/DhtDbBucket> { // org.ton.api.dht.db/DhtDbBucket|null[0]
    constructor <init>(kotlin.collections/List<org.ton.api.dht/DhtNode>) // org.ton.api.dht.db/DhtDbBucket.<init>|<init>(kotlin.collections.List<org.ton.api.dht.DhtNode>){}[0]
    constructor <init>(org.ton.api.dht/DhtNodes) // org.ton.api.dht.db/DhtDbBucket.<init>|<init>(org.ton.api.dht.DhtNodes){}[0]

    final val nodes // org.ton.api.dht.db/DhtDbBucket.nodes|{}nodes[0]
        final fun <get-nodes>(): org.ton.api.dht/DhtNodes // org.ton.api.dht.db/DhtDbBucket.nodes.<get-nodes>|<get-nodes>(){}[0]

    final fun component1(): org.ton.api.dht/DhtNodes // org.ton.api.dht.db/DhtDbBucket.component1|component1(){}[0]
    final fun copy(org.ton.api.dht/DhtNodes = ...): org.ton.api.dht.db/DhtDbBucket // org.ton.api.dht.db/DhtDbBucket.copy|copy(org.ton.api.dht.DhtNodes){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.dht.db/DhtDbBucket.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.dht.db/DhtDbBucket.hashCode|hashCode(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.dht.db/DhtDbBucket> // org.ton.api.dht.db/DhtDbBucket.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.api.dht.db/DhtDbBucket.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.dht.db/DhtDbBucket> { // org.ton.api.dht.db/DhtDbBucket.$serializer|null[0]
        final val descriptor // org.ton.api.dht.db/DhtDbBucket.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.dht.db/DhtDbBucket.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.dht.db/DhtDbBucket.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.dht.db/DhtDbBucket // org.ton.api.dht.db/DhtDbBucket.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.dht.db/DhtDbBucket) // org.ton.api.dht.db/DhtDbBucket.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.dht.db.DhtDbBucket){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.dht.db/DhtDbBucket> { // org.ton.api.dht.db/DhtDbBucket.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.dht.db/DhtDbBucket // org.ton.api.dht.db/DhtDbBucket.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.dht.db/DhtDbBucket) // org.ton.api.dht.db/DhtDbBucket.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.dht.db.DhtDbBucket){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.dht.db/DhtDbBucket> // org.ton.api.dht.db/DhtDbBucket.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.dht.db/DhtDbKey : org.ton.tl/TlObject<org.ton.api.dht.db/DhtDbKey> { // org.ton.api.dht.db/DhtDbKey|null[0]
    constructor <init>(kotlin/Int) // org.ton.api.dht.db/DhtDbKey.<init>|<init>(kotlin.Int){}[0]

    final val id // org.ton.api.dht.db/DhtDbKey.id|{}id[0]
        final fun <get-id>(): kotlin/Int // org.ton.api.dht.db/DhtDbKey.id.<get-id>|<get-id>(){}[0]

    final fun component1(): kotlin/Int // org.ton.api.dht.db/DhtDbKey.component1|component1(){}[0]
    final fun copy(kotlin/Int = ...): org.ton.api.dht.db/DhtDbKey // org.ton.api.dht.db/DhtDbKey.copy|copy(kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.dht.db/DhtDbKey.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.dht.db/DhtDbKey.hashCode|hashCode(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.dht.db/DhtDbKey> // org.ton.api.dht.db/DhtDbKey.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.api.dht.db/DhtDbKey.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.dht.db/DhtDbKey> { // org.ton.api.dht.db/DhtDbKey.$serializer|null[0]
        final val descriptor // org.ton.api.dht.db/DhtDbKey.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.dht.db/DhtDbKey.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.dht.db/DhtDbKey.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.dht.db/DhtDbKey // org.ton.api.dht.db/DhtDbKey.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.dht.db/DhtDbKey) // org.ton.api.dht.db/DhtDbKey.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.dht.db.DhtDbKey){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.dht.db/DhtDbKey> { // org.ton.api.dht.db/DhtDbKey.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.dht.db/DhtDbKey // org.ton.api.dht.db/DhtDbKey.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.dht.db/DhtDbKey) // org.ton.api.dht.db/DhtDbKey.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.dht.db.DhtDbKey){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.dht.db/DhtDbKey> // org.ton.api.dht.db/DhtDbKey.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.dht.functions/DhtFindValue : org.ton.tl/TLFunction<org.ton.api.dht.functions/DhtFindValue, org.ton.api.dht/DhtValueResult> { // org.ton.api.dht.functions/DhtFindValue|null[0]
    constructor <init>(kotlin/ByteArray, kotlin/Int) // org.ton.api.dht.functions/DhtFindValue.<init>|<init>(kotlin.ByteArray;kotlin.Int){}[0]
    constructor <init>(kotlinx.io.bytestring/ByteString, kotlin/Int) // org.ton.api.dht.functions/DhtFindValue.<init>|<init>(kotlinx.io.bytestring.ByteString;kotlin.Int){}[0]
    constructor <init>(org.ton.api.dht/DhtKey, kotlin/Int) // org.ton.api.dht.functions/DhtFindValue.<init>|<init>(org.ton.api.dht.DhtKey;kotlin.Int){}[0]

    final val k // org.ton.api.dht.functions/DhtFindValue.k|{}k[0]
        final fun <get-k>(): kotlin/Int // org.ton.api.dht.functions/DhtFindValue.k.<get-k>|<get-k>(){}[0]
    final val key // org.ton.api.dht.functions/DhtFindValue.key|{}key[0]
        final fun <get-key>(): kotlinx.io.bytestring/ByteString // org.ton.api.dht.functions/DhtFindValue.key.<get-key>|<get-key>(){}[0]

    final fun component1(): kotlinx.io.bytestring/ByteString // org.ton.api.dht.functions/DhtFindValue.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.api.dht.functions/DhtFindValue.component2|component2(){}[0]
    final fun copy(kotlinx.io.bytestring/ByteString = ..., kotlin/Int = ...): org.ton.api.dht.functions/DhtFindValue // org.ton.api.dht.functions/DhtFindValue.copy|copy(kotlinx.io.bytestring.ByteString;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.dht.functions/DhtFindValue.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.dht.functions/DhtFindValue.hashCode|hashCode(){}[0]
    final fun resultTlCodec(): org.ton.tl/TlCodec<org.ton.api.dht/DhtValueResult> // org.ton.api.dht.functions/DhtFindValue.resultTlCodec|resultTlCodec(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.dht.functions/DhtFindValue> // org.ton.api.dht.functions/DhtFindValue.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.api.dht.functions/DhtFindValue.toString|toString(){}[0]
}

final class org.ton.api.dht.functions/DhtPing : org.ton.tl/TLFunction<org.ton.api.dht.functions/DhtPing, org.ton.api.dht/DhtPong> { // org.ton.api.dht.functions/DhtPing|null[0]
    constructor <init>(kotlin/Long) // org.ton.api.dht.functions/DhtPing.<init>|<init>(kotlin.Long){}[0]

    final val randomId // org.ton.api.dht.functions/DhtPing.randomId|{}randomId[0]
        final fun <get-randomId>(): kotlin/Long // org.ton.api.dht.functions/DhtPing.randomId.<get-randomId>|<get-randomId>(){}[0]

    final fun component1(): kotlin/Long // org.ton.api.dht.functions/DhtPing.component1|component1(){}[0]
    final fun copy(kotlin/Long = ...): org.ton.api.dht.functions/DhtPing // org.ton.api.dht.functions/DhtPing.copy|copy(kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.dht.functions/DhtPing.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.dht.functions/DhtPing.hashCode|hashCode(){}[0]
    final fun resultTlCodec(): org.ton.tl/TlCodec<org.ton.api.dht/DhtPong> // org.ton.api.dht.functions/DhtPing.resultTlCodec|resultTlCodec(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.dht.functions/DhtPing> // org.ton.api.dht.functions/DhtPing.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.api.dht.functions/DhtPing.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.dht.functions/DhtPing> { // org.ton.api.dht.functions/DhtPing.$serializer|null[0]
        final val descriptor // org.ton.api.dht.functions/DhtPing.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.dht.functions/DhtPing.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.dht.functions/DhtPing.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.dht.functions/DhtPing // org.ton.api.dht.functions/DhtPing.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.dht.functions/DhtPing) // org.ton.api.dht.functions/DhtPing.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.dht.functions.DhtPing){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.api.dht.functions/DhtPing> { // org.ton.api.dht.functions/DhtPing.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.api.dht.functions/DhtPing // org.ton.api.dht.functions/DhtPing.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.api.dht.functions/DhtPing // org.ton.api.dht.functions/DhtPing.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.api.dht.functions/DhtPing // org.ton.api.dht.functions/DhtPing.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.dht.functions/DhtPing // org.ton.api.dht.functions/DhtPing.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.api.dht.functions/DhtPing // org.ton.api.dht.functions/DhtPing.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.api.dht.functions/DhtPing // org.ton.api.dht.functions/DhtPing.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.api.dht.functions/DhtPing // org.ton.api.dht.functions/DhtPing.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.api.dht.functions/DhtPing // org.ton.api.dht.functions/DhtPing.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.api.dht.functions/DhtPing) // org.ton.api.dht.functions/DhtPing.Companion.encode|encode(kotlinx.io.Sink;org.ton.api.dht.functions.DhtPing){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.dht.functions/DhtPing) // org.ton.api.dht.functions/DhtPing.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.dht.functions.DhtPing){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.api.dht.functions/DhtPing) // org.ton.api.dht.functions/DhtPing.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.api.dht.functions.DhtPing){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.api.dht.functions/DhtPing) // org.ton.api.dht.functions/DhtPing.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.api.dht.functions.DhtPing){}[0]
        final fun encodeToByteArray(org.ton.api.dht.functions/DhtPing, kotlin/Boolean): kotlin/ByteArray // org.ton.api.dht.functions/DhtPing.Companion.encodeToByteArray|encodeToByteArray(org.ton.api.dht.functions.DhtPing;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.api.dht.functions/DhtPing, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.api.dht.functions/DhtPing.Companion.encodeToByteString|encodeToByteString(org.ton.api.dht.functions.DhtPing;kotlin.Boolean){}[0]
        final fun hash(org.ton.api.dht.functions/DhtPing): kotlin/ByteArray // org.ton.api.dht.functions/DhtPing.Companion.hash|hash(org.ton.api.dht.functions.DhtPing){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.dht.functions/DhtPing> // org.ton.api.dht.functions/DhtPing.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.dht.functions/DhtQuery { // org.ton.api.dht.functions/DhtQuery|null[0]
    constructor <init>(org.ton.api.dht/DhtNode) // org.ton.api.dht.functions/DhtQuery.<init>|<init>(org.ton.api.dht.DhtNode){}[0]

    final val node // org.ton.api.dht.functions/DhtQuery.node|{}node[0]
        final fun <get-node>(): org.ton.api.dht/DhtNode // org.ton.api.dht.functions/DhtQuery.node.<get-node>|<get-node>(){}[0]

    final fun component1(): org.ton.api.dht/DhtNode // org.ton.api.dht.functions/DhtQuery.component1|component1(){}[0]
    final fun copy(org.ton.api.dht/DhtNode = ...): org.ton.api.dht.functions/DhtQuery // org.ton.api.dht.functions/DhtQuery.copy|copy(org.ton.api.dht.DhtNode){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.dht.functions/DhtQuery.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.dht.functions/DhtQuery.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.dht.functions/DhtQuery.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.dht.functions/DhtQuery> { // org.ton.api.dht.functions/DhtQuery.$serializer|null[0]
        final val descriptor // org.ton.api.dht.functions/DhtQuery.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.dht.functions/DhtQuery.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.dht.functions/DhtQuery.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.dht.functions/DhtQuery // org.ton.api.dht.functions/DhtQuery.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.dht.functions/DhtQuery) // org.ton.api.dht.functions/DhtQuery.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.dht.functions.DhtQuery){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.api.dht.functions/DhtQuery> { // org.ton.api.dht.functions/DhtQuery.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.api.dht.functions/DhtQuery // org.ton.api.dht.functions/DhtQuery.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.api.dht.functions/DhtQuery // org.ton.api.dht.functions/DhtQuery.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.api.dht.functions/DhtQuery // org.ton.api.dht.functions/DhtQuery.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.dht.functions/DhtQuery // org.ton.api.dht.functions/DhtQuery.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.api.dht.functions/DhtQuery // org.ton.api.dht.functions/DhtQuery.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.api.dht.functions/DhtQuery // org.ton.api.dht.functions/DhtQuery.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.api.dht.functions/DhtQuery // org.ton.api.dht.functions/DhtQuery.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.api.dht.functions/DhtQuery // org.ton.api.dht.functions/DhtQuery.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.api.dht.functions/DhtQuery) // org.ton.api.dht.functions/DhtQuery.Companion.encode|encode(kotlinx.io.Sink;org.ton.api.dht.functions.DhtQuery){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.dht.functions/DhtQuery) // org.ton.api.dht.functions/DhtQuery.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.dht.functions.DhtQuery){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.api.dht.functions/DhtQuery) // org.ton.api.dht.functions/DhtQuery.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.api.dht.functions.DhtQuery){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.api.dht.functions/DhtQuery) // org.ton.api.dht.functions/DhtQuery.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.api.dht.functions.DhtQuery){}[0]
        final fun encodeToByteArray(org.ton.api.dht.functions/DhtQuery, kotlin/Boolean): kotlin/ByteArray // org.ton.api.dht.functions/DhtQuery.Companion.encodeToByteArray|encodeToByteArray(org.ton.api.dht.functions.DhtQuery;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.api.dht.functions/DhtQuery, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.api.dht.functions/DhtQuery.Companion.encodeToByteString|encodeToByteString(org.ton.api.dht.functions.DhtQuery;kotlin.Boolean){}[0]
        final fun hash(org.ton.api.dht.functions/DhtQuery): kotlin/ByteArray // org.ton.api.dht.functions/DhtQuery.Companion.hash|hash(org.ton.api.dht.functions.DhtQuery){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.dht.functions/DhtQuery> // org.ton.api.dht.functions/DhtQuery.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.dht/DhtKey : org.ton.tl/TlObject<org.ton.api.dht/DhtKey> { // org.ton.api.dht/DhtKey|null[0]
    constructor <init>(kotlinx.io.bytestring/ByteString, kotlin/String, kotlin/Int = ...) // org.ton.api.dht/DhtKey.<init>|<init>(kotlinx.io.bytestring.ByteString;kotlin.String;kotlin.Int){}[0]

    final val id // org.ton.api.dht/DhtKey.id|{}id[0]
        final fun <get-id>(): kotlinx.io.bytestring/ByteString // org.ton.api.dht/DhtKey.id.<get-id>|<get-id>(){}[0]
    final val idx // org.ton.api.dht/DhtKey.idx|{}idx[0]
        final fun <get-idx>(): kotlin/Int // org.ton.api.dht/DhtKey.idx.<get-idx>|<get-idx>(){}[0]
    final val name // org.ton.api.dht/DhtKey.name|{}name[0]
        final fun <get-name>(): kotlin/String // org.ton.api.dht/DhtKey.name.<get-name>|<get-name>(){}[0]

    final fun component1(): kotlinx.io.bytestring/ByteString // org.ton.api.dht/DhtKey.component1|component1(){}[0]
    final fun component2(): kotlin/String // org.ton.api.dht/DhtKey.component2|component2(){}[0]
    final fun component3(): kotlin/Int // org.ton.api.dht/DhtKey.component3|component3(){}[0]
    final fun copy(kotlinx.io.bytestring/ByteString = ..., kotlin/String = ..., kotlin/Int = ...): org.ton.api.dht/DhtKey // org.ton.api.dht/DhtKey.copy|copy(kotlinx.io.bytestring.ByteString;kotlin.String;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.dht/DhtKey.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.dht/DhtKey.hashCode|hashCode(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.dht/DhtKey> // org.ton.api.dht/DhtKey.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.api.dht/DhtKey.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.dht/DhtKey> { // org.ton.api.dht/DhtKey.$serializer|null[0]
        final val descriptor // org.ton.api.dht/DhtKey.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.dht/DhtKey.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.dht/DhtKey.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.dht/DhtKey // org.ton.api.dht/DhtKey.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.dht/DhtKey) // org.ton.api.dht/DhtKey.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.dht.DhtKey){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.dht/DhtKey> { // org.ton.api.dht/DhtKey.Companion|null[0]
        final fun address(org.ton.api.adnl/AdnlIdShort): org.ton.api.dht/DhtKey // org.ton.api.dht/DhtKey.Companion.address|address(org.ton.api.adnl.AdnlIdShort){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.dht/DhtKey // org.ton.api.dht/DhtKey.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.dht/DhtKey) // org.ton.api.dht/DhtKey.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.dht.DhtKey){}[0]
        final fun nodes(org.ton.api.adnl/AdnlIdShort): org.ton.api.dht/DhtKey // org.ton.api.dht/DhtKey.Companion.nodes|nodes(org.ton.api.adnl.AdnlIdShort){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.dht/DhtKey> // org.ton.api.dht/DhtKey.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.dht/DhtKeyDescription : org.ton.api/SignedTlObject<org.ton.api.dht/DhtKeyDescription> { // org.ton.api.dht/DhtKeyDescription|null[0]
    constructor <init>(org.ton.api.dht/DhtKey, org.ton.kotlin.crypto/PublicKey, org.ton.api.dht/DhtUpdateRule = ..., kotlinx.io.bytestring/ByteString = ...) // org.ton.api.dht/DhtKeyDescription.<init>|<init>(org.ton.api.dht.DhtKey;org.ton.kotlin.crypto.PublicKey;org.ton.api.dht.DhtUpdateRule;kotlinx.io.bytestring.ByteString){}[0]

    final val id // org.ton.api.dht/DhtKeyDescription.id|{}id[0]
        final fun <get-id>(): org.ton.kotlin.crypto/PublicKey // org.ton.api.dht/DhtKeyDescription.id.<get-id>|<get-id>(){}[0]
    final val key // org.ton.api.dht/DhtKeyDescription.key|{}key[0]
        final fun <get-key>(): org.ton.api.dht/DhtKey // org.ton.api.dht/DhtKeyDescription.key.<get-key>|<get-key>(){}[0]
    final val signature // org.ton.api.dht/DhtKeyDescription.signature|{}signature[0]
        final fun <get-signature>(): kotlinx.io.bytestring/ByteString // org.ton.api.dht/DhtKeyDescription.signature.<get-signature>|<get-signature>(){}[0]
    final val updateRule // org.ton.api.dht/DhtKeyDescription.updateRule|{}updateRule[0]
        final fun <get-updateRule>(): org.ton.api.dht/DhtUpdateRule // org.ton.api.dht/DhtKeyDescription.updateRule.<get-updateRule>|<get-updateRule>(){}[0]

    final fun component1(): org.ton.api.dht/DhtKey // org.ton.api.dht/DhtKeyDescription.component1|component1(){}[0]
    final fun component2(): org.ton.kotlin.crypto/PublicKey // org.ton.api.dht/DhtKeyDescription.component2|component2(){}[0]
    final fun component3(): org.ton.api.dht/DhtUpdateRule // org.ton.api.dht/DhtKeyDescription.component3|component3(){}[0]
    final fun component4(): kotlinx.io.bytestring/ByteString // org.ton.api.dht/DhtKeyDescription.component4|component4(){}[0]
    final fun copy(org.ton.api.dht/DhtKey = ..., org.ton.kotlin.crypto/PublicKey = ..., org.ton.api.dht/DhtUpdateRule = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.api.dht/DhtKeyDescription // org.ton.api.dht/DhtKeyDescription.copy|copy(org.ton.api.dht.DhtKey;org.ton.kotlin.crypto.PublicKey;org.ton.api.dht.DhtUpdateRule;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.dht/DhtKeyDescription.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.dht/DhtKeyDescription.hashCode|hashCode(){}[0]
    final fun signed(org.ton.kotlin.crypto/Signer): org.ton.api.dht/DhtKeyDescription // org.ton.api.dht/DhtKeyDescription.signed|signed(org.ton.kotlin.crypto.Signer){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.dht/DhtKeyDescription> // org.ton.api.dht/DhtKeyDescription.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.api.dht/DhtKeyDescription.toString|toString(){}[0]
    final fun verify(org.ton.kotlin.crypto/SignatureVerifier): kotlin/Boolean // org.ton.api.dht/DhtKeyDescription.verify|verify(org.ton.kotlin.crypto.SignatureVerifier){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.dht/DhtKeyDescription> { // org.ton.api.dht/DhtKeyDescription.$serializer|null[0]
        final val descriptor // org.ton.api.dht/DhtKeyDescription.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.dht/DhtKeyDescription.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.dht/DhtKeyDescription.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.dht/DhtKeyDescription // org.ton.api.dht/DhtKeyDescription.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.dht/DhtKeyDescription) // org.ton.api.dht/DhtKeyDescription.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.dht.DhtKeyDescription){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.api.dht/DhtKeyDescription> { // org.ton.api.dht/DhtKeyDescription.Companion|null[0]
        final val $childSerializers // org.ton.api.dht/DhtKeyDescription.Companion.$childSerializers|{}$childSerializers[0]

        final fun decode(kotlin/ByteArray): org.ton.api.dht/DhtKeyDescription // org.ton.api.dht/DhtKeyDescription.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.api.dht/DhtKeyDescription // org.ton.api.dht/DhtKeyDescription.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.api.dht/DhtKeyDescription // org.ton.api.dht/DhtKeyDescription.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.dht/DhtKeyDescription // org.ton.api.dht/DhtKeyDescription.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.api.dht/DhtKeyDescription // org.ton.api.dht/DhtKeyDescription.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.api.dht/DhtKeyDescription // org.ton.api.dht/DhtKeyDescription.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.api.dht/DhtKeyDescription // org.ton.api.dht/DhtKeyDescription.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.api.dht/DhtKeyDescription // org.ton.api.dht/DhtKeyDescription.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.api.dht/DhtKeyDescription) // org.ton.api.dht/DhtKeyDescription.Companion.encode|encode(kotlinx.io.Sink;org.ton.api.dht.DhtKeyDescription){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.dht/DhtKeyDescription) // org.ton.api.dht/DhtKeyDescription.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.dht.DhtKeyDescription){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.api.dht/DhtKeyDescription) // org.ton.api.dht/DhtKeyDescription.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.api.dht.DhtKeyDescription){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.api.dht/DhtKeyDescription) // org.ton.api.dht/DhtKeyDescription.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.api.dht.DhtKeyDescription){}[0]
        final fun encodeToByteArray(org.ton.api.dht/DhtKeyDescription, kotlin/Boolean): kotlin/ByteArray // org.ton.api.dht/DhtKeyDescription.Companion.encodeToByteArray|encodeToByteArray(org.ton.api.dht.DhtKeyDescription;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.api.dht/DhtKeyDescription, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.api.dht/DhtKeyDescription.Companion.encodeToByteString|encodeToByteString(org.ton.api.dht.DhtKeyDescription;kotlin.Boolean){}[0]
        final fun hash(org.ton.api.dht/DhtKeyDescription): kotlin/ByteArray // org.ton.api.dht/DhtKeyDescription.Companion.hash|hash(org.ton.api.dht.DhtKeyDescription){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.dht/DhtKeyDescription> // org.ton.api.dht/DhtKeyDescription.Companion.serializer|serializer(){}[0]
        final fun signed(kotlin/String, org.ton.kotlin.crypto/PrivateKeyEd25519): org.ton.api.dht/DhtKeyDescription // org.ton.api.dht/DhtKeyDescription.Companion.signed|signed(kotlin.String;org.ton.kotlin.crypto.PrivateKeyEd25519){}[0]
    }
}

final class org.ton.api.dht/DhtMessage : org.ton.tl/TlObject<org.ton.api.dht/DhtMessage> { // org.ton.api.dht/DhtMessage|null[0]
    constructor <init>(org.ton.api.dht/DhtNode) // org.ton.api.dht/DhtMessage.<init>|<init>(org.ton.api.dht.DhtNode){}[0]

    final val node // org.ton.api.dht/DhtMessage.node|{}node[0]
        final fun <get-node>(): org.ton.api.dht/DhtNode // org.ton.api.dht/DhtMessage.node.<get-node>|<get-node>(){}[0]

    final fun component1(): org.ton.api.dht/DhtNode // org.ton.api.dht/DhtMessage.component1|component1(){}[0]
    final fun copy(org.ton.api.dht/DhtNode = ...): org.ton.api.dht/DhtMessage // org.ton.api.dht/DhtMessage.copy|copy(org.ton.api.dht.DhtNode){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.dht/DhtMessage.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.dht/DhtMessage.hashCode|hashCode(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.dht/DhtMessage> // org.ton.api.dht/DhtMessage.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.api.dht/DhtMessage.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.dht/DhtMessage> { // org.ton.api.dht/DhtMessage.$serializer|null[0]
        final val descriptor // org.ton.api.dht/DhtMessage.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.dht/DhtMessage.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.dht/DhtMessage.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.dht/DhtMessage // org.ton.api.dht/DhtMessage.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.dht/DhtMessage) // org.ton.api.dht/DhtMessage.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.dht.DhtMessage){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.dht/DhtMessage> { // org.ton.api.dht/DhtMessage.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.dht/DhtMessage // org.ton.api.dht/DhtMessage.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.dht/DhtMessage) // org.ton.api.dht/DhtMessage.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.dht.DhtMessage){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.dht/DhtMessage> // org.ton.api.dht/DhtMessage.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.dht/DhtNode : org.ton.api/SignedTlObject<org.ton.api.dht/DhtNode> { // org.ton.api.dht/DhtNode|null[0]
    constructor <init>(org.ton.kotlin.crypto/PublicKey, org.ton.api.adnl/AdnlAddressList, kotlin/Int = ..., kotlinx.io.bytestring/ByteString) // org.ton.api.dht/DhtNode.<init>|<init>(org.ton.kotlin.crypto.PublicKey;org.ton.api.adnl.AdnlAddressList;kotlin.Int;kotlinx.io.bytestring.ByteString){}[0]

    final val addrList // org.ton.api.dht/DhtNode.addrList|{}addrList[0]
        final fun <get-addrList>(): org.ton.api.adnl/AdnlAddressList // org.ton.api.dht/DhtNode.addrList.<get-addrList>|<get-addrList>(){}[0]
    final val id // org.ton.api.dht/DhtNode.id|{}id[0]
        final fun <get-id>(): org.ton.kotlin.crypto/PublicKey // org.ton.api.dht/DhtNode.id.<get-id>|<get-id>(){}[0]
    final val signature // org.ton.api.dht/DhtNode.signature|{}signature[0]
        final fun <get-signature>(): kotlinx.io.bytestring/ByteString // org.ton.api.dht/DhtNode.signature.<get-signature>|<get-signature>(){}[0]
    final val version // org.ton.api.dht/DhtNode.version|{}version[0]
        final fun <get-version>(): kotlin/Int // org.ton.api.dht/DhtNode.version.<get-version>|<get-version>(){}[0]

    final fun component1(): org.ton.kotlin.crypto/PublicKey // org.ton.api.dht/DhtNode.component1|component1(){}[0]
    final fun component2(): org.ton.api.adnl/AdnlAddressList // org.ton.api.dht/DhtNode.component2|component2(){}[0]
    final fun component3(): kotlin/Int // org.ton.api.dht/DhtNode.component3|component3(){}[0]
    final fun component4(): kotlinx.io.bytestring/ByteString // org.ton.api.dht/DhtNode.component4|component4(){}[0]
    final fun copy(org.ton.kotlin.crypto/PublicKey = ..., org.ton.api.adnl/AdnlAddressList = ..., kotlin/Int = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.api.dht/DhtNode // org.ton.api.dht/DhtNode.copy|copy(org.ton.kotlin.crypto.PublicKey;org.ton.api.adnl.AdnlAddressList;kotlin.Int;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.dht/DhtNode.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.dht/DhtNode.hashCode|hashCode(){}[0]
    final fun key(): org.ton.api.adnl/AdnlIdShort // org.ton.api.dht/DhtNode.key|key(){}[0]
    final fun signed(org.ton.kotlin.crypto/Signer): org.ton.api.dht/DhtNode // org.ton.api.dht/DhtNode.signed|signed(org.ton.kotlin.crypto.Signer){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.dht/DhtNode> // org.ton.api.dht/DhtNode.tlCodec|tlCodec(){}[0]
    final fun toAdnlNode(): org.ton.api.adnl/AdnlNode // org.ton.api.dht/DhtNode.toAdnlNode|toAdnlNode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.dht/DhtNode.toString|toString(){}[0]
    final fun verify(org.ton.kotlin.crypto/SignatureVerifier): kotlin/Boolean // org.ton.api.dht/DhtNode.verify|verify(org.ton.kotlin.crypto.SignatureVerifier){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.dht/DhtNode> { // org.ton.api.dht/DhtNode.$serializer|null[0]
        final val descriptor // org.ton.api.dht/DhtNode.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.dht/DhtNode.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.dht/DhtNode.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.dht/DhtNode // org.ton.api.dht/DhtNode.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.dht/DhtNode) // org.ton.api.dht/DhtNode.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.dht.DhtNode){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.api.dht/DhtNode> { // org.ton.api.dht/DhtNode.Companion|null[0]
        final val $childSerializers // org.ton.api.dht/DhtNode.Companion.$childSerializers|{}$childSerializers[0]

        final fun decode(kotlin/ByteArray): org.ton.api.dht/DhtNode // org.ton.api.dht/DhtNode.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.api.dht/DhtNode // org.ton.api.dht/DhtNode.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.api.dht/DhtNode // org.ton.api.dht/DhtNode.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.dht/DhtNode // org.ton.api.dht/DhtNode.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.api.dht/DhtNode // org.ton.api.dht/DhtNode.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.api.dht/DhtNode // org.ton.api.dht/DhtNode.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.api.dht/DhtNode // org.ton.api.dht/DhtNode.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.api.dht/DhtNode // org.ton.api.dht/DhtNode.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.api.dht/DhtNode) // org.ton.api.dht/DhtNode.Companion.encode|encode(kotlinx.io.Sink;org.ton.api.dht.DhtNode){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.dht/DhtNode) // org.ton.api.dht/DhtNode.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.dht.DhtNode){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.api.dht/DhtNode) // org.ton.api.dht/DhtNode.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.api.dht.DhtNode){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.api.dht/DhtNode) // org.ton.api.dht/DhtNode.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.api.dht.DhtNode){}[0]
        final fun encodeToByteArray(org.ton.api.dht/DhtNode, kotlin/Boolean): kotlin/ByteArray // org.ton.api.dht/DhtNode.Companion.encodeToByteArray|encodeToByteArray(org.ton.api.dht.DhtNode;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.api.dht/DhtNode, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.api.dht/DhtNode.Companion.encodeToByteString|encodeToByteString(org.ton.api.dht.DhtNode;kotlin.Boolean){}[0]
        final fun hash(org.ton.api.dht/DhtNode): kotlin/ByteArray // org.ton.api.dht/DhtNode.Companion.hash|hash(org.ton.api.dht.DhtNode){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.dht/DhtNode> // org.ton.api.dht/DhtNode.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.dht/DhtNodes : org.ton.tl/TlObject<org.ton.api.dht/DhtNodes> { // org.ton.api.dht/DhtNodes|null[0]
    constructor <init>(kotlin.collections/List<org.ton.api.dht/DhtNode> = ...) // org.ton.api.dht/DhtNodes.<init>|<init>(kotlin.collections.List<org.ton.api.dht.DhtNode>){}[0]

    final val nodes // org.ton.api.dht/DhtNodes.nodes|{}nodes[0]
        final fun <get-nodes>(): kotlin.collections/List<org.ton.api.dht/DhtNode> // org.ton.api.dht/DhtNodes.nodes.<get-nodes>|<get-nodes>(){}[0]

    final fun component1(): kotlin.collections/List<org.ton.api.dht/DhtNode> // org.ton.api.dht/DhtNodes.component1|component1(){}[0]
    final fun copy(kotlin.collections/List<org.ton.api.dht/DhtNode> = ...): org.ton.api.dht/DhtNodes // org.ton.api.dht/DhtNodes.copy|copy(kotlin.collections.List<org.ton.api.dht.DhtNode>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.dht/DhtNodes.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.dht/DhtNodes.hashCode|hashCode(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.dht/DhtNodes> // org.ton.api.dht/DhtNodes.tlCodec|tlCodec(){}[0]
    final fun toAdnlNodes(): org.ton.api.adnl/AdnlNodes // org.ton.api.dht/DhtNodes.toAdnlNodes|toAdnlNodes(){}[0]
    final fun toString(): kotlin/String // org.ton.api.dht/DhtNodes.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.dht/DhtNodes> { // org.ton.api.dht/DhtNodes.$serializer|null[0]
        final val descriptor // org.ton.api.dht/DhtNodes.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.dht/DhtNodes.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.dht/DhtNodes.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.dht/DhtNodes // org.ton.api.dht/DhtNodes.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.dht/DhtNodes) // org.ton.api.dht/DhtNodes.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.dht.DhtNodes){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.dht/DhtNodes> { // org.ton.api.dht/DhtNodes.Companion|null[0]
        final val $childSerializers // org.ton.api.dht/DhtNodes.Companion.$childSerializers|{}$childSerializers[0]

        final fun decode(org.ton.tl/TlReader): org.ton.api.dht/DhtNodes // org.ton.api.dht/DhtNodes.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.dht/DhtNodes) // org.ton.api.dht/DhtNodes.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.dht.DhtNodes){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.dht/DhtNodes> // org.ton.api.dht/DhtNodes.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.dht/DhtPong : org.ton.tl/TlObject<org.ton.api.dht/DhtPong> { // org.ton.api.dht/DhtPong|null[0]
    constructor <init>(kotlin/Long) // org.ton.api.dht/DhtPong.<init>|<init>(kotlin.Long){}[0]

    final val randomId // org.ton.api.dht/DhtPong.randomId|{}randomId[0]
        final fun <get-randomId>(): kotlin/Long // org.ton.api.dht/DhtPong.randomId.<get-randomId>|<get-randomId>(){}[0]

    final fun component1(): kotlin/Long // org.ton.api.dht/DhtPong.component1|component1(){}[0]
    final fun copy(kotlin/Long = ...): org.ton.api.dht/DhtPong // org.ton.api.dht/DhtPong.copy|copy(kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.dht/DhtPong.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.dht/DhtPong.hashCode|hashCode(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.dht/DhtPong> // org.ton.api.dht/DhtPong.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.api.dht/DhtPong.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.dht/DhtPong> { // org.ton.api.dht/DhtPong.$serializer|null[0]
        final val descriptor // org.ton.api.dht/DhtPong.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.dht/DhtPong.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.dht/DhtPong.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.dht/DhtPong // org.ton.api.dht/DhtPong.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.dht/DhtPong) // org.ton.api.dht/DhtPong.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.dht.DhtPong){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.api.dht/DhtPong> { // org.ton.api.dht/DhtPong.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.api.dht/DhtPong // org.ton.api.dht/DhtPong.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.api.dht/DhtPong // org.ton.api.dht/DhtPong.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.api.dht/DhtPong // org.ton.api.dht/DhtPong.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.dht/DhtPong // org.ton.api.dht/DhtPong.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.api.dht/DhtPong // org.ton.api.dht/DhtPong.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.api.dht/DhtPong // org.ton.api.dht/DhtPong.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.api.dht/DhtPong // org.ton.api.dht/DhtPong.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.api.dht/DhtPong // org.ton.api.dht/DhtPong.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.api.dht/DhtPong) // org.ton.api.dht/DhtPong.Companion.encode|encode(kotlinx.io.Sink;org.ton.api.dht.DhtPong){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.dht/DhtPong) // org.ton.api.dht/DhtPong.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.dht.DhtPong){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.api.dht/DhtPong) // org.ton.api.dht/DhtPong.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.api.dht.DhtPong){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.api.dht/DhtPong) // org.ton.api.dht/DhtPong.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.api.dht.DhtPong){}[0]
        final fun encodeToByteArray(org.ton.api.dht/DhtPong, kotlin/Boolean): kotlin/ByteArray // org.ton.api.dht/DhtPong.Companion.encodeToByteArray|encodeToByteArray(org.ton.api.dht.DhtPong;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.api.dht/DhtPong, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.api.dht/DhtPong.Companion.encodeToByteString|encodeToByteString(org.ton.api.dht.DhtPong;kotlin.Boolean){}[0]
        final fun hash(org.ton.api.dht/DhtPong): kotlin/ByteArray // org.ton.api.dht/DhtPong.Companion.hash|hash(org.ton.api.dht.DhtPong){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.dht/DhtPong> // org.ton.api.dht/DhtPong.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.dht/DhtStore : org.ton.tl/TLFunction<org.ton.api.dht/DhtStore, org.ton.api.dht/DhtStored> { // org.ton.api.dht/DhtStore|null[0]
    constructor <init>(org.ton.api.dht/DhtValue) // org.ton.api.dht/DhtStore.<init>|<init>(org.ton.api.dht.DhtValue){}[0]

    final val value // org.ton.api.dht/DhtStore.value|{}value[0]
        final fun <get-value>(): org.ton.api.dht/DhtValue // org.ton.api.dht/DhtStore.value.<get-value>|<get-value>(){}[0]

    final fun component1(): org.ton.api.dht/DhtValue // org.ton.api.dht/DhtStore.component1|component1(){}[0]
    final fun copy(org.ton.api.dht/DhtValue = ...): org.ton.api.dht/DhtStore // org.ton.api.dht/DhtStore.copy|copy(org.ton.api.dht.DhtValue){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.dht/DhtStore.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.dht/DhtStore.hashCode|hashCode(){}[0]
    final fun resultTlCodec(): org.ton.tl/TlCodec<org.ton.api.dht/DhtStored> // org.ton.api.dht/DhtStore.resultTlCodec|resultTlCodec(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.dht/DhtStore> // org.ton.api.dht/DhtStore.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.api.dht/DhtStore.toString|toString(){}[0]

    final object Companion : org.ton.tl/TlCodec<org.ton.api.dht/DhtStore> { // org.ton.api.dht/DhtStore.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.api.dht/DhtStore // org.ton.api.dht/DhtStore.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.api.dht/DhtStore // org.ton.api.dht/DhtStore.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.api.dht/DhtStore // org.ton.api.dht/DhtStore.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.dht/DhtStore // org.ton.api.dht/DhtStore.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.api.dht/DhtStore // org.ton.api.dht/DhtStore.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.api.dht/DhtStore // org.ton.api.dht/DhtStore.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.api.dht/DhtStore // org.ton.api.dht/DhtStore.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.api.dht/DhtStore // org.ton.api.dht/DhtStore.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.api.dht/DhtStore) // org.ton.api.dht/DhtStore.Companion.encode|encode(kotlinx.io.Sink;org.ton.api.dht.DhtStore){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.dht/DhtStore) // org.ton.api.dht/DhtStore.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.dht.DhtStore){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.api.dht/DhtStore) // org.ton.api.dht/DhtStore.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.api.dht.DhtStore){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.api.dht/DhtStore) // org.ton.api.dht/DhtStore.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.api.dht.DhtStore){}[0]
        final fun encodeToByteArray(org.ton.api.dht/DhtStore, kotlin/Boolean): kotlin/ByteArray // org.ton.api.dht/DhtStore.Companion.encodeToByteArray|encodeToByteArray(org.ton.api.dht.DhtStore;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.api.dht/DhtStore, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.api.dht/DhtStore.Companion.encodeToByteString|encodeToByteString(org.ton.api.dht.DhtStore;kotlin.Boolean){}[0]
        final fun hash(org.ton.api.dht/DhtStore): kotlin/ByteArray // org.ton.api.dht/DhtStore.Companion.hash|hash(org.ton.api.dht.DhtStore){}[0]
    }
}

final class org.ton.api.dht/DhtValue : org.ton.api/SignedTlObject<org.ton.api.dht/DhtValue> { // org.ton.api.dht/DhtValue|null[0]
    constructor <init>(org.ton.api.dht/DhtKeyDescription, kotlinx.io.bytestring/ByteString, kotlin/Int, kotlinx.io.bytestring/ByteString = ...) // org.ton.api.dht/DhtValue.<init>|<init>(org.ton.api.dht.DhtKeyDescription;kotlinx.io.bytestring.ByteString;kotlin.Int;kotlinx.io.bytestring.ByteString){}[0]

    final val key // org.ton.api.dht/DhtValue.key|{}key[0]
        final fun <get-key>(): org.ton.api.dht/DhtKeyDescription // org.ton.api.dht/DhtValue.key.<get-key>|<get-key>(){}[0]
    final val signature // org.ton.api.dht/DhtValue.signature|{}signature[0]
        final fun <get-signature>(): kotlinx.io.bytestring/ByteString // org.ton.api.dht/DhtValue.signature.<get-signature>|<get-signature>(){}[0]
    final val ttl // org.ton.api.dht/DhtValue.ttl|{}ttl[0]
        final fun <get-ttl>(): kotlin/Int // org.ton.api.dht/DhtValue.ttl.<get-ttl>|<get-ttl>(){}[0]
    final val value // org.ton.api.dht/DhtValue.value|{}value[0]
        final fun <get-value>(): kotlinx.io.bytestring/ByteString // org.ton.api.dht/DhtValue.value.<get-value>|<get-value>(){}[0]

    final fun component1(): org.ton.api.dht/DhtKeyDescription // org.ton.api.dht/DhtValue.component1|component1(){}[0]
    final fun component2(): kotlinx.io.bytestring/ByteString // org.ton.api.dht/DhtValue.component2|component2(){}[0]
    final fun component3(): kotlin/Int // org.ton.api.dht/DhtValue.component3|component3(){}[0]
    final fun component4(): kotlinx.io.bytestring/ByteString // org.ton.api.dht/DhtValue.component4|component4(){}[0]
    final fun copy(org.ton.api.dht/DhtKeyDescription = ..., kotlinx.io.bytestring/ByteString = ..., kotlin/Int = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.api.dht/DhtValue // org.ton.api.dht/DhtValue.copy|copy(org.ton.api.dht.DhtKeyDescription;kotlinx.io.bytestring.ByteString;kotlin.Int;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.dht/DhtValue.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.dht/DhtValue.hashCode|hashCode(){}[0]
    final fun signed(org.ton.kotlin.crypto/Signer): org.ton.api.dht/DhtValue // org.ton.api.dht/DhtValue.signed|signed(org.ton.kotlin.crypto.Signer){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.dht/DhtValue> // org.ton.api.dht/DhtValue.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.api.dht/DhtValue.toString|toString(){}[0]
    final fun verify(org.ton.kotlin.crypto/SignatureVerifier): kotlin/Boolean // org.ton.api.dht/DhtValue.verify|verify(org.ton.kotlin.crypto.SignatureVerifier){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.dht/DhtValue> { // org.ton.api.dht/DhtValue.$serializer|null[0]
        final val descriptor // org.ton.api.dht/DhtValue.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.dht/DhtValue.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.dht/DhtValue.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.dht/DhtValue // org.ton.api.dht/DhtValue.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.dht/DhtValue) // org.ton.api.dht/DhtValue.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.dht.DhtValue){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.api.dht/DhtValue> { // org.ton.api.dht/DhtValue.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.api.dht/DhtValue // org.ton.api.dht/DhtValue.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.api.dht/DhtValue // org.ton.api.dht/DhtValue.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.api.dht/DhtValue // org.ton.api.dht/DhtValue.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.dht/DhtValue // org.ton.api.dht/DhtValue.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.api.dht/DhtValue // org.ton.api.dht/DhtValue.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.api.dht/DhtValue // org.ton.api.dht/DhtValue.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.api.dht/DhtValue // org.ton.api.dht/DhtValue.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.api.dht/DhtValue // org.ton.api.dht/DhtValue.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.api.dht/DhtValue) // org.ton.api.dht/DhtValue.Companion.encode|encode(kotlinx.io.Sink;org.ton.api.dht.DhtValue){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.dht/DhtValue) // org.ton.api.dht/DhtValue.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.dht.DhtValue){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.api.dht/DhtValue) // org.ton.api.dht/DhtValue.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.api.dht.DhtValue){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.api.dht/DhtValue) // org.ton.api.dht/DhtValue.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.api.dht.DhtValue){}[0]
        final fun encodeToByteArray(org.ton.api.dht/DhtValue, kotlin/Boolean): kotlin/ByteArray // org.ton.api.dht/DhtValue.Companion.encodeToByteArray|encodeToByteArray(org.ton.api.dht.DhtValue;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.api.dht/DhtValue, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.api.dht/DhtValue.Companion.encodeToByteString|encodeToByteString(org.ton.api.dht.DhtValue;kotlin.Boolean){}[0]
        final fun hash(org.ton.api.dht/DhtValue): kotlin/ByteArray // org.ton.api.dht/DhtValue.Companion.hash|hash(org.ton.api.dht.DhtValue){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.dht/DhtValue> // org.ton.api.dht/DhtValue.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.dht/DhtValueFound : org.ton.api.dht/DhtValueResult { // org.ton.api.dht/DhtValueFound|null[0]
    constructor <init>(org.ton.api.dht/DhtValue) // org.ton.api.dht/DhtValueFound.<init>|<init>(org.ton.api.dht.DhtValue){}[0]

    final val value // org.ton.api.dht/DhtValueFound.value|{}value[0]
        final fun <get-value>(): org.ton.api.dht/DhtValue // org.ton.api.dht/DhtValueFound.value.<get-value>|<get-value>(){}[0]

    final fun component1(): org.ton.api.dht/DhtValue // org.ton.api.dht/DhtValueFound.component1|component1(){}[0]
    final fun copy(org.ton.api.dht/DhtValue = ...): org.ton.api.dht/DhtValueFound // org.ton.api.dht/DhtValueFound.copy|copy(org.ton.api.dht.DhtValue){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.dht/DhtValueFound.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.dht/DhtValueFound.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.dht/DhtValueFound.toString|toString(){}[0]
    final fun valueOrNull(): org.ton.api.dht/DhtValue // org.ton.api.dht/DhtValueFound.valueOrNull|valueOrNull(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.dht/DhtValueFound> { // org.ton.api.dht/DhtValueFound.$serializer|null[0]
        final val descriptor // org.ton.api.dht/DhtValueFound.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.dht/DhtValueFound.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.dht/DhtValueFound.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.dht/DhtValueFound // org.ton.api.dht/DhtValueFound.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.dht/DhtValueFound) // org.ton.api.dht/DhtValueFound.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.dht.DhtValueFound){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.dht/DhtValueFound> { // org.ton.api.dht/DhtValueFound.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.dht/DhtValueFound // org.ton.api.dht/DhtValueFound.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.dht/DhtValueFound) // org.ton.api.dht/DhtValueFound.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.dht.DhtValueFound){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.dht/DhtValueFound> // org.ton.api.dht/DhtValueFound.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.dht/DhtValueNotFound : org.ton.api.dht/DhtValueResult { // org.ton.api.dht/DhtValueNotFound|null[0]
    constructor <init>(org.ton.api.dht/DhtNodes) // org.ton.api.dht/DhtValueNotFound.<init>|<init>(org.ton.api.dht.DhtNodes){}[0]

    final val nodes // org.ton.api.dht/DhtValueNotFound.nodes|{}nodes[0]
        final fun <get-nodes>(): org.ton.api.dht/DhtNodes // org.ton.api.dht/DhtValueNotFound.nodes.<get-nodes>|<get-nodes>(){}[0]

    final fun component1(): org.ton.api.dht/DhtNodes // org.ton.api.dht/DhtValueNotFound.component1|component1(){}[0]
    final fun copy(org.ton.api.dht/DhtNodes = ...): org.ton.api.dht/DhtValueNotFound // org.ton.api.dht/DhtValueNotFound.copy|copy(org.ton.api.dht.DhtNodes){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.dht/DhtValueNotFound.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.dht/DhtValueNotFound.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.dht/DhtValueNotFound.toString|toString(){}[0]
    final fun valueOrNull(): org.ton.api.dht/DhtValue? // org.ton.api.dht/DhtValueNotFound.valueOrNull|valueOrNull(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.dht/DhtValueNotFound> { // org.ton.api.dht/DhtValueNotFound.$serializer|null[0]
        final val descriptor // org.ton.api.dht/DhtValueNotFound.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.dht/DhtValueNotFound.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.dht/DhtValueNotFound.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.dht/DhtValueNotFound // org.ton.api.dht/DhtValueNotFound.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.dht/DhtValueNotFound) // org.ton.api.dht/DhtValueNotFound.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.dht.DhtValueNotFound){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.dht/DhtValueNotFound> { // org.ton.api.dht/DhtValueNotFound.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.dht/DhtValueNotFound // org.ton.api.dht/DhtValueNotFound.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.dht/DhtValueNotFound) // org.ton.api.dht/DhtValueNotFound.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.dht.DhtValueNotFound){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.dht/DhtValueNotFound> // org.ton.api.dht/DhtValueNotFound.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.exception/TvmException : kotlin/RuntimeException { // org.ton.api.exception/TvmException|null[0]
    constructor <init>(kotlin/Int, kotlin/String? = ..., kotlin/Throwable? = ...) // org.ton.api.exception/TvmException.<init>|<init>(kotlin.Int;kotlin.String?;kotlin.Throwable?){}[0]

    final val code // org.ton.api.exception/TvmException.code|{}code[0]
        final fun <get-code>(): kotlin/Int // org.ton.api.exception/TvmException.code.<get-code>|<get-code>(){}[0]
}

final class org.ton.api.fec/FecRaptorQ : org.ton.api.fec/FecType { // org.ton.api.fec/FecRaptorQ|null[0]
    constructor <init>(kotlin/Int, kotlin/Int, kotlin/Int) // org.ton.api.fec/FecRaptorQ.<init>|<init>(kotlin.Int;kotlin.Int;kotlin.Int){}[0]

    final val dataSize // org.ton.api.fec/FecRaptorQ.dataSize|{}dataSize[0]
        final fun <get-dataSize>(): kotlin/Int // org.ton.api.fec/FecRaptorQ.dataSize.<get-dataSize>|<get-dataSize>(){}[0]
    final val symbolCount // org.ton.api.fec/FecRaptorQ.symbolCount|{}symbolCount[0]
        final fun <get-symbolCount>(): kotlin/Int // org.ton.api.fec/FecRaptorQ.symbolCount.<get-symbolCount>|<get-symbolCount>(){}[0]
    final val symbolSize // org.ton.api.fec/FecRaptorQ.symbolSize|{}symbolSize[0]
        final fun <get-symbolSize>(): kotlin/Int // org.ton.api.fec/FecRaptorQ.symbolSize.<get-symbolSize>|<get-symbolSize>(){}[0]

    final fun component1(): kotlin/Int // org.ton.api.fec/FecRaptorQ.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.api.fec/FecRaptorQ.component2|component2(){}[0]
    final fun component3(): kotlin/Int // org.ton.api.fec/FecRaptorQ.component3|component3(){}[0]
    final fun copy(kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): org.ton.api.fec/FecRaptorQ // org.ton.api.fec/FecRaptorQ.copy|copy(kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.fec/FecRaptorQ.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.fec/FecRaptorQ.hashCode|hashCode(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.fec/FecRaptorQ> // org.ton.api.fec/FecRaptorQ.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.api.fec/FecRaptorQ.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.fec/FecRaptorQ> { // org.ton.api.fec/FecRaptorQ.$serializer|null[0]
        final val descriptor // org.ton.api.fec/FecRaptorQ.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.fec/FecRaptorQ.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.fec/FecRaptorQ.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.fec/FecRaptorQ // org.ton.api.fec/FecRaptorQ.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.fec/FecRaptorQ) // org.ton.api.fec/FecRaptorQ.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.fec.FecRaptorQ){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.fec/FecRaptorQ> { // org.ton.api.fec/FecRaptorQ.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.fec/FecRaptorQ // org.ton.api.fec/FecRaptorQ.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.fec/FecRaptorQ) // org.ton.api.fec/FecRaptorQ.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.fec.FecRaptorQ){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.fec/FecRaptorQ> // org.ton.api.fec/FecRaptorQ.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.http.functions/HttpGetNextPayloadPart : org.ton.tl/TLFunction<org.ton.api.http.functions/HttpGetNextPayloadPart, org.ton.api.http/HttpPayloadPart> { // org.ton.api.http.functions/HttpGetNextPayloadPart|null[0]
    constructor <init>(kotlinx.io.bytestring/ByteString, kotlin/Int, kotlin/Int) // org.ton.api.http.functions/HttpGetNextPayloadPart.<init>|<init>(kotlinx.io.bytestring.ByteString;kotlin.Int;kotlin.Int){}[0]

    final val id // org.ton.api.http.functions/HttpGetNextPayloadPart.id|{}id[0]
        final fun <get-id>(): kotlinx.io.bytestring/ByteString // org.ton.api.http.functions/HttpGetNextPayloadPart.id.<get-id>|<get-id>(){}[0]
    final val maxChunkSize // org.ton.api.http.functions/HttpGetNextPayloadPart.maxChunkSize|{}maxChunkSize[0]
        final fun <get-maxChunkSize>(): kotlin/Int // org.ton.api.http.functions/HttpGetNextPayloadPart.maxChunkSize.<get-maxChunkSize>|<get-maxChunkSize>(){}[0]
    final val seqno // org.ton.api.http.functions/HttpGetNextPayloadPart.seqno|{}seqno[0]
        final fun <get-seqno>(): kotlin/Int // org.ton.api.http.functions/HttpGetNextPayloadPart.seqno.<get-seqno>|<get-seqno>(){}[0]

    final fun component1(): kotlinx.io.bytestring/ByteString // org.ton.api.http.functions/HttpGetNextPayloadPart.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.api.http.functions/HttpGetNextPayloadPart.component2|component2(){}[0]
    final fun component3(): kotlin/Int // org.ton.api.http.functions/HttpGetNextPayloadPart.component3|component3(){}[0]
    final fun copy(kotlinx.io.bytestring/ByteString = ..., kotlin/Int = ..., kotlin/Int = ...): org.ton.api.http.functions/HttpGetNextPayloadPart // org.ton.api.http.functions/HttpGetNextPayloadPart.copy|copy(kotlinx.io.bytestring.ByteString;kotlin.Int;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.http.functions/HttpGetNextPayloadPart.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.http.functions/HttpGetNextPayloadPart.hashCode|hashCode(){}[0]
    final fun resultTlCodec(): org.ton.tl/TlCodec<org.ton.api.http/HttpPayloadPart> // org.ton.api.http.functions/HttpGetNextPayloadPart.resultTlCodec|resultTlCodec(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.http.functions/HttpGetNextPayloadPart> // org.ton.api.http.functions/HttpGetNextPayloadPart.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.api.http.functions/HttpGetNextPayloadPart.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.http.functions/HttpGetNextPayloadPart> { // org.ton.api.http.functions/HttpGetNextPayloadPart.$serializer|null[0]
        final val descriptor // org.ton.api.http.functions/HttpGetNextPayloadPart.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.http.functions/HttpGetNextPayloadPart.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.http.functions/HttpGetNextPayloadPart.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.http.functions/HttpGetNextPayloadPart // org.ton.api.http.functions/HttpGetNextPayloadPart.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.http.functions/HttpGetNextPayloadPart) // org.ton.api.http.functions/HttpGetNextPayloadPart.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.http.functions.HttpGetNextPayloadPart){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.api.http.functions/HttpGetNextPayloadPart> { // org.ton.api.http.functions/HttpGetNextPayloadPart.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.api.http.functions/HttpGetNextPayloadPart // org.ton.api.http.functions/HttpGetNextPayloadPart.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.api.http.functions/HttpGetNextPayloadPart // org.ton.api.http.functions/HttpGetNextPayloadPart.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.api.http.functions/HttpGetNextPayloadPart // org.ton.api.http.functions/HttpGetNextPayloadPart.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.http.functions/HttpGetNextPayloadPart // org.ton.api.http.functions/HttpGetNextPayloadPart.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.api.http.functions/HttpGetNextPayloadPart // org.ton.api.http.functions/HttpGetNextPayloadPart.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.api.http.functions/HttpGetNextPayloadPart // org.ton.api.http.functions/HttpGetNextPayloadPart.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.api.http.functions/HttpGetNextPayloadPart // org.ton.api.http.functions/HttpGetNextPayloadPart.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.api.http.functions/HttpGetNextPayloadPart // org.ton.api.http.functions/HttpGetNextPayloadPart.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.api.http.functions/HttpGetNextPayloadPart) // org.ton.api.http.functions/HttpGetNextPayloadPart.Companion.encode|encode(kotlinx.io.Sink;org.ton.api.http.functions.HttpGetNextPayloadPart){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.http.functions/HttpGetNextPayloadPart) // org.ton.api.http.functions/HttpGetNextPayloadPart.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.http.functions.HttpGetNextPayloadPart){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.api.http.functions/HttpGetNextPayloadPart) // org.ton.api.http.functions/HttpGetNextPayloadPart.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.api.http.functions.HttpGetNextPayloadPart){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.api.http.functions/HttpGetNextPayloadPart) // org.ton.api.http.functions/HttpGetNextPayloadPart.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.api.http.functions.HttpGetNextPayloadPart){}[0]
        final fun encodeToByteArray(org.ton.api.http.functions/HttpGetNextPayloadPart, kotlin/Boolean): kotlin/ByteArray // org.ton.api.http.functions/HttpGetNextPayloadPart.Companion.encodeToByteArray|encodeToByteArray(org.ton.api.http.functions.HttpGetNextPayloadPart;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.api.http.functions/HttpGetNextPayloadPart, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.api.http.functions/HttpGetNextPayloadPart.Companion.encodeToByteString|encodeToByteString(org.ton.api.http.functions.HttpGetNextPayloadPart;kotlin.Boolean){}[0]
        final fun hash(org.ton.api.http.functions/HttpGetNextPayloadPart): kotlin/ByteArray // org.ton.api.http.functions/HttpGetNextPayloadPart.Companion.hash|hash(org.ton.api.http.functions.HttpGetNextPayloadPart){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.http.functions/HttpGetNextPayloadPart> // org.ton.api.http.functions/HttpGetNextPayloadPart.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.http.functions/HttpRequest : org.ton.tl/TLFunction<org.ton.api.http.functions/HttpRequest, org.ton.api.http/HttpResponse> { // org.ton.api.http.functions/HttpRequest|null[0]
    constructor <init>(kotlinx.io.bytestring/ByteString, kotlin/String, kotlin/String, kotlin/String, kotlin.collections/Collection<org.ton.api.http/HttpHeader>) // org.ton.api.http.functions/HttpRequest.<init>|<init>(kotlinx.io.bytestring.ByteString;kotlin.String;kotlin.String;kotlin.String;kotlin.collections.Collection<org.ton.api.http.HttpHeader>){}[0]

    final val headers // org.ton.api.http.functions/HttpRequest.headers|{}headers[0]
        final fun <get-headers>(): kotlin.collections/Collection<org.ton.api.http/HttpHeader> // org.ton.api.http.functions/HttpRequest.headers.<get-headers>|<get-headers>(){}[0]
    final val http_version // org.ton.api.http.functions/HttpRequest.http_version|{}http_version[0]
        final fun <get-http_version>(): kotlin/String // org.ton.api.http.functions/HttpRequest.http_version.<get-http_version>|<get-http_version>(){}[0]
    final val id // org.ton.api.http.functions/HttpRequest.id|{}id[0]
        final fun <get-id>(): kotlinx.io.bytestring/ByteString // org.ton.api.http.functions/HttpRequest.id.<get-id>|<get-id>(){}[0]
    final val method // org.ton.api.http.functions/HttpRequest.method|{}method[0]
        final fun <get-method>(): kotlin/String // org.ton.api.http.functions/HttpRequest.method.<get-method>|<get-method>(){}[0]
    final val url // org.ton.api.http.functions/HttpRequest.url|{}url[0]
        final fun <get-url>(): kotlin/String // org.ton.api.http.functions/HttpRequest.url.<get-url>|<get-url>(){}[0]

    final fun component1(): kotlinx.io.bytestring/ByteString // org.ton.api.http.functions/HttpRequest.component1|component1(){}[0]
    final fun component2(): kotlin/String // org.ton.api.http.functions/HttpRequest.component2|component2(){}[0]
    final fun component3(): kotlin/String // org.ton.api.http.functions/HttpRequest.component3|component3(){}[0]
    final fun component4(): kotlin/String // org.ton.api.http.functions/HttpRequest.component4|component4(){}[0]
    final fun component5(): kotlin.collections/Collection<org.ton.api.http/HttpHeader> // org.ton.api.http.functions/HttpRequest.component5|component5(){}[0]
    final fun copy(kotlinx.io.bytestring/ByteString = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin.collections/Collection<org.ton.api.http/HttpHeader> = ...): org.ton.api.http.functions/HttpRequest // org.ton.api.http.functions/HttpRequest.copy|copy(kotlinx.io.bytestring.ByteString;kotlin.String;kotlin.String;kotlin.String;kotlin.collections.Collection<org.ton.api.http.HttpHeader>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.http.functions/HttpRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.http.functions/HttpRequest.hashCode|hashCode(){}[0]
    final fun resultTlCodec(): org.ton.tl/TlCodec<org.ton.api.http/HttpResponse> // org.ton.api.http.functions/HttpRequest.resultTlCodec|resultTlCodec(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.http.functions/HttpRequest> // org.ton.api.http.functions/HttpRequest.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.api.http.functions/HttpRequest.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.http.functions/HttpRequest> { // org.ton.api.http.functions/HttpRequest.$serializer|null[0]
        final val descriptor // org.ton.api.http.functions/HttpRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.http.functions/HttpRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.http.functions/HttpRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.http.functions/HttpRequest // org.ton.api.http.functions/HttpRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.http.functions/HttpRequest) // org.ton.api.http.functions/HttpRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.http.functions.HttpRequest){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.http.functions/HttpRequest> { // org.ton.api.http.functions/HttpRequest.Companion|null[0]
        final val $childSerializers // org.ton.api.http.functions/HttpRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun decode(org.ton.tl/TlReader): org.ton.api.http.functions/HttpRequest // org.ton.api.http.functions/HttpRequest.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.http.functions/HttpRequest) // org.ton.api.http.functions/HttpRequest.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.http.functions.HttpRequest){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.http.functions/HttpRequest> // org.ton.api.http.functions/HttpRequest.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.http.server/HttpServerDnsEntry { // org.ton.api.http.server/HttpServerDnsEntry|null[0]
    constructor <init>(kotlin/String, org.ton.api.adnl/AdnlIdShort) // org.ton.api.http.server/HttpServerDnsEntry.<init>|<init>(kotlin.String;org.ton.api.adnl.AdnlIdShort){}[0]

    final val addr // org.ton.api.http.server/HttpServerDnsEntry.addr|{}addr[0]
        final fun <get-addr>(): org.ton.api.adnl/AdnlIdShort // org.ton.api.http.server/HttpServerDnsEntry.addr.<get-addr>|<get-addr>(){}[0]
    final val domain // org.ton.api.http.server/HttpServerDnsEntry.domain|{}domain[0]
        final fun <get-domain>(): kotlin/String // org.ton.api.http.server/HttpServerDnsEntry.domain.<get-domain>|<get-domain>(){}[0]

    final fun component1(): kotlin/String // org.ton.api.http.server/HttpServerDnsEntry.component1|component1(){}[0]
    final fun component2(): org.ton.api.adnl/AdnlIdShort // org.ton.api.http.server/HttpServerDnsEntry.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., org.ton.api.adnl/AdnlIdShort = ...): org.ton.api.http.server/HttpServerDnsEntry // org.ton.api.http.server/HttpServerDnsEntry.copy|copy(kotlin.String;org.ton.api.adnl.AdnlIdShort){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.http.server/HttpServerDnsEntry.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.http.server/HttpServerDnsEntry.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.http.server/HttpServerDnsEntry.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.http.server/HttpServerDnsEntry> { // org.ton.api.http.server/HttpServerDnsEntry.$serializer|null[0]
        final val descriptor // org.ton.api.http.server/HttpServerDnsEntry.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.http.server/HttpServerDnsEntry.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.http.server/HttpServerDnsEntry.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.http.server/HttpServerDnsEntry // org.ton.api.http.server/HttpServerDnsEntry.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.http.server/HttpServerDnsEntry) // org.ton.api.http.server/HttpServerDnsEntry.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.http.server.HttpServerDnsEntry){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.api.http.server/HttpServerDnsEntry> { // org.ton.api.http.server/HttpServerDnsEntry.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.api.http.server/HttpServerDnsEntry // org.ton.api.http.server/HttpServerDnsEntry.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.api.http.server/HttpServerDnsEntry // org.ton.api.http.server/HttpServerDnsEntry.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.api.http.server/HttpServerDnsEntry // org.ton.api.http.server/HttpServerDnsEntry.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.http.server/HttpServerDnsEntry // org.ton.api.http.server/HttpServerDnsEntry.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.api.http.server/HttpServerDnsEntry // org.ton.api.http.server/HttpServerDnsEntry.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.api.http.server/HttpServerDnsEntry // org.ton.api.http.server/HttpServerDnsEntry.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.api.http.server/HttpServerDnsEntry // org.ton.api.http.server/HttpServerDnsEntry.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.api.http.server/HttpServerDnsEntry // org.ton.api.http.server/HttpServerDnsEntry.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.api.http.server/HttpServerDnsEntry) // org.ton.api.http.server/HttpServerDnsEntry.Companion.encode|encode(kotlinx.io.Sink;org.ton.api.http.server.HttpServerDnsEntry){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.http.server/HttpServerDnsEntry) // org.ton.api.http.server/HttpServerDnsEntry.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.http.server.HttpServerDnsEntry){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.api.http.server/HttpServerDnsEntry) // org.ton.api.http.server/HttpServerDnsEntry.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.api.http.server.HttpServerDnsEntry){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.api.http.server/HttpServerDnsEntry) // org.ton.api.http.server/HttpServerDnsEntry.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.api.http.server.HttpServerDnsEntry){}[0]
        final fun encodeToByteArray(org.ton.api.http.server/HttpServerDnsEntry, kotlin/Boolean): kotlin/ByteArray // org.ton.api.http.server/HttpServerDnsEntry.Companion.encodeToByteArray|encodeToByteArray(org.ton.api.http.server.HttpServerDnsEntry;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.api.http.server/HttpServerDnsEntry, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.api.http.server/HttpServerDnsEntry.Companion.encodeToByteString|encodeToByteString(org.ton.api.http.server.HttpServerDnsEntry;kotlin.Boolean){}[0]
        final fun hash(org.ton.api.http.server/HttpServerDnsEntry): kotlin/ByteArray // org.ton.api.http.server/HttpServerDnsEntry.Companion.hash|hash(org.ton.api.http.server.HttpServerDnsEntry){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.http.server/HttpServerDnsEntry> // org.ton.api.http.server/HttpServerDnsEntry.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.http.server/HttpServerHost { // org.ton.api.http.server/HttpServerHost|null[0]
    constructor <init>(kotlin.collections/Collection<kotlin/String>, kotlin/Int, kotlin/Int, org.ton.api.adnl/AdnlIdShort) // org.ton.api.http.server/HttpServerHost.<init>|<init>(kotlin.collections.Collection<kotlin.String>;kotlin.Int;kotlin.Int;org.ton.api.adnl.AdnlIdShort){}[0]

    final val adnlId // org.ton.api.http.server/HttpServerHost.adnlId|{}adnlId[0]
        final fun <get-adnlId>(): org.ton.api.adnl/AdnlIdShort // org.ton.api.http.server/HttpServerHost.adnlId.<get-adnlId>|<get-adnlId>(){}[0]
    final val domains // org.ton.api.http.server/HttpServerHost.domains|{}domains[0]
        final fun <get-domains>(): kotlin.collections/Collection<kotlin/String> // org.ton.api.http.server/HttpServerHost.domains.<get-domains>|<get-domains>(){}[0]
    final val ip // org.ton.api.http.server/HttpServerHost.ip|{}ip[0]
        final fun <get-ip>(): kotlin/Int // org.ton.api.http.server/HttpServerHost.ip.<get-ip>|<get-ip>(){}[0]
    final val port // org.ton.api.http.server/HttpServerHost.port|{}port[0]
        final fun <get-port>(): kotlin/Int // org.ton.api.http.server/HttpServerHost.port.<get-port>|<get-port>(){}[0]

    final fun component1(): kotlin.collections/Collection<kotlin/String> // org.ton.api.http.server/HttpServerHost.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.api.http.server/HttpServerHost.component2|component2(){}[0]
    final fun component3(): kotlin/Int // org.ton.api.http.server/HttpServerHost.component3|component3(){}[0]
    final fun component4(): org.ton.api.adnl/AdnlIdShort // org.ton.api.http.server/HttpServerHost.component4|component4(){}[0]
    final fun copy(kotlin.collections/Collection<kotlin/String> = ..., kotlin/Int = ..., kotlin/Int = ..., org.ton.api.adnl/AdnlIdShort = ...): org.ton.api.http.server/HttpServerHost // org.ton.api.http.server/HttpServerHost.copy|copy(kotlin.collections.Collection<kotlin.String>;kotlin.Int;kotlin.Int;org.ton.api.adnl.AdnlIdShort){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.http.server/HttpServerHost.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.http.server/HttpServerHost.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.http.server/HttpServerHost.toString|toString(){}[0]

    final object Companion : org.ton.tl/TlCodec<org.ton.api.http.server/HttpServerHost> { // org.ton.api.http.server/HttpServerHost.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.api.http.server/HttpServerHost // org.ton.api.http.server/HttpServerHost.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.api.http.server/HttpServerHost // org.ton.api.http.server/HttpServerHost.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.api.http.server/HttpServerHost // org.ton.api.http.server/HttpServerHost.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.http.server/HttpServerHost // org.ton.api.http.server/HttpServerHost.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.api.http.server/HttpServerHost // org.ton.api.http.server/HttpServerHost.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.api.http.server/HttpServerHost // org.ton.api.http.server/HttpServerHost.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.api.http.server/HttpServerHost // org.ton.api.http.server/HttpServerHost.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.api.http.server/HttpServerHost // org.ton.api.http.server/HttpServerHost.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.api.http.server/HttpServerHost) // org.ton.api.http.server/HttpServerHost.Companion.encode|encode(kotlinx.io.Sink;org.ton.api.http.server.HttpServerHost){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.http.server/HttpServerHost) // org.ton.api.http.server/HttpServerHost.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.http.server.HttpServerHost){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.api.http.server/HttpServerHost) // org.ton.api.http.server/HttpServerHost.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.api.http.server.HttpServerHost){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.api.http.server/HttpServerHost) // org.ton.api.http.server/HttpServerHost.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.api.http.server.HttpServerHost){}[0]
        final fun encodeToByteArray(org.ton.api.http.server/HttpServerHost, kotlin/Boolean): kotlin/ByteArray // org.ton.api.http.server/HttpServerHost.Companion.encodeToByteArray|encodeToByteArray(org.ton.api.http.server.HttpServerHost;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.api.http.server/HttpServerHost, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.api.http.server/HttpServerHost.Companion.encodeToByteString|encodeToByteString(org.ton.api.http.server.HttpServerHost;kotlin.Boolean){}[0]
        final fun hash(org.ton.api.http.server/HttpServerHost): kotlin/ByteArray // org.ton.api.http.server/HttpServerHost.Companion.hash|hash(org.ton.api.http.server.HttpServerHost){}[0]
    }
}

final class org.ton.api.http/HttpHeader { // org.ton.api.http/HttpHeader|null[0]
    constructor <init>(kotlin/String, kotlin/String) // org.ton.api.http/HttpHeader.<init>|<init>(kotlin.String;kotlin.String){}[0]

    final val name // org.ton.api.http/HttpHeader.name|{}name[0]
        final fun <get-name>(): kotlin/String // org.ton.api.http/HttpHeader.name.<get-name>|<get-name>(){}[0]
    final val value // org.ton.api.http/HttpHeader.value|{}value[0]
        final fun <get-value>(): kotlin/String // org.ton.api.http/HttpHeader.value.<get-value>|<get-value>(){}[0]

    final fun component1(): kotlin/String // org.ton.api.http/HttpHeader.component1|component1(){}[0]
    final fun component2(): kotlin/String // org.ton.api.http/HttpHeader.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ...): org.ton.api.http/HttpHeader // org.ton.api.http/HttpHeader.copy|copy(kotlin.String;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.http/HttpHeader.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.http/HttpHeader.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.http/HttpHeader.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.http/HttpHeader> { // org.ton.api.http/HttpHeader.$serializer|null[0]
        final val descriptor // org.ton.api.http/HttpHeader.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.http/HttpHeader.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.http/HttpHeader.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.http/HttpHeader // org.ton.api.http/HttpHeader.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.http/HttpHeader) // org.ton.api.http/HttpHeader.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.http.HttpHeader){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.api.http/HttpHeader> { // org.ton.api.http/HttpHeader.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.api.http/HttpHeader // org.ton.api.http/HttpHeader.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.api.http/HttpHeader // org.ton.api.http/HttpHeader.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.api.http/HttpHeader // org.ton.api.http/HttpHeader.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.http/HttpHeader // org.ton.api.http/HttpHeader.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.api.http/HttpHeader // org.ton.api.http/HttpHeader.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.api.http/HttpHeader // org.ton.api.http/HttpHeader.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.api.http/HttpHeader // org.ton.api.http/HttpHeader.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.api.http/HttpHeader // org.ton.api.http/HttpHeader.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.api.http/HttpHeader) // org.ton.api.http/HttpHeader.Companion.encode|encode(kotlinx.io.Sink;org.ton.api.http.HttpHeader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.http/HttpHeader) // org.ton.api.http/HttpHeader.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.http.HttpHeader){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.api.http/HttpHeader) // org.ton.api.http/HttpHeader.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.api.http.HttpHeader){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.api.http/HttpHeader) // org.ton.api.http/HttpHeader.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.api.http.HttpHeader){}[0]
        final fun encodeToByteArray(org.ton.api.http/HttpHeader, kotlin/Boolean): kotlin/ByteArray // org.ton.api.http/HttpHeader.Companion.encodeToByteArray|encodeToByteArray(org.ton.api.http.HttpHeader;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.api.http/HttpHeader, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.api.http/HttpHeader.Companion.encodeToByteString|encodeToByteString(org.ton.api.http.HttpHeader;kotlin.Boolean){}[0]
        final fun hash(org.ton.api.http/HttpHeader): kotlin/ByteArray // org.ton.api.http/HttpHeader.Companion.hash|hash(org.ton.api.http.HttpHeader){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.http/HttpHeader> // org.ton.api.http/HttpHeader.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.http/HttpPayloadPart : org.ton.tl/TlObject<org.ton.api.http/HttpPayloadPart> { // org.ton.api.http/HttpPayloadPart|null[0]
    constructor <init>(kotlinx.io.bytestring/ByteString, kotlin.collections/Collection<org.ton.api.http/HttpHeader>, kotlin/Boolean) // org.ton.api.http/HttpPayloadPart.<init>|<init>(kotlinx.io.bytestring.ByteString;kotlin.collections.Collection<org.ton.api.http.HttpHeader>;kotlin.Boolean){}[0]

    final val data // org.ton.api.http/HttpPayloadPart.data|{}data[0]
        final fun <get-data>(): kotlinx.io.bytestring/ByteString // org.ton.api.http/HttpPayloadPart.data.<get-data>|<get-data>(){}[0]
    final val last // org.ton.api.http/HttpPayloadPart.last|{}last[0]
        final fun <get-last>(): kotlin/Boolean // org.ton.api.http/HttpPayloadPart.last.<get-last>|<get-last>(){}[0]
    final val trailer // org.ton.api.http/HttpPayloadPart.trailer|{}trailer[0]
        final fun <get-trailer>(): kotlin.collections/Collection<org.ton.api.http/HttpHeader> // org.ton.api.http/HttpPayloadPart.trailer.<get-trailer>|<get-trailer>(){}[0]

    final fun component1(): kotlinx.io.bytestring/ByteString // org.ton.api.http/HttpPayloadPart.component1|component1(){}[0]
    final fun component2(): kotlin.collections/Collection<org.ton.api.http/HttpHeader> // org.ton.api.http/HttpPayloadPart.component2|component2(){}[0]
    final fun component3(): kotlin/Boolean // org.ton.api.http/HttpPayloadPart.component3|component3(){}[0]
    final fun copy(kotlinx.io.bytestring/ByteString = ..., kotlin.collections/Collection<org.ton.api.http/HttpHeader> = ..., kotlin/Boolean = ...): org.ton.api.http/HttpPayloadPart // org.ton.api.http/HttpPayloadPart.copy|copy(kotlinx.io.bytestring.ByteString;kotlin.collections.Collection<org.ton.api.http.HttpHeader>;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.http/HttpPayloadPart.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.http/HttpPayloadPart.hashCode|hashCode(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.http/HttpPayloadPart> // org.ton.api.http/HttpPayloadPart.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.api.http/HttpPayloadPart.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.http/HttpPayloadPart> { // org.ton.api.http/HttpPayloadPart.$serializer|null[0]
        final val descriptor // org.ton.api.http/HttpPayloadPart.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.http/HttpPayloadPart.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.http/HttpPayloadPart.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.http/HttpPayloadPart // org.ton.api.http/HttpPayloadPart.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.http/HttpPayloadPart) // org.ton.api.http/HttpPayloadPart.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.http.HttpPayloadPart){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.api.http/HttpPayloadPart> { // org.ton.api.http/HttpPayloadPart.Companion|null[0]
        final val $childSerializers // org.ton.api.http/HttpPayloadPart.Companion.$childSerializers|{}$childSerializers[0]

        final fun decode(kotlin/ByteArray): org.ton.api.http/HttpPayloadPart // org.ton.api.http/HttpPayloadPart.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.api.http/HttpPayloadPart // org.ton.api.http/HttpPayloadPart.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.api.http/HttpPayloadPart // org.ton.api.http/HttpPayloadPart.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.http/HttpPayloadPart // org.ton.api.http/HttpPayloadPart.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.api.http/HttpPayloadPart // org.ton.api.http/HttpPayloadPart.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.api.http/HttpPayloadPart // org.ton.api.http/HttpPayloadPart.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.api.http/HttpPayloadPart // org.ton.api.http/HttpPayloadPart.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.api.http/HttpPayloadPart // org.ton.api.http/HttpPayloadPart.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.api.http/HttpPayloadPart) // org.ton.api.http/HttpPayloadPart.Companion.encode|encode(kotlinx.io.Sink;org.ton.api.http.HttpPayloadPart){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.http/HttpPayloadPart) // org.ton.api.http/HttpPayloadPart.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.http.HttpPayloadPart){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.api.http/HttpPayloadPart) // org.ton.api.http/HttpPayloadPart.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.api.http.HttpPayloadPart){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.api.http/HttpPayloadPart) // org.ton.api.http/HttpPayloadPart.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.api.http.HttpPayloadPart){}[0]
        final fun encodeToByteArray(org.ton.api.http/HttpPayloadPart, kotlin/Boolean): kotlin/ByteArray // org.ton.api.http/HttpPayloadPart.Companion.encodeToByteArray|encodeToByteArray(org.ton.api.http.HttpPayloadPart;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.api.http/HttpPayloadPart, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.api.http/HttpPayloadPart.Companion.encodeToByteString|encodeToByteString(org.ton.api.http.HttpPayloadPart;kotlin.Boolean){}[0]
        final fun hash(org.ton.api.http/HttpPayloadPart): kotlin/ByteArray // org.ton.api.http/HttpPayloadPart.Companion.hash|hash(org.ton.api.http.HttpPayloadPart){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.http/HttpPayloadPart> // org.ton.api.http/HttpPayloadPart.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.http/HttpResponse : org.ton.tl/TlObject<org.ton.api.http/HttpResponse> { // org.ton.api.http/HttpResponse|null[0]
    constructor <init>(kotlin/String, kotlin/Int, kotlin/String, kotlin.collections/Collection<org.ton.api.http/HttpHeader>, kotlin/Boolean) // org.ton.api.http/HttpResponse.<init>|<init>(kotlin.String;kotlin.Int;kotlin.String;kotlin.collections.Collection<org.ton.api.http.HttpHeader>;kotlin.Boolean){}[0]

    final val headers // org.ton.api.http/HttpResponse.headers|{}headers[0]
        final fun <get-headers>(): kotlin.collections/Collection<org.ton.api.http/HttpHeader> // org.ton.api.http/HttpResponse.headers.<get-headers>|<get-headers>(){}[0]
    final val httpVersion // org.ton.api.http/HttpResponse.httpVersion|{}httpVersion[0]
        final fun <get-httpVersion>(): kotlin/String // org.ton.api.http/HttpResponse.httpVersion.<get-httpVersion>|<get-httpVersion>(){}[0]
    final val noPayload // org.ton.api.http/HttpResponse.noPayload|{}noPayload[0]
        final fun <get-noPayload>(): kotlin/Boolean // org.ton.api.http/HttpResponse.noPayload.<get-noPayload>|<get-noPayload>(){}[0]
    final val reason // org.ton.api.http/HttpResponse.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String // org.ton.api.http/HttpResponse.reason.<get-reason>|<get-reason>(){}[0]
    final val statusCode // org.ton.api.http/HttpResponse.statusCode|{}statusCode[0]
        final fun <get-statusCode>(): kotlin/Int // org.ton.api.http/HttpResponse.statusCode.<get-statusCode>|<get-statusCode>(){}[0]

    final fun component1(): kotlin/String // org.ton.api.http/HttpResponse.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.api.http/HttpResponse.component2|component2(){}[0]
    final fun component3(): kotlin/String // org.ton.api.http/HttpResponse.component3|component3(){}[0]
    final fun component4(): kotlin.collections/Collection<org.ton.api.http/HttpHeader> // org.ton.api.http/HttpResponse.component4|component4(){}[0]
    final fun component5(): kotlin/Boolean // org.ton.api.http/HttpResponse.component5|component5(){}[0]
    final fun copy(kotlin/String = ..., kotlin/Int = ..., kotlin/String = ..., kotlin.collections/Collection<org.ton.api.http/HttpHeader> = ..., kotlin/Boolean = ...): org.ton.api.http/HttpResponse // org.ton.api.http/HttpResponse.copy|copy(kotlin.String;kotlin.Int;kotlin.String;kotlin.collections.Collection<org.ton.api.http.HttpHeader>;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.http/HttpResponse.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.http/HttpResponse.hashCode|hashCode(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.http/HttpResponse> // org.ton.api.http/HttpResponse.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.api.http/HttpResponse.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.http/HttpResponse> { // org.ton.api.http/HttpResponse.$serializer|null[0]
        final val descriptor // org.ton.api.http/HttpResponse.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.http/HttpResponse.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.http/HttpResponse.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.http/HttpResponse // org.ton.api.http/HttpResponse.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.http/HttpResponse) // org.ton.api.http/HttpResponse.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.http.HttpResponse){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.api.http/HttpResponse> { // org.ton.api.http/HttpResponse.Companion|null[0]
        final val $childSerializers // org.ton.api.http/HttpResponse.Companion.$childSerializers|{}$childSerializers[0]

        final fun decode(kotlin/ByteArray): org.ton.api.http/HttpResponse // org.ton.api.http/HttpResponse.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.api.http/HttpResponse // org.ton.api.http/HttpResponse.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.api.http/HttpResponse // org.ton.api.http/HttpResponse.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.http/HttpResponse // org.ton.api.http/HttpResponse.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.api.http/HttpResponse // org.ton.api.http/HttpResponse.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.api.http/HttpResponse // org.ton.api.http/HttpResponse.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.api.http/HttpResponse // org.ton.api.http/HttpResponse.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.api.http/HttpResponse // org.ton.api.http/HttpResponse.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.api.http/HttpResponse) // org.ton.api.http/HttpResponse.Companion.encode|encode(kotlinx.io.Sink;org.ton.api.http.HttpResponse){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.http/HttpResponse) // org.ton.api.http/HttpResponse.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.http.HttpResponse){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.api.http/HttpResponse) // org.ton.api.http/HttpResponse.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.api.http.HttpResponse){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.api.http/HttpResponse) // org.ton.api.http/HttpResponse.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.api.http.HttpResponse){}[0]
        final fun encodeToByteArray(org.ton.api.http/HttpResponse, kotlin/Boolean): kotlin/ByteArray // org.ton.api.http/HttpResponse.Companion.encodeToByteArray|encodeToByteArray(org.ton.api.http.HttpResponse;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.api.http/HttpResponse, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.api.http/HttpResponse.Companion.encodeToByteString|encodeToByteString(org.ton.api.http.HttpResponse;kotlin.Boolean){}[0]
        final fun hash(org.ton.api.http/HttpResponse): kotlin/ByteArray // org.ton.api.http/HttpResponse.Companion.hash|hash(org.ton.api.http.HttpResponse){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.http/HttpResponse> // org.ton.api.http/HttpResponse.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.liteclient.config/LiteClientConfigGlobal { // org.ton.api.liteclient.config/LiteClientConfigGlobal|null[0]
    constructor <init>(org.ton.api.dht.config/DhtConfigGlobal = ..., kotlin.collections/Collection<org.ton.api.liteserver/LiteServerDesc>, org.ton.api.validator.config/ValidatorConfigGlobal = ...) // org.ton.api.liteclient.config/LiteClientConfigGlobal.<init>|<init>(org.ton.api.dht.config.DhtConfigGlobal;kotlin.collections.Collection<org.ton.api.liteserver.LiteServerDesc>;org.ton.api.validator.config.ValidatorConfigGlobal){}[0]

    final val dht // org.ton.api.liteclient.config/LiteClientConfigGlobal.dht|{}dht[0]
        final fun <get-dht>(): org.ton.api.dht.config/DhtConfigGlobal // org.ton.api.liteclient.config/LiteClientConfigGlobal.dht.<get-dht>|<get-dht>(){}[0]
    final val liteServers // org.ton.api.liteclient.config/LiteClientConfigGlobal.liteServers|{}liteServers[0]
        final fun <get-liteServers>(): kotlin.collections/Collection<org.ton.api.liteserver/LiteServerDesc> // org.ton.api.liteclient.config/LiteClientConfigGlobal.liteServers.<get-liteServers>|<get-liteServers>(){}[0]
    final val validator // org.ton.api.liteclient.config/LiteClientConfigGlobal.validator|{}validator[0]
        final fun <get-validator>(): org.ton.api.validator.config/ValidatorConfigGlobal // org.ton.api.liteclient.config/LiteClientConfigGlobal.validator.<get-validator>|<get-validator>(){}[0]

    final fun component1(): org.ton.api.dht.config/DhtConfigGlobal // org.ton.api.liteclient.config/LiteClientConfigGlobal.component1|component1(){}[0]
    final fun component2(): kotlin.collections/Collection<org.ton.api.liteserver/LiteServerDesc> // org.ton.api.liteclient.config/LiteClientConfigGlobal.component2|component2(){}[0]
    final fun component3(): org.ton.api.validator.config/ValidatorConfigGlobal // org.ton.api.liteclient.config/LiteClientConfigGlobal.component3|component3(){}[0]
    final fun copy(org.ton.api.dht.config/DhtConfigGlobal = ..., kotlin.collections/Collection<org.ton.api.liteserver/LiteServerDesc> = ..., org.ton.api.validator.config/ValidatorConfigGlobal = ...): org.ton.api.liteclient.config/LiteClientConfigGlobal // org.ton.api.liteclient.config/LiteClientConfigGlobal.copy|copy(org.ton.api.dht.config.DhtConfigGlobal;kotlin.collections.Collection<org.ton.api.liteserver.LiteServerDesc>;org.ton.api.validator.config.ValidatorConfigGlobal){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.liteclient.config/LiteClientConfigGlobal.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.liteclient.config/LiteClientConfigGlobal.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.liteclient.config/LiteClientConfigGlobal.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.liteclient.config/LiteClientConfigGlobal> { // org.ton.api.liteclient.config/LiteClientConfigGlobal.$serializer|null[0]
        final val descriptor // org.ton.api.liteclient.config/LiteClientConfigGlobal.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.liteclient.config/LiteClientConfigGlobal.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.liteclient.config/LiteClientConfigGlobal.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.liteclient.config/LiteClientConfigGlobal // org.ton.api.liteclient.config/LiteClientConfigGlobal.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.liteclient.config/LiteClientConfigGlobal) // org.ton.api.liteclient.config/LiteClientConfigGlobal.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.liteclient.config.LiteClientConfigGlobal){}[0]
    }

    final object Companion { // org.ton.api.liteclient.config/LiteClientConfigGlobal.Companion|null[0]
        final val $childSerializers // org.ton.api.liteclient.config/LiteClientConfigGlobal.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.liteclient.config/LiteClientConfigGlobal> // org.ton.api.liteclient.config/LiteClientConfigGlobal.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.liteserver.config/LiteServerConfigRandomLocal : org.ton.api.liteserver.config/LiteServerConfigLocal { // org.ton.api.liteserver.config/LiteServerConfigRandomLocal|null[0]
    constructor <init>(kotlin/Int) // org.ton.api.liteserver.config/LiteServerConfigRandomLocal.<init>|<init>(kotlin.Int){}[0]

    final val port // org.ton.api.liteserver.config/LiteServerConfigRandomLocal.port|{}port[0]
        final fun <get-port>(): kotlin/Int // org.ton.api.liteserver.config/LiteServerConfigRandomLocal.port.<get-port>|<get-port>(){}[0]

    final fun component1(): kotlin/Int // org.ton.api.liteserver.config/LiteServerConfigRandomLocal.component1|component1(){}[0]
    final fun copy(kotlin/Int = ...): org.ton.api.liteserver.config/LiteServerConfigRandomLocal // org.ton.api.liteserver.config/LiteServerConfigRandomLocal.copy|copy(kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.liteserver.config/LiteServerConfigRandomLocal.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.liteserver.config/LiteServerConfigRandomLocal.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.liteserver.config/LiteServerConfigRandomLocal.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.liteserver.config/LiteServerConfigRandomLocal> { // org.ton.api.liteserver.config/LiteServerConfigRandomLocal.$serializer|null[0]
        final val descriptor // org.ton.api.liteserver.config/LiteServerConfigRandomLocal.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.liteserver.config/LiteServerConfigRandomLocal.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.liteserver.config/LiteServerConfigRandomLocal.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.liteserver.config/LiteServerConfigRandomLocal // org.ton.api.liteserver.config/LiteServerConfigRandomLocal.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.liteserver.config/LiteServerConfigRandomLocal) // org.ton.api.liteserver.config/LiteServerConfigRandomLocal.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.liteserver.config.LiteServerConfigRandomLocal){}[0]
    }

    final object Companion { // org.ton.api.liteserver.config/LiteServerConfigRandomLocal.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.liteserver.config/LiteServerConfigRandomLocal> // org.ton.api.liteserver.config/LiteServerConfigRandomLocal.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.liteserver/LiteServerDesc { // org.ton.api.liteserver/LiteServerDesc|null[0]
    constructor <init>(org.ton.kotlin.crypto/PublicKey, kotlin/Int, kotlin/Int) // org.ton.api.liteserver/LiteServerDesc.<init>|<init>(org.ton.kotlin.crypto.PublicKey;kotlin.Int;kotlin.Int){}[0]

    final val id // org.ton.api.liteserver/LiteServerDesc.id|{}id[0]
        final fun <get-id>(): org.ton.kotlin.crypto/PublicKey // org.ton.api.liteserver/LiteServerDesc.id.<get-id>|<get-id>(){}[0]
    final val ip // org.ton.api.liteserver/LiteServerDesc.ip|{}ip[0]
        final fun <get-ip>(): kotlin/Int // org.ton.api.liteserver/LiteServerDesc.ip.<get-ip>|<get-ip>(){}[0]
    final val port // org.ton.api.liteserver/LiteServerDesc.port|{}port[0]
        final fun <get-port>(): kotlin/Int // org.ton.api.liteserver/LiteServerDesc.port.<get-port>|<get-port>(){}[0]

    final fun component1(): org.ton.kotlin.crypto/PublicKey // org.ton.api.liteserver/LiteServerDesc.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.api.liteserver/LiteServerDesc.component2|component2(){}[0]
    final fun component3(): kotlin/Int // org.ton.api.liteserver/LiteServerDesc.component3|component3(){}[0]
    final fun copy(org.ton.kotlin.crypto/PublicKey = ..., kotlin/Int = ..., kotlin/Int = ...): org.ton.api.liteserver/LiteServerDesc // org.ton.api.liteserver/LiteServerDesc.copy|copy(org.ton.kotlin.crypto.PublicKey;kotlin.Int;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.liteserver/LiteServerDesc.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.liteserver/LiteServerDesc.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.liteserver/LiteServerDesc.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.liteserver/LiteServerDesc> { // org.ton.api.liteserver/LiteServerDesc.$serializer|null[0]
        final val descriptor // org.ton.api.liteserver/LiteServerDesc.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.liteserver/LiteServerDesc.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.liteserver/LiteServerDesc.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.liteserver/LiteServerDesc // org.ton.api.liteserver/LiteServerDesc.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.liteserver/LiteServerDesc) // org.ton.api.liteserver/LiteServerDesc.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.liteserver.LiteServerDesc){}[0]
    }

    final object Companion { // org.ton.api.liteserver/LiteServerDesc.Companion|null[0]
        final val $childSerializers // org.ton.api.liteserver/LiteServerDesc.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.liteserver/LiteServerDesc> // org.ton.api.liteserver/LiteServerDesc.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.overlay/OverlayNode : org.ton.api/SignedTlObject<org.ton.api.overlay/OverlayNode> { // org.ton.api.overlay/OverlayNode|null[0]
    constructor <init>(org.ton.kotlin.crypto/PublicKey, kotlinx.io.bytestring/ByteString, kotlin/Int, kotlinx.io.bytestring/ByteString = ...) // org.ton.api.overlay/OverlayNode.<init>|<init>(org.ton.kotlin.crypto.PublicKey;kotlinx.io.bytestring.ByteString;kotlin.Int;kotlinx.io.bytestring.ByteString){}[0]

    final val id // org.ton.api.overlay/OverlayNode.id|{}id[0]
        final fun <get-id>(): org.ton.kotlin.crypto/PublicKey // org.ton.api.overlay/OverlayNode.id.<get-id>|<get-id>(){}[0]
    final val overlay // org.ton.api.overlay/OverlayNode.overlay|{}overlay[0]
        final fun <get-overlay>(): kotlinx.io.bytestring/ByteString // org.ton.api.overlay/OverlayNode.overlay.<get-overlay>|<get-overlay>(){}[0]
    final val signature // org.ton.api.overlay/OverlayNode.signature|{}signature[0]
        final fun <get-signature>(): kotlinx.io.bytestring/ByteString // org.ton.api.overlay/OverlayNode.signature.<get-signature>|<get-signature>(){}[0]
    final val version // org.ton.api.overlay/OverlayNode.version|{}version[0]
        final fun <get-version>(): kotlin/Int // org.ton.api.overlay/OverlayNode.version.<get-version>|<get-version>(){}[0]

    final fun component1(): org.ton.kotlin.crypto/PublicKey // org.ton.api.overlay/OverlayNode.component1|component1(){}[0]
    final fun component2(): kotlinx.io.bytestring/ByteString // org.ton.api.overlay/OverlayNode.component2|component2(){}[0]
    final fun component3(): kotlin/Int // org.ton.api.overlay/OverlayNode.component3|component3(){}[0]
    final fun component4(): kotlinx.io.bytestring/ByteString // org.ton.api.overlay/OverlayNode.component4|component4(){}[0]
    final fun copy(org.ton.kotlin.crypto/PublicKey = ..., kotlinx.io.bytestring/ByteString = ..., kotlin/Int = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.api.overlay/OverlayNode // org.ton.api.overlay/OverlayNode.copy|copy(org.ton.kotlin.crypto.PublicKey;kotlinx.io.bytestring.ByteString;kotlin.Int;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.overlay/OverlayNode.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.overlay/OverlayNode.hashCode|hashCode(){}[0]
    final fun signed(org.ton.kotlin.crypto/Signer): org.ton.api.overlay/OverlayNode // org.ton.api.overlay/OverlayNode.signed|signed(org.ton.kotlin.crypto.Signer){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.overlay/OverlayNode> // org.ton.api.overlay/OverlayNode.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.api.overlay/OverlayNode.toString|toString(){}[0]
    final fun verify(org.ton.kotlin.crypto/SignatureVerifier): kotlin/Boolean // org.ton.api.overlay/OverlayNode.verify|verify(org.ton.kotlin.crypto.SignatureVerifier){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.overlay/OverlayNode> { // org.ton.api.overlay/OverlayNode.$serializer|null[0]
        final val descriptor // org.ton.api.overlay/OverlayNode.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.overlay/OverlayNode.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.overlay/OverlayNode.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.overlay/OverlayNode // org.ton.api.overlay/OverlayNode.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.overlay/OverlayNode) // org.ton.api.overlay/OverlayNode.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.overlay.OverlayNode){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.overlay/OverlayNode> { // org.ton.api.overlay/OverlayNode.Companion|null[0]
        final val $childSerializers // org.ton.api.overlay/OverlayNode.Companion.$childSerializers|{}$childSerializers[0]

        final fun decode(org.ton.tl/TlReader): org.ton.api.overlay/OverlayNode // org.ton.api.overlay/OverlayNode.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.overlay/OverlayNode) // org.ton.api.overlay/OverlayNode.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.overlay.OverlayNode){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.overlay/OverlayNode> // org.ton.api.overlay/OverlayNode.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.overlay/OverlayNodeToSign : org.ton.tl/TlObject<org.ton.api.overlay/OverlayNodeToSign> { // org.ton.api.overlay/OverlayNodeToSign|null[0]
    constructor <init>(org.ton.api.adnl/AdnlIdShort, kotlinx.io.bytestring/ByteString, kotlin/Int) // org.ton.api.overlay/OverlayNodeToSign.<init>|<init>(org.ton.api.adnl.AdnlIdShort;kotlinx.io.bytestring.ByteString;kotlin.Int){}[0]

    final val id // org.ton.api.overlay/OverlayNodeToSign.id|{}id[0]
        final fun <get-id>(): org.ton.api.adnl/AdnlIdShort // org.ton.api.overlay/OverlayNodeToSign.id.<get-id>|<get-id>(){}[0]
    final val overlay // org.ton.api.overlay/OverlayNodeToSign.overlay|{}overlay[0]
        final fun <get-overlay>(): kotlinx.io.bytestring/ByteString // org.ton.api.overlay/OverlayNodeToSign.overlay.<get-overlay>|<get-overlay>(){}[0]
    final val version // org.ton.api.overlay/OverlayNodeToSign.version|{}version[0]
        final fun <get-version>(): kotlin/Int // org.ton.api.overlay/OverlayNodeToSign.version.<get-version>|<get-version>(){}[0]

    final fun component1(): org.ton.api.adnl/AdnlIdShort // org.ton.api.overlay/OverlayNodeToSign.component1|component1(){}[0]
    final fun component2(): kotlinx.io.bytestring/ByteString // org.ton.api.overlay/OverlayNodeToSign.component2|component2(){}[0]
    final fun component3(): kotlin/Int // org.ton.api.overlay/OverlayNodeToSign.component3|component3(){}[0]
    final fun copy(org.ton.api.adnl/AdnlIdShort = ..., kotlinx.io.bytestring/ByteString = ..., kotlin/Int = ...): org.ton.api.overlay/OverlayNodeToSign // org.ton.api.overlay/OverlayNodeToSign.copy|copy(org.ton.api.adnl.AdnlIdShort;kotlinx.io.bytestring.ByteString;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.overlay/OverlayNodeToSign.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.overlay/OverlayNodeToSign.hashCode|hashCode(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.overlay/OverlayNodeToSign> // org.ton.api.overlay/OverlayNodeToSign.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.api.overlay/OverlayNodeToSign.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.overlay/OverlayNodeToSign> { // org.ton.api.overlay/OverlayNodeToSign.$serializer|null[0]
        final val descriptor // org.ton.api.overlay/OverlayNodeToSign.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.overlay/OverlayNodeToSign.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.overlay/OverlayNodeToSign.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.overlay/OverlayNodeToSign // org.ton.api.overlay/OverlayNodeToSign.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.overlay/OverlayNodeToSign) // org.ton.api.overlay/OverlayNodeToSign.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.overlay.OverlayNodeToSign){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.overlay/OverlayNodeToSign> { // org.ton.api.overlay/OverlayNodeToSign.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.overlay/OverlayNodeToSign // org.ton.api.overlay/OverlayNodeToSign.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.overlay/OverlayNodeToSign) // org.ton.api.overlay/OverlayNodeToSign.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.overlay.OverlayNodeToSign){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.overlay/OverlayNodeToSign> // org.ton.api.overlay/OverlayNodeToSign.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.overlay/OverlayNodes : org.ton.tl/TlObject<org.ton.api.overlay/OverlayNodes> { // org.ton.api.overlay/OverlayNodes|null[0]
    constructor <init>(kotlin.collections/List<org.ton.api.overlay/OverlayNode>) // org.ton.api.overlay/OverlayNodes.<init>|<init>(kotlin.collections.List<org.ton.api.overlay.OverlayNode>){}[0]
    constructor <init>(kotlin/Array<out org.ton.api.overlay/OverlayNode>...) // org.ton.api.overlay/OverlayNodes.<init>|<init>(kotlin.Array<out|org.ton.api.overlay.OverlayNode>...){}[0]

    final val nodes // org.ton.api.overlay/OverlayNodes.nodes|{}nodes[0]
        final fun <get-nodes>(): kotlin.collections/List<org.ton.api.overlay/OverlayNode> // org.ton.api.overlay/OverlayNodes.nodes.<get-nodes>|<get-nodes>(){}[0]

    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.overlay/OverlayNodes> // org.ton.api.overlay/OverlayNodes.tlCodec|tlCodec(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.overlay/OverlayNodes> { // org.ton.api.overlay/OverlayNodes.$serializer|null[0]
        final val descriptor // org.ton.api.overlay/OverlayNodes.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.overlay/OverlayNodes.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.overlay/OverlayNodes.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.overlay/OverlayNodes // org.ton.api.overlay/OverlayNodes.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.overlay/OverlayNodes) // org.ton.api.overlay/OverlayNodes.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.overlay.OverlayNodes){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.overlay/OverlayNodes> { // org.ton.api.overlay/OverlayNodes.Companion|null[0]
        final val $childSerializers // org.ton.api.overlay/OverlayNodes.Companion.$childSerializers|{}$childSerializers[0]

        final fun decode(org.ton.tl/TlReader): org.ton.api.overlay/OverlayNodes // org.ton.api.overlay/OverlayNodes.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.overlay/OverlayNodes) // org.ton.api.overlay/OverlayNodes.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.overlay.OverlayNodes){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.overlay/OverlayNodes> // org.ton.api.overlay/OverlayNodes.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.rldp/RldpAnswer : org.ton.api.rldp/RldpMessage { // org.ton.api.rldp/RldpAnswer|null[0]
    constructor <init>(kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString) // org.ton.api.rldp/RldpAnswer.<init>|<init>(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]

    final val data // org.ton.api.rldp/RldpAnswer.data|{}data[0]
        final fun <get-data>(): kotlinx.io.bytestring/ByteString // org.ton.api.rldp/RldpAnswer.data.<get-data>|<get-data>(){}[0]
    final val id // org.ton.api.rldp/RldpAnswer.id|{}id[0]
        final fun <get-id>(): kotlinx.io.bytestring/ByteString // org.ton.api.rldp/RldpAnswer.id.<get-id>|<get-id>(){}[0]
    final val queryId // org.ton.api.rldp/RldpAnswer.queryId|{}queryId[0]
        final fun <get-queryId>(): kotlinx.io.bytestring/ByteString // org.ton.api.rldp/RldpAnswer.queryId.<get-queryId>|<get-queryId>(){}[0]

    final fun component1(): kotlinx.io.bytestring/ByteString // org.ton.api.rldp/RldpAnswer.component1|component1(){}[0]
    final fun component2(): kotlinx.io.bytestring/ByteString // org.ton.api.rldp/RldpAnswer.component2|component2(){}[0]
    final fun copy(kotlinx.io.bytestring/ByteString = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.api.rldp/RldpAnswer // org.ton.api.rldp/RldpAnswer.copy|copy(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.rldp/RldpAnswer.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.rldp/RldpAnswer.hashCode|hashCode(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.rldp/RldpAnswer> // org.ton.api.rldp/RldpAnswer.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.api.rldp/RldpAnswer.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.rldp/RldpAnswer> { // org.ton.api.rldp/RldpAnswer.$serializer|null[0]
        final val descriptor // org.ton.api.rldp/RldpAnswer.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.rldp/RldpAnswer.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.rldp/RldpAnswer.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.rldp/RldpAnswer // org.ton.api.rldp/RldpAnswer.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.rldp/RldpAnswer) // org.ton.api.rldp/RldpAnswer.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.rldp.RldpAnswer){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.rldp/RldpAnswer> { // org.ton.api.rldp/RldpAnswer.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.rldp/RldpAnswer // org.ton.api.rldp/RldpAnswer.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.rldp/RldpAnswer) // org.ton.api.rldp/RldpAnswer.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.rldp.RldpAnswer){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.rldp/RldpAnswer> // org.ton.api.rldp/RldpAnswer.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.rldp/RldpComplete : org.ton.api.rldp/RldpMessagePart { // org.ton.api.rldp/RldpComplete|null[0]
    constructor <init>(kotlinx.io.bytestring/ByteString, kotlin/Int) // org.ton.api.rldp/RldpComplete.<init>|<init>(kotlinx.io.bytestring.ByteString;kotlin.Int){}[0]

    final val part // org.ton.api.rldp/RldpComplete.part|{}part[0]
        final fun <get-part>(): kotlin/Int // org.ton.api.rldp/RldpComplete.part.<get-part>|<get-part>(){}[0]
    final val transferId // org.ton.api.rldp/RldpComplete.transferId|{}transferId[0]
        final fun <get-transferId>(): kotlinx.io.bytestring/ByteString // org.ton.api.rldp/RldpComplete.transferId.<get-transferId>|<get-transferId>(){}[0]

    final fun component1(): kotlinx.io.bytestring/ByteString // org.ton.api.rldp/RldpComplete.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.api.rldp/RldpComplete.component2|component2(){}[0]
    final fun copy(kotlinx.io.bytestring/ByteString = ..., kotlin/Int = ...): org.ton.api.rldp/RldpComplete // org.ton.api.rldp/RldpComplete.copy|copy(kotlinx.io.bytestring.ByteString;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.rldp/RldpComplete.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.rldp/RldpComplete.hashCode|hashCode(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.rldp/RldpComplete> // org.ton.api.rldp/RldpComplete.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.api.rldp/RldpComplete.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.rldp/RldpComplete> { // org.ton.api.rldp/RldpComplete.$serializer|null[0]
        final val descriptor // org.ton.api.rldp/RldpComplete.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.rldp/RldpComplete.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.rldp/RldpComplete.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.rldp/RldpComplete // org.ton.api.rldp/RldpComplete.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.rldp/RldpComplete) // org.ton.api.rldp/RldpComplete.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.rldp.RldpComplete){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.rldp/RldpComplete> { // org.ton.api.rldp/RldpComplete.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.rldp/RldpComplete // org.ton.api.rldp/RldpComplete.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.rldp/RldpComplete) // org.ton.api.rldp/RldpComplete.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.rldp.RldpComplete){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.rldp/RldpComplete> // org.ton.api.rldp/RldpComplete.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.rldp/RldpConfirm : org.ton.api.rldp/RldpMessagePart { // org.ton.api.rldp/RldpConfirm|null[0]
    constructor <init>(kotlinx.io.bytestring/ByteString, kotlin/Int, kotlin/Int) // org.ton.api.rldp/RldpConfirm.<init>|<init>(kotlinx.io.bytestring.ByteString;kotlin.Int;kotlin.Int){}[0]

    final val part // org.ton.api.rldp/RldpConfirm.part|{}part[0]
        final fun <get-part>(): kotlin/Int // org.ton.api.rldp/RldpConfirm.part.<get-part>|<get-part>(){}[0]
    final val seqno // org.ton.api.rldp/RldpConfirm.seqno|{}seqno[0]
        final fun <get-seqno>(): kotlin/Int // org.ton.api.rldp/RldpConfirm.seqno.<get-seqno>|<get-seqno>(){}[0]
    final val transferId // org.ton.api.rldp/RldpConfirm.transferId|{}transferId[0]
        final fun <get-transferId>(): kotlinx.io.bytestring/ByteString // org.ton.api.rldp/RldpConfirm.transferId.<get-transferId>|<get-transferId>(){}[0]

    final fun component1(): kotlinx.io.bytestring/ByteString // org.ton.api.rldp/RldpConfirm.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.api.rldp/RldpConfirm.component2|component2(){}[0]
    final fun component3(): kotlin/Int // org.ton.api.rldp/RldpConfirm.component3|component3(){}[0]
    final fun copy(kotlinx.io.bytestring/ByteString = ..., kotlin/Int = ..., kotlin/Int = ...): org.ton.api.rldp/RldpConfirm // org.ton.api.rldp/RldpConfirm.copy|copy(kotlinx.io.bytestring.ByteString;kotlin.Int;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.rldp/RldpConfirm.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.rldp/RldpConfirm.hashCode|hashCode(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.rldp/RldpConfirm> // org.ton.api.rldp/RldpConfirm.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.api.rldp/RldpConfirm.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.rldp/RldpConfirm> { // org.ton.api.rldp/RldpConfirm.$serializer|null[0]
        final val descriptor // org.ton.api.rldp/RldpConfirm.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.rldp/RldpConfirm.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.rldp/RldpConfirm.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.rldp/RldpConfirm // org.ton.api.rldp/RldpConfirm.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.rldp/RldpConfirm) // org.ton.api.rldp/RldpConfirm.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.rldp.RldpConfirm){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.rldp/RldpConfirm> { // org.ton.api.rldp/RldpConfirm.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.rldp/RldpConfirm // org.ton.api.rldp/RldpConfirm.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.rldp/RldpConfirm) // org.ton.api.rldp/RldpConfirm.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.rldp.RldpConfirm){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.rldp/RldpConfirm> // org.ton.api.rldp/RldpConfirm.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.rldp/RldpMessageData : org.ton.api.rldp/RldpMessage { // org.ton.api.rldp/RldpMessageData|null[0]
    constructor <init>(kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString) // org.ton.api.rldp/RldpMessageData.<init>|<init>(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]

    final val data // org.ton.api.rldp/RldpMessageData.data|{}data[0]
        final fun <get-data>(): kotlinx.io.bytestring/ByteString // org.ton.api.rldp/RldpMessageData.data.<get-data>|<get-data>(){}[0]
    final val id // org.ton.api.rldp/RldpMessageData.id|{}id[0]
        final fun <get-id>(): kotlinx.io.bytestring/ByteString // org.ton.api.rldp/RldpMessageData.id.<get-id>|<get-id>(){}[0]

    final fun component1(): kotlinx.io.bytestring/ByteString // org.ton.api.rldp/RldpMessageData.component1|component1(){}[0]
    final fun component2(): kotlinx.io.bytestring/ByteString // org.ton.api.rldp/RldpMessageData.component2|component2(){}[0]
    final fun copy(kotlinx.io.bytestring/ByteString = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.api.rldp/RldpMessageData // org.ton.api.rldp/RldpMessageData.copy|copy(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.rldp/RldpMessageData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.rldp/RldpMessageData.hashCode|hashCode(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.rldp/RldpMessageData> // org.ton.api.rldp/RldpMessageData.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.api.rldp/RldpMessageData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.rldp/RldpMessageData> { // org.ton.api.rldp/RldpMessageData.$serializer|null[0]
        final val descriptor // org.ton.api.rldp/RldpMessageData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.rldp/RldpMessageData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.rldp/RldpMessageData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.rldp/RldpMessageData // org.ton.api.rldp/RldpMessageData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.rldp/RldpMessageData) // org.ton.api.rldp/RldpMessageData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.rldp.RldpMessageData){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.rldp/RldpMessageData> { // org.ton.api.rldp/RldpMessageData.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.rldp/RldpMessageData // org.ton.api.rldp/RldpMessageData.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.rldp/RldpMessageData) // org.ton.api.rldp/RldpMessageData.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.rldp.RldpMessageData){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.rldp/RldpMessageData> // org.ton.api.rldp/RldpMessageData.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.rldp/RldpMessagePartData : org.ton.api.rldp/RldpMessagePart { // org.ton.api.rldp/RldpMessagePartData|null[0]
    constructor <init>(kotlinx.io.bytestring/ByteString, org.ton.api.fec/FecType, kotlin/Int, kotlin/Long, kotlin/Int, kotlinx.io.bytestring/ByteString) // org.ton.api.rldp/RldpMessagePartData.<init>|<init>(kotlinx.io.bytestring.ByteString;org.ton.api.fec.FecType;kotlin.Int;kotlin.Long;kotlin.Int;kotlinx.io.bytestring.ByteString){}[0]

    final val data // org.ton.api.rldp/RldpMessagePartData.data|{}data[0]
        final fun <get-data>(): kotlinx.io.bytestring/ByteString // org.ton.api.rldp/RldpMessagePartData.data.<get-data>|<get-data>(){}[0]
    final val fecType // org.ton.api.rldp/RldpMessagePartData.fecType|{}fecType[0]
        final fun <get-fecType>(): org.ton.api.fec/FecType // org.ton.api.rldp/RldpMessagePartData.fecType.<get-fecType>|<get-fecType>(){}[0]
    final val part // org.ton.api.rldp/RldpMessagePartData.part|{}part[0]
        final fun <get-part>(): kotlin/Int // org.ton.api.rldp/RldpMessagePartData.part.<get-part>|<get-part>(){}[0]
    final val seqno // org.ton.api.rldp/RldpMessagePartData.seqno|{}seqno[0]
        final fun <get-seqno>(): kotlin/Int // org.ton.api.rldp/RldpMessagePartData.seqno.<get-seqno>|<get-seqno>(){}[0]
    final val totalSize // org.ton.api.rldp/RldpMessagePartData.totalSize|{}totalSize[0]
        final fun <get-totalSize>(): kotlin/Long // org.ton.api.rldp/RldpMessagePartData.totalSize.<get-totalSize>|<get-totalSize>(){}[0]
    final val transferId // org.ton.api.rldp/RldpMessagePartData.transferId|{}transferId[0]
        final fun <get-transferId>(): kotlinx.io.bytestring/ByteString // org.ton.api.rldp/RldpMessagePartData.transferId.<get-transferId>|<get-transferId>(){}[0]

    final fun component1(): kotlinx.io.bytestring/ByteString // org.ton.api.rldp/RldpMessagePartData.component1|component1(){}[0]
    final fun component2(): org.ton.api.fec/FecType // org.ton.api.rldp/RldpMessagePartData.component2|component2(){}[0]
    final fun component3(): kotlin/Int // org.ton.api.rldp/RldpMessagePartData.component3|component3(){}[0]
    final fun component4(): kotlin/Long // org.ton.api.rldp/RldpMessagePartData.component4|component4(){}[0]
    final fun component5(): kotlin/Int // org.ton.api.rldp/RldpMessagePartData.component5|component5(){}[0]
    final fun component6(): kotlinx.io.bytestring/ByteString // org.ton.api.rldp/RldpMessagePartData.component6|component6(){}[0]
    final fun copy(kotlinx.io.bytestring/ByteString = ..., org.ton.api.fec/FecType = ..., kotlin/Int = ..., kotlin/Long = ..., kotlin/Int = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.api.rldp/RldpMessagePartData // org.ton.api.rldp/RldpMessagePartData.copy|copy(kotlinx.io.bytestring.ByteString;org.ton.api.fec.FecType;kotlin.Int;kotlin.Long;kotlin.Int;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.rldp/RldpMessagePartData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.rldp/RldpMessagePartData.hashCode|hashCode(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.rldp/RldpMessagePartData> // org.ton.api.rldp/RldpMessagePartData.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.api.rldp/RldpMessagePartData.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.rldp/RldpMessagePartData> { // org.ton.api.rldp/RldpMessagePartData.$serializer|null[0]
        final val descriptor // org.ton.api.rldp/RldpMessagePartData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.rldp/RldpMessagePartData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.rldp/RldpMessagePartData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.rldp/RldpMessagePartData // org.ton.api.rldp/RldpMessagePartData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.rldp/RldpMessagePartData) // org.ton.api.rldp/RldpMessagePartData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.rldp.RldpMessagePartData){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.rldp/RldpMessagePartData> { // org.ton.api.rldp/RldpMessagePartData.Companion|null[0]
        final val $childSerializers // org.ton.api.rldp/RldpMessagePartData.Companion.$childSerializers|{}$childSerializers[0]

        final fun decode(org.ton.tl/TlReader): org.ton.api.rldp/RldpMessagePartData // org.ton.api.rldp/RldpMessagePartData.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.rldp/RldpMessagePartData) // org.ton.api.rldp/RldpMessagePartData.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.rldp.RldpMessagePartData){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.rldp/RldpMessagePartData> // org.ton.api.rldp/RldpMessagePartData.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.rldp/RldpQuery : org.ton.api.rldp/RldpMessage { // org.ton.api.rldp/RldpQuery|null[0]
    constructor <init>(kotlinx.io.bytestring/ByteString, kotlin/Long, kotlin/Int, kotlinx.io.bytestring/ByteString) // org.ton.api.rldp/RldpQuery.<init>|<init>(kotlinx.io.bytestring.ByteString;kotlin.Long;kotlin.Int;kotlinx.io.bytestring.ByteString){}[0]

    final val data // org.ton.api.rldp/RldpQuery.data|{}data[0]
        final fun <get-data>(): kotlinx.io.bytestring/ByteString // org.ton.api.rldp/RldpQuery.data.<get-data>|<get-data>(){}[0]
    final val id // org.ton.api.rldp/RldpQuery.id|{}id[0]
        final fun <get-id>(): kotlinx.io.bytestring/ByteString // org.ton.api.rldp/RldpQuery.id.<get-id>|<get-id>(){}[0]
    final val maxAnswerSize // org.ton.api.rldp/RldpQuery.maxAnswerSize|{}maxAnswerSize[0]
        final fun <get-maxAnswerSize>(): kotlin/Long // org.ton.api.rldp/RldpQuery.maxAnswerSize.<get-maxAnswerSize>|<get-maxAnswerSize>(){}[0]
    final val queryId // org.ton.api.rldp/RldpQuery.queryId|{}queryId[0]
        final fun <get-queryId>(): kotlinx.io.bytestring/ByteString // org.ton.api.rldp/RldpQuery.queryId.<get-queryId>|<get-queryId>(){}[0]
    final val timeout // org.ton.api.rldp/RldpQuery.timeout|{}timeout[0]
        final fun <get-timeout>(): kotlin/Int // org.ton.api.rldp/RldpQuery.timeout.<get-timeout>|<get-timeout>(){}[0]

    final fun component1(): kotlinx.io.bytestring/ByteString // org.ton.api.rldp/RldpQuery.component1|component1(){}[0]
    final fun component2(): kotlin/Long // org.ton.api.rldp/RldpQuery.component2|component2(){}[0]
    final fun component3(): kotlin/Int // org.ton.api.rldp/RldpQuery.component3|component3(){}[0]
    final fun component4(): kotlinx.io.bytestring/ByteString // org.ton.api.rldp/RldpQuery.component4|component4(){}[0]
    final fun copy(kotlinx.io.bytestring/ByteString = ..., kotlin/Long = ..., kotlin/Int = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.api.rldp/RldpQuery // org.ton.api.rldp/RldpQuery.copy|copy(kotlinx.io.bytestring.ByteString;kotlin.Long;kotlin.Int;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.rldp/RldpQuery.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.rldp/RldpQuery.hashCode|hashCode(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.rldp/RldpQuery> // org.ton.api.rldp/RldpQuery.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.api.rldp/RldpQuery.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.rldp/RldpQuery> { // org.ton.api.rldp/RldpQuery.$serializer|null[0]
        final val descriptor // org.ton.api.rldp/RldpQuery.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.rldp/RldpQuery.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.rldp/RldpQuery.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.rldp/RldpQuery // org.ton.api.rldp/RldpQuery.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.rldp/RldpQuery) // org.ton.api.rldp/RldpQuery.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.rldp.RldpQuery){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.rldp/RldpQuery> { // org.ton.api.rldp/RldpQuery.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.rldp/RldpQuery // org.ton.api.rldp/RldpQuery.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.rldp/RldpQuery) // org.ton.api.rldp/RldpQuery.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.rldp.RldpQuery){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.rldp/RldpQuery> // org.ton.api.rldp/RldpQuery.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.tcp/TcpAuthentificate { // org.ton.api.tcp/TcpAuthentificate|null[0]
    constructor <init>(kotlin/ByteArray) // org.ton.api.tcp/TcpAuthentificate.<init>|<init>(kotlin.ByteArray){}[0]

    final val nonce // org.ton.api.tcp/TcpAuthentificate.nonce|{}nonce[0]
        final fun <get-nonce>(): kotlin/ByteArray // org.ton.api.tcp/TcpAuthentificate.nonce.<get-nonce>|<get-nonce>(){}[0]

    final fun component1(): kotlin/ByteArray // org.ton.api.tcp/TcpAuthentificate.component1|component1(){}[0]
    final fun copy(kotlin/ByteArray = ...): org.ton.api.tcp/TcpAuthentificate // org.ton.api.tcp/TcpAuthentificate.copy|copy(kotlin.ByteArray){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.tcp/TcpAuthentificate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.tcp/TcpAuthentificate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.tcp/TcpAuthentificate.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.tcp/TcpAuthentificate> { // org.ton.api.tcp/TcpAuthentificate.$serializer|null[0]
        final val descriptor // org.ton.api.tcp/TcpAuthentificate.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.tcp/TcpAuthentificate.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.tcp/TcpAuthentificate.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.tcp/TcpAuthentificate // org.ton.api.tcp/TcpAuthentificate.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.tcp/TcpAuthentificate) // org.ton.api.tcp/TcpAuthentificate.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.tcp.TcpAuthentificate){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.api.tcp/TcpAuthentificate> { // org.ton.api.tcp/TcpAuthentificate.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.api.tcp/TcpAuthentificate // org.ton.api.tcp/TcpAuthentificate.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.api.tcp/TcpAuthentificate // org.ton.api.tcp/TcpAuthentificate.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.api.tcp/TcpAuthentificate // org.ton.api.tcp/TcpAuthentificate.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.tcp/TcpAuthentificate // org.ton.api.tcp/TcpAuthentificate.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.api.tcp/TcpAuthentificate // org.ton.api.tcp/TcpAuthentificate.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.api.tcp/TcpAuthentificate // org.ton.api.tcp/TcpAuthentificate.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.api.tcp/TcpAuthentificate // org.ton.api.tcp/TcpAuthentificate.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.api.tcp/TcpAuthentificate // org.ton.api.tcp/TcpAuthentificate.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.api.tcp/TcpAuthentificate) // org.ton.api.tcp/TcpAuthentificate.Companion.encode|encode(kotlinx.io.Sink;org.ton.api.tcp.TcpAuthentificate){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.tcp/TcpAuthentificate) // org.ton.api.tcp/TcpAuthentificate.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.tcp.TcpAuthentificate){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.api.tcp/TcpAuthentificate) // org.ton.api.tcp/TcpAuthentificate.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.api.tcp.TcpAuthentificate){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.api.tcp/TcpAuthentificate) // org.ton.api.tcp/TcpAuthentificate.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.api.tcp.TcpAuthentificate){}[0]
        final fun encodeToByteArray(org.ton.api.tcp/TcpAuthentificate, kotlin/Boolean): kotlin/ByteArray // org.ton.api.tcp/TcpAuthentificate.Companion.encodeToByteArray|encodeToByteArray(org.ton.api.tcp.TcpAuthentificate;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.api.tcp/TcpAuthentificate, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.api.tcp/TcpAuthentificate.Companion.encodeToByteString|encodeToByteString(org.ton.api.tcp.TcpAuthentificate;kotlin.Boolean){}[0]
        final fun hash(org.ton.api.tcp/TcpAuthentificate): kotlin/ByteArray // org.ton.api.tcp/TcpAuthentificate.Companion.hash|hash(org.ton.api.tcp.TcpAuthentificate){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.tcp/TcpAuthentificate> // org.ton.api.tcp/TcpAuthentificate.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.tcp/TcpAuthentificationComplete : org.ton.api.tcp/TcpMessage { // org.ton.api.tcp/TcpAuthentificationComplete|null[0]
    constructor <init>(org.ton.kotlin.crypto/PublicKey, kotlinx.io.bytestring/ByteString) // org.ton.api.tcp/TcpAuthentificationComplete.<init>|<init>(org.ton.kotlin.crypto.PublicKey;kotlinx.io.bytestring.ByteString){}[0]

    final val key // org.ton.api.tcp/TcpAuthentificationComplete.key|{}key[0]
        final fun <get-key>(): org.ton.kotlin.crypto/PublicKey // org.ton.api.tcp/TcpAuthentificationComplete.key.<get-key>|<get-key>(){}[0]
    final val signature // org.ton.api.tcp/TcpAuthentificationComplete.signature|{}signature[0]
        final fun <get-signature>(): kotlinx.io.bytestring/ByteString // org.ton.api.tcp/TcpAuthentificationComplete.signature.<get-signature>|<get-signature>(){}[0]

    final fun component1(): org.ton.kotlin.crypto/PublicKey // org.ton.api.tcp/TcpAuthentificationComplete.component1|component1(){}[0]
    final fun component2(): kotlinx.io.bytestring/ByteString // org.ton.api.tcp/TcpAuthentificationComplete.component2|component2(){}[0]
    final fun copy(org.ton.kotlin.crypto/PublicKey = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.api.tcp/TcpAuthentificationComplete // org.ton.api.tcp/TcpAuthentificationComplete.copy|copy(org.ton.kotlin.crypto.PublicKey;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.tcp/TcpAuthentificationComplete.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.tcp/TcpAuthentificationComplete.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.tcp/TcpAuthentificationComplete.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.tcp/TcpAuthentificationComplete> { // org.ton.api.tcp/TcpAuthentificationComplete.$serializer|null[0]
        final val descriptor // org.ton.api.tcp/TcpAuthentificationComplete.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.tcp/TcpAuthentificationComplete.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.tcp/TcpAuthentificationComplete.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.tcp/TcpAuthentificationComplete // org.ton.api.tcp/TcpAuthentificationComplete.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.tcp/TcpAuthentificationComplete) // org.ton.api.tcp/TcpAuthentificationComplete.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.tcp.TcpAuthentificationComplete){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.api.tcp/TcpAuthentificationComplete> { // org.ton.api.tcp/TcpAuthentificationComplete.Companion|null[0]
        final val $childSerializers // org.ton.api.tcp/TcpAuthentificationComplete.Companion.$childSerializers|{}$childSerializers[0]

        final fun decode(kotlin/ByteArray): org.ton.api.tcp/TcpAuthentificationComplete // org.ton.api.tcp/TcpAuthentificationComplete.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.api.tcp/TcpAuthentificationComplete // org.ton.api.tcp/TcpAuthentificationComplete.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.api.tcp/TcpAuthentificationComplete // org.ton.api.tcp/TcpAuthentificationComplete.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.tcp/TcpAuthentificationComplete // org.ton.api.tcp/TcpAuthentificationComplete.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.api.tcp/TcpAuthentificationComplete // org.ton.api.tcp/TcpAuthentificationComplete.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.api.tcp/TcpAuthentificationComplete // org.ton.api.tcp/TcpAuthentificationComplete.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.api.tcp/TcpAuthentificationComplete // org.ton.api.tcp/TcpAuthentificationComplete.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.api.tcp/TcpAuthentificationComplete // org.ton.api.tcp/TcpAuthentificationComplete.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.api.tcp/TcpAuthentificationComplete) // org.ton.api.tcp/TcpAuthentificationComplete.Companion.encode|encode(kotlinx.io.Sink;org.ton.api.tcp.TcpAuthentificationComplete){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.tcp/TcpAuthentificationComplete) // org.ton.api.tcp/TcpAuthentificationComplete.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.tcp.TcpAuthentificationComplete){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.api.tcp/TcpAuthentificationComplete) // org.ton.api.tcp/TcpAuthentificationComplete.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.api.tcp.TcpAuthentificationComplete){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.api.tcp/TcpAuthentificationComplete) // org.ton.api.tcp/TcpAuthentificationComplete.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.api.tcp.TcpAuthentificationComplete){}[0]
        final fun encodeToByteArray(org.ton.api.tcp/TcpAuthentificationComplete, kotlin/Boolean): kotlin/ByteArray // org.ton.api.tcp/TcpAuthentificationComplete.Companion.encodeToByteArray|encodeToByteArray(org.ton.api.tcp.TcpAuthentificationComplete;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.api.tcp/TcpAuthentificationComplete, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.api.tcp/TcpAuthentificationComplete.Companion.encodeToByteString|encodeToByteString(org.ton.api.tcp.TcpAuthentificationComplete;kotlin.Boolean){}[0]
        final fun hash(org.ton.api.tcp/TcpAuthentificationComplete): kotlin/ByteArray // org.ton.api.tcp/TcpAuthentificationComplete.Companion.hash|hash(org.ton.api.tcp.TcpAuthentificationComplete){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.tcp/TcpAuthentificationComplete> // org.ton.api.tcp/TcpAuthentificationComplete.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.tcp/TcpAuthentificationNonce { // org.ton.api.tcp/TcpAuthentificationNonce|null[0]
    constructor <init>(kotlinx.io.bytestring/ByteString) // org.ton.api.tcp/TcpAuthentificationNonce.<init>|<init>(kotlinx.io.bytestring.ByteString){}[0]

    final val nonce // org.ton.api.tcp/TcpAuthentificationNonce.nonce|{}nonce[0]
        final fun <get-nonce>(): kotlinx.io.bytestring/ByteString // org.ton.api.tcp/TcpAuthentificationNonce.nonce.<get-nonce>|<get-nonce>(){}[0]

    final fun component1(): kotlinx.io.bytestring/ByteString // org.ton.api.tcp/TcpAuthentificationNonce.component1|component1(){}[0]
    final fun copy(kotlinx.io.bytestring/ByteString = ...): org.ton.api.tcp/TcpAuthentificationNonce // org.ton.api.tcp/TcpAuthentificationNonce.copy|copy(kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.tcp/TcpAuthentificationNonce.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.tcp/TcpAuthentificationNonce.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.tcp/TcpAuthentificationNonce.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.tcp/TcpAuthentificationNonce> { // org.ton.api.tcp/TcpAuthentificationNonce.$serializer|null[0]
        final val descriptor // org.ton.api.tcp/TcpAuthentificationNonce.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.tcp/TcpAuthentificationNonce.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.tcp/TcpAuthentificationNonce.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.tcp/TcpAuthentificationNonce // org.ton.api.tcp/TcpAuthentificationNonce.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.tcp/TcpAuthentificationNonce) // org.ton.api.tcp/TcpAuthentificationNonce.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.tcp.TcpAuthentificationNonce){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.api.tcp/TcpAuthentificationNonce> { // org.ton.api.tcp/TcpAuthentificationNonce.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.api.tcp/TcpAuthentificationNonce // org.ton.api.tcp/TcpAuthentificationNonce.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.api.tcp/TcpAuthentificationNonce // org.ton.api.tcp/TcpAuthentificationNonce.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.api.tcp/TcpAuthentificationNonce // org.ton.api.tcp/TcpAuthentificationNonce.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.tcp/TcpAuthentificationNonce // org.ton.api.tcp/TcpAuthentificationNonce.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.api.tcp/TcpAuthentificationNonce // org.ton.api.tcp/TcpAuthentificationNonce.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.api.tcp/TcpAuthentificationNonce // org.ton.api.tcp/TcpAuthentificationNonce.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.api.tcp/TcpAuthentificationNonce // org.ton.api.tcp/TcpAuthentificationNonce.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.api.tcp/TcpAuthentificationNonce // org.ton.api.tcp/TcpAuthentificationNonce.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.api.tcp/TcpAuthentificationNonce) // org.ton.api.tcp/TcpAuthentificationNonce.Companion.encode|encode(kotlinx.io.Sink;org.ton.api.tcp.TcpAuthentificationNonce){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.tcp/TcpAuthentificationNonce) // org.ton.api.tcp/TcpAuthentificationNonce.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.tcp.TcpAuthentificationNonce){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.api.tcp/TcpAuthentificationNonce) // org.ton.api.tcp/TcpAuthentificationNonce.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.api.tcp.TcpAuthentificationNonce){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.api.tcp/TcpAuthentificationNonce) // org.ton.api.tcp/TcpAuthentificationNonce.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.api.tcp.TcpAuthentificationNonce){}[0]
        final fun encodeToByteArray(org.ton.api.tcp/TcpAuthentificationNonce, kotlin/Boolean): kotlin/ByteArray // org.ton.api.tcp/TcpAuthentificationNonce.Companion.encodeToByteArray|encodeToByteArray(org.ton.api.tcp.TcpAuthentificationNonce;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.api.tcp/TcpAuthentificationNonce, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.api.tcp/TcpAuthentificationNonce.Companion.encodeToByteString|encodeToByteString(org.ton.api.tcp.TcpAuthentificationNonce;kotlin.Boolean){}[0]
        final fun hash(org.ton.api.tcp/TcpAuthentificationNonce): kotlin/ByteArray // org.ton.api.tcp/TcpAuthentificationNonce.Companion.hash|hash(org.ton.api.tcp.TcpAuthentificationNonce){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.tcp/TcpAuthentificationNonce> // org.ton.api.tcp/TcpAuthentificationNonce.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.tcp/TcpPing { // org.ton.api.tcp/TcpPing|null[0]
    constructor <init>(kotlin/Long) // org.ton.api.tcp/TcpPing.<init>|<init>(kotlin.Long){}[0]

    final val randomId // org.ton.api.tcp/TcpPing.randomId|{}randomId[0]
        final fun <get-randomId>(): kotlin/Long // org.ton.api.tcp/TcpPing.randomId.<get-randomId>|<get-randomId>(){}[0]

    final fun component1(): kotlin/Long // org.ton.api.tcp/TcpPing.component1|component1(){}[0]
    final fun copy(kotlin/Long = ...): org.ton.api.tcp/TcpPing // org.ton.api.tcp/TcpPing.copy|copy(kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.tcp/TcpPing.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.tcp/TcpPing.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.tcp/TcpPing.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.tcp/TcpPing> { // org.ton.api.tcp/TcpPing.$serializer|null[0]
        final val descriptor // org.ton.api.tcp/TcpPing.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.tcp/TcpPing.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.tcp/TcpPing.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.tcp/TcpPing // org.ton.api.tcp/TcpPing.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.tcp/TcpPing) // org.ton.api.tcp/TcpPing.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.tcp.TcpPing){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.api.tcp/TcpPing> { // org.ton.api.tcp/TcpPing.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.api.tcp/TcpPing // org.ton.api.tcp/TcpPing.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.api.tcp/TcpPing // org.ton.api.tcp/TcpPing.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.api.tcp/TcpPing // org.ton.api.tcp/TcpPing.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.tcp/TcpPing // org.ton.api.tcp/TcpPing.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.api.tcp/TcpPing // org.ton.api.tcp/TcpPing.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.api.tcp/TcpPing // org.ton.api.tcp/TcpPing.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.api.tcp/TcpPing // org.ton.api.tcp/TcpPing.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.api.tcp/TcpPing // org.ton.api.tcp/TcpPing.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.api.tcp/TcpPing) // org.ton.api.tcp/TcpPing.Companion.encode|encode(kotlinx.io.Sink;org.ton.api.tcp.TcpPing){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.tcp/TcpPing) // org.ton.api.tcp/TcpPing.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.tcp.TcpPing){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.api.tcp/TcpPing) // org.ton.api.tcp/TcpPing.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.api.tcp.TcpPing){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.api.tcp/TcpPing) // org.ton.api.tcp/TcpPing.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.api.tcp.TcpPing){}[0]
        final fun encodeToByteArray(org.ton.api.tcp/TcpPing, kotlin/Boolean): kotlin/ByteArray // org.ton.api.tcp/TcpPing.Companion.encodeToByteArray|encodeToByteArray(org.ton.api.tcp.TcpPing;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.api.tcp/TcpPing, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.api.tcp/TcpPing.Companion.encodeToByteString|encodeToByteString(org.ton.api.tcp.TcpPing;kotlin.Boolean){}[0]
        final fun hash(org.ton.api.tcp/TcpPing): kotlin/ByteArray // org.ton.api.tcp/TcpPing.Companion.hash|hash(org.ton.api.tcp.TcpPing){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.tcp/TcpPing> // org.ton.api.tcp/TcpPing.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.tcp/TcpPong { // org.ton.api.tcp/TcpPong|null[0]
    constructor <init>(kotlin/Long) // org.ton.api.tcp/TcpPong.<init>|<init>(kotlin.Long){}[0]

    final val randomId // org.ton.api.tcp/TcpPong.randomId|{}randomId[0]
        final fun <get-randomId>(): kotlin/Long // org.ton.api.tcp/TcpPong.randomId.<get-randomId>|<get-randomId>(){}[0]

    final fun component1(): kotlin/Long // org.ton.api.tcp/TcpPong.component1|component1(){}[0]
    final fun copy(kotlin/Long = ...): org.ton.api.tcp/TcpPong // org.ton.api.tcp/TcpPong.copy|copy(kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.tcp/TcpPong.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.tcp/TcpPong.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.tcp/TcpPong.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.tcp/TcpPong> { // org.ton.api.tcp/TcpPong.$serializer|null[0]
        final val descriptor // org.ton.api.tcp/TcpPong.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.tcp/TcpPong.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.tcp/TcpPong.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.tcp/TcpPong // org.ton.api.tcp/TcpPong.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.tcp/TcpPong) // org.ton.api.tcp/TcpPong.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.tcp.TcpPong){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.api.tcp/TcpPong> { // org.ton.api.tcp/TcpPong.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.api.tcp/TcpPong // org.ton.api.tcp/TcpPong.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.api.tcp/TcpPong // org.ton.api.tcp/TcpPong.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.api.tcp/TcpPong // org.ton.api.tcp/TcpPong.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.tcp/TcpPong // org.ton.api.tcp/TcpPong.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.api.tcp/TcpPong // org.ton.api.tcp/TcpPong.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.api.tcp/TcpPong // org.ton.api.tcp/TcpPong.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.api.tcp/TcpPong // org.ton.api.tcp/TcpPong.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.api.tcp/TcpPong // org.ton.api.tcp/TcpPong.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.api.tcp/TcpPong) // org.ton.api.tcp/TcpPong.Companion.encode|encode(kotlinx.io.Sink;org.ton.api.tcp.TcpPong){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.tcp/TcpPong) // org.ton.api.tcp/TcpPong.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.tcp.TcpPong){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.api.tcp/TcpPong) // org.ton.api.tcp/TcpPong.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.api.tcp.TcpPong){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.api.tcp/TcpPong) // org.ton.api.tcp/TcpPong.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.api.tcp.TcpPong){}[0]
        final fun encodeToByteArray(org.ton.api.tcp/TcpPong, kotlin/Boolean): kotlin/ByteArray // org.ton.api.tcp/TcpPong.Companion.encodeToByteArray|encodeToByteArray(org.ton.api.tcp.TcpPong;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.api.tcp/TcpPong, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.api.tcp/TcpPong.Companion.encodeToByteString|encodeToByteString(org.ton.api.tcp.TcpPong;kotlin.Boolean){}[0]
        final fun hash(org.ton.api.tcp/TcpPong): kotlin/ByteArray // org.ton.api.tcp/TcpPong.Companion.hash|hash(org.ton.api.tcp.TcpPong){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.tcp/TcpPong> // org.ton.api.tcp/TcpPong.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.tonnode/TonNodeBlockIdExt : org.ton.api.tonnode/TonNodeBlockId { // org.ton.api.tonnode/TonNodeBlockIdExt|null[0]
    constructor <init>(kotlin/Int, kotlin/Long, kotlin/Int, kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString) // org.ton.api.tonnode/TonNodeBlockIdExt.<init>|<init>(kotlin.Int;kotlin.Long;kotlin.Int;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
    constructor <init>(org.ton.api.tonnode/TonNodeBlockId = ..., kotlinx.io.bytestring/ByteString = ..., kotlinx.io.bytestring/ByteString = ...) // org.ton.api.tonnode/TonNodeBlockIdExt.<init>|<init>(org.ton.api.tonnode.TonNodeBlockId;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]

    final val fileHash // org.ton.api.tonnode/TonNodeBlockIdExt.fileHash|{}fileHash[0]
        final fun <get-fileHash>(): kotlinx.io.bytestring/ByteString // org.ton.api.tonnode/TonNodeBlockIdExt.fileHash.<get-fileHash>|<get-fileHash>(){}[0]
    final val rootHash // org.ton.api.tonnode/TonNodeBlockIdExt.rootHash|{}rootHash[0]
        final fun <get-rootHash>(): kotlinx.io.bytestring/ByteString // org.ton.api.tonnode/TonNodeBlockIdExt.rootHash.<get-rootHash>|<get-rootHash>(){}[0]
    final val seqno // org.ton.api.tonnode/TonNodeBlockIdExt.seqno|{}seqno[0]
        final fun <get-seqno>(): kotlin/Int // org.ton.api.tonnode/TonNodeBlockIdExt.seqno.<get-seqno>|<get-seqno>(){}[0]
    final val shard // org.ton.api.tonnode/TonNodeBlockIdExt.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Long // org.ton.api.tonnode/TonNodeBlockIdExt.shard.<get-shard>|<get-shard>(){}[0]
    final val workchain // org.ton.api.tonnode/TonNodeBlockIdExt.workchain|{}workchain[0]
        final fun <get-workchain>(): kotlin/Int // org.ton.api.tonnode/TonNodeBlockIdExt.workchain.<get-workchain>|<get-workchain>(){}[0]

    final fun component1(): kotlin/Int // org.ton.api.tonnode/TonNodeBlockIdExt.component1|component1(){}[0]
    final fun component2(): kotlin/Long // org.ton.api.tonnode/TonNodeBlockIdExt.component2|component2(){}[0]
    final fun component3(): kotlin/Int // org.ton.api.tonnode/TonNodeBlockIdExt.component3|component3(){}[0]
    final fun component4(): kotlinx.io.bytestring/ByteString // org.ton.api.tonnode/TonNodeBlockIdExt.component4|component4(){}[0]
    final fun component5(): kotlinx.io.bytestring/ByteString // org.ton.api.tonnode/TonNodeBlockIdExt.component5|component5(){}[0]
    final fun copy(kotlin/Int = ..., kotlin/Long = ..., kotlin/Int = ..., kotlinx.io.bytestring/ByteString = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.api.tonnode/TonNodeBlockIdExt.copy|copy(kotlin.Int;kotlin.Long;kotlin.Int;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.tonnode/TonNodeBlockIdExt.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.tonnode/TonNodeBlockIdExt.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.tonnode/TonNodeBlockIdExt.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.tonnode/TonNodeBlockIdExt> { // org.ton.api.tonnode/TonNodeBlockIdExt.$serializer|null[0]
        final val descriptor // org.ton.api.tonnode/TonNodeBlockIdExt.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.tonnode/TonNodeBlockIdExt.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.tonnode/TonNodeBlockIdExt.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.api.tonnode/TonNodeBlockIdExt.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.tonnode/TonNodeBlockIdExt) // org.ton.api.tonnode/TonNodeBlockIdExt.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.tonnode.TonNodeBlockIdExt){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.api.tonnode/TonNodeBlockIdExt> { // org.ton.api.tonnode/TonNodeBlockIdExt.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.api.tonnode/TonNodeBlockIdExt.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.api.tonnode/TonNodeBlockIdExt.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.api.tonnode/TonNodeBlockIdExt.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.api.tonnode/TonNodeBlockIdExt.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.api.tonnode/TonNodeBlockIdExt.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.api.tonnode/TonNodeBlockIdExt.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.api.tonnode/TonNodeBlockIdExt.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.api.tonnode/TonNodeBlockIdExt.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.api.tonnode/TonNodeBlockIdExt) // org.ton.api.tonnode/TonNodeBlockIdExt.Companion.encode|encode(kotlinx.io.Sink;org.ton.api.tonnode.TonNodeBlockIdExt){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.tonnode/TonNodeBlockIdExt) // org.ton.api.tonnode/TonNodeBlockIdExt.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.tonnode.TonNodeBlockIdExt){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.api.tonnode/TonNodeBlockIdExt) // org.ton.api.tonnode/TonNodeBlockIdExt.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.api.tonnode.TonNodeBlockIdExt){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.api.tonnode/TonNodeBlockIdExt) // org.ton.api.tonnode/TonNodeBlockIdExt.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.api.tonnode.TonNodeBlockIdExt){}[0]
        final fun encodeToByteArray(org.ton.api.tonnode/TonNodeBlockIdExt, kotlin/Boolean): kotlin/ByteArray // org.ton.api.tonnode/TonNodeBlockIdExt.Companion.encodeToByteArray|encodeToByteArray(org.ton.api.tonnode.TonNodeBlockIdExt;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.api.tonnode/TonNodeBlockIdExt, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.api.tonnode/TonNodeBlockIdExt.Companion.encodeToByteString|encodeToByteString(org.ton.api.tonnode.TonNodeBlockIdExt;kotlin.Boolean){}[0]
        final fun hash(org.ton.api.tonnode/TonNodeBlockIdExt): kotlin/ByteArray // org.ton.api.tonnode/TonNodeBlockIdExt.Companion.hash|hash(org.ton.api.tonnode.TonNodeBlockIdExt){}[0]
        final fun parse(kotlin/String): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.api.tonnode/TonNodeBlockIdExt.Companion.parse|parse(kotlin.String){}[0]
        final fun parseOrNull(kotlin/String): org.ton.api.tonnode/TonNodeBlockIdExt? // org.ton.api.tonnode/TonNodeBlockIdExt.Companion.parseOrNull|parseOrNull(kotlin.String){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.tonnode/TonNodeBlockIdExt> // org.ton.api.tonnode/TonNodeBlockIdExt.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.tonnode/TonNodeZeroStateIdExt { // org.ton.api.tonnode/TonNodeZeroStateIdExt|null[0]
    constructor <init>(kotlin/Int, kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString) // org.ton.api.tonnode/TonNodeZeroStateIdExt.<init>|<init>(kotlin.Int;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
    constructor <init>(org.ton.api.tonnode/TonNodeBlockIdExt) // org.ton.api.tonnode/TonNodeZeroStateIdExt.<init>|<init>(org.ton.api.tonnode.TonNodeBlockIdExt){}[0]

    final val fileHash // org.ton.api.tonnode/TonNodeZeroStateIdExt.fileHash|{}fileHash[0]
        final fun <get-fileHash>(): kotlinx.io.bytestring/ByteString // org.ton.api.tonnode/TonNodeZeroStateIdExt.fileHash.<get-fileHash>|<get-fileHash>(){}[0]
    final val rootHash // org.ton.api.tonnode/TonNodeZeroStateIdExt.rootHash|{}rootHash[0]
        final fun <get-rootHash>(): kotlinx.io.bytestring/ByteString // org.ton.api.tonnode/TonNodeZeroStateIdExt.rootHash.<get-rootHash>|<get-rootHash>(){}[0]
    final val workchain // org.ton.api.tonnode/TonNodeZeroStateIdExt.workchain|{}workchain[0]
        final fun <get-workchain>(): kotlin/Int // org.ton.api.tonnode/TonNodeZeroStateIdExt.workchain.<get-workchain>|<get-workchain>(){}[0]

    final fun component1(): kotlin/Int // org.ton.api.tonnode/TonNodeZeroStateIdExt.component1|component1(){}[0]
    final fun component2(): kotlinx.io.bytestring/ByteString // org.ton.api.tonnode/TonNodeZeroStateIdExt.component2|component2(){}[0]
    final fun component3(): kotlinx.io.bytestring/ByteString // org.ton.api.tonnode/TonNodeZeroStateIdExt.component3|component3(){}[0]
    final fun copy(kotlin/Int = ..., kotlinx.io.bytestring/ByteString = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.api.tonnode/TonNodeZeroStateIdExt // org.ton.api.tonnode/TonNodeZeroStateIdExt.copy|copy(kotlin.Int;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.tonnode/TonNodeZeroStateIdExt.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.tonnode/TonNodeZeroStateIdExt.hashCode|hashCode(){}[0]
    final fun isMasterchain(): kotlin/Boolean // org.ton.api.tonnode/TonNodeZeroStateIdExt.isMasterchain|isMasterchain(){}[0]
    final fun isValid(): kotlin/Boolean // org.ton.api.tonnode/TonNodeZeroStateIdExt.isValid|isValid(){}[0]
    final fun toString(): kotlin/String // org.ton.api.tonnode/TonNodeZeroStateIdExt.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.tonnode/TonNodeZeroStateIdExt> { // org.ton.api.tonnode/TonNodeZeroStateIdExt.$serializer|null[0]
        final val descriptor // org.ton.api.tonnode/TonNodeZeroStateIdExt.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.tonnode/TonNodeZeroStateIdExt.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.tonnode/TonNodeZeroStateIdExt.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.tonnode/TonNodeZeroStateIdExt // org.ton.api.tonnode/TonNodeZeroStateIdExt.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.tonnode/TonNodeZeroStateIdExt) // org.ton.api.tonnode/TonNodeZeroStateIdExt.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.tonnode.TonNodeZeroStateIdExt){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.api.tonnode/TonNodeZeroStateIdExt> { // org.ton.api.tonnode/TonNodeZeroStateIdExt.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.tonnode/TonNodeZeroStateIdExt // org.ton.api.tonnode/TonNodeZeroStateIdExt.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.tonnode/TonNodeZeroStateIdExt) // org.ton.api.tonnode/TonNodeZeroStateIdExt.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.tonnode.TonNodeZeroStateIdExt){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.tonnode/TonNodeZeroStateIdExt> // org.ton.api.tonnode/TonNodeZeroStateIdExt.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.validator.config/ValidatorConfigGlobal { // org.ton.api.validator.config/ValidatorConfigGlobal|null[0]
    constructor <init>(org.ton.api.tonnode/TonNodeBlockIdExt = ..., org.ton.api.tonnode/TonNodeBlockIdExt = ..., kotlin.collections/Collection<org.ton.api.tonnode/TonNodeBlockIdExt> = ...) // org.ton.api.validator.config/ValidatorConfigGlobal.<init>|<init>(org.ton.api.tonnode.TonNodeBlockIdExt;org.ton.api.tonnode.TonNodeBlockIdExt;kotlin.collections.Collection<org.ton.api.tonnode.TonNodeBlockIdExt>){}[0]

    final val hardforks // org.ton.api.validator.config/ValidatorConfigGlobal.hardforks|{}hardforks[0]
        final fun <get-hardforks>(): kotlin.collections/Collection<org.ton.api.tonnode/TonNodeBlockIdExt> // org.ton.api.validator.config/ValidatorConfigGlobal.hardforks.<get-hardforks>|<get-hardforks>(){}[0]
    final val initBlock // org.ton.api.validator.config/ValidatorConfigGlobal.initBlock|{}initBlock[0]
        final fun <get-initBlock>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.api.validator.config/ValidatorConfigGlobal.initBlock.<get-initBlock>|<get-initBlock>(){}[0]
    final val zeroState // org.ton.api.validator.config/ValidatorConfigGlobal.zeroState|{}zeroState[0]
        final fun <get-zeroState>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.api.validator.config/ValidatorConfigGlobal.zeroState.<get-zeroState>|<get-zeroState>(){}[0]

    final fun component1(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.api.validator.config/ValidatorConfigGlobal.component1|component1(){}[0]
    final fun component2(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.api.validator.config/ValidatorConfigGlobal.component2|component2(){}[0]
    final fun component3(): kotlin.collections/Collection<org.ton.api.tonnode/TonNodeBlockIdExt> // org.ton.api.validator.config/ValidatorConfigGlobal.component3|component3(){}[0]
    final fun copy(org.ton.api.tonnode/TonNodeBlockIdExt = ..., org.ton.api.tonnode/TonNodeBlockIdExt = ..., kotlin.collections/Collection<org.ton.api.tonnode/TonNodeBlockIdExt> = ...): org.ton.api.validator.config/ValidatorConfigGlobal // org.ton.api.validator.config/ValidatorConfigGlobal.copy|copy(org.ton.api.tonnode.TonNodeBlockIdExt;org.ton.api.tonnode.TonNodeBlockIdExt;kotlin.collections.Collection<org.ton.api.tonnode.TonNodeBlockIdExt>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.validator.config/ValidatorConfigGlobal.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.validator.config/ValidatorConfigGlobal.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.validator.config/ValidatorConfigGlobal.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.validator.config/ValidatorConfigGlobal> { // org.ton.api.validator.config/ValidatorConfigGlobal.$serializer|null[0]
        final val descriptor // org.ton.api.validator.config/ValidatorConfigGlobal.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.validator.config/ValidatorConfigGlobal.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.validator.config/ValidatorConfigGlobal.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.validator.config/ValidatorConfigGlobal // org.ton.api.validator.config/ValidatorConfigGlobal.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.validator.config/ValidatorConfigGlobal) // org.ton.api.validator.config/ValidatorConfigGlobal.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.validator.config.ValidatorConfigGlobal){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.api.validator.config/ValidatorConfigGlobal> { // org.ton.api.validator.config/ValidatorConfigGlobal.Companion|null[0]
        final val $childSerializers // org.ton.api.validator.config/ValidatorConfigGlobal.Companion.$childSerializers|{}$childSerializers[0]

        final fun decode(kotlin/ByteArray): org.ton.api.validator.config/ValidatorConfigGlobal // org.ton.api.validator.config/ValidatorConfigGlobal.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.api.validator.config/ValidatorConfigGlobal // org.ton.api.validator.config/ValidatorConfigGlobal.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.api.validator.config/ValidatorConfigGlobal // org.ton.api.validator.config/ValidatorConfigGlobal.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.api.validator.config/ValidatorConfigGlobal // org.ton.api.validator.config/ValidatorConfigGlobal.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.api.validator.config/ValidatorConfigGlobal // org.ton.api.validator.config/ValidatorConfigGlobal.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.api.validator.config/ValidatorConfigGlobal // org.ton.api.validator.config/ValidatorConfigGlobal.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.api.validator.config/ValidatorConfigGlobal // org.ton.api.validator.config/ValidatorConfigGlobal.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.api.validator.config/ValidatorConfigGlobal // org.ton.api.validator.config/ValidatorConfigGlobal.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.api.validator.config/ValidatorConfigGlobal) // org.ton.api.validator.config/ValidatorConfigGlobal.Companion.encode|encode(kotlinx.io.Sink;org.ton.api.validator.config.ValidatorConfigGlobal){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.api.validator.config/ValidatorConfigGlobal) // org.ton.api.validator.config/ValidatorConfigGlobal.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.api.validator.config.ValidatorConfigGlobal){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.api.validator.config/ValidatorConfigGlobal) // org.ton.api.validator.config/ValidatorConfigGlobal.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.api.validator.config.ValidatorConfigGlobal){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.api.validator.config/ValidatorConfigGlobal) // org.ton.api.validator.config/ValidatorConfigGlobal.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.api.validator.config.ValidatorConfigGlobal){}[0]
        final fun encodeToByteArray(org.ton.api.validator.config/ValidatorConfigGlobal, kotlin/Boolean): kotlin/ByteArray // org.ton.api.validator.config/ValidatorConfigGlobal.Companion.encodeToByteArray|encodeToByteArray(org.ton.api.validator.config.ValidatorConfigGlobal;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.api.validator.config/ValidatorConfigGlobal, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.api.validator.config/ValidatorConfigGlobal.Companion.encodeToByteString|encodeToByteString(org.ton.api.validator.config.ValidatorConfigGlobal;kotlin.Boolean){}[0]
        final fun hash(org.ton.api.validator.config/ValidatorConfigGlobal): kotlin/ByteArray // org.ton.api.validator.config/ValidatorConfigGlobal.Companion.hash|hash(org.ton.api.validator.config.ValidatorConfigGlobal){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.validator.config/ValidatorConfigGlobal> // org.ton.api.validator.config/ValidatorConfigGlobal.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.api.validator.config/ValidatorConfigRandomLocal : org.ton.api.validator.config/ValidatorConfigLocal { // org.ton.api.validator.config/ValidatorConfigRandomLocal|null[0]
    constructor <init>(org.ton.api.adnl/AdnlAddressList) // org.ton.api.validator.config/ValidatorConfigRandomLocal.<init>|<init>(org.ton.api.adnl.AdnlAddressList){}[0]

    final val addrList // org.ton.api.validator.config/ValidatorConfigRandomLocal.addrList|{}addrList[0]
        final fun <get-addrList>(): org.ton.api.adnl/AdnlAddressList // org.ton.api.validator.config/ValidatorConfigRandomLocal.addrList.<get-addrList>|<get-addrList>(){}[0]

    final fun component1(): org.ton.api.adnl/AdnlAddressList // org.ton.api.validator.config/ValidatorConfigRandomLocal.component1|component1(){}[0]
    final fun copy(org.ton.api.adnl/AdnlAddressList = ...): org.ton.api.validator.config/ValidatorConfigRandomLocal // org.ton.api.validator.config/ValidatorConfigRandomLocal.copy|copy(org.ton.api.adnl.AdnlAddressList){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.validator.config/ValidatorConfigRandomLocal.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.validator.config/ValidatorConfigRandomLocal.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.validator.config/ValidatorConfigRandomLocal.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.api.validator.config/ValidatorConfigRandomLocal> { // org.ton.api.validator.config/ValidatorConfigRandomLocal.$serializer|null[0]
        final val descriptor // org.ton.api.validator.config/ValidatorConfigRandomLocal.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.api.validator.config/ValidatorConfigRandomLocal.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.api.validator.config/ValidatorConfigRandomLocal.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.api.validator.config/ValidatorConfigRandomLocal // org.ton.api.validator.config/ValidatorConfigRandomLocal.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.api.validator.config/ValidatorConfigRandomLocal) // org.ton.api.validator.config/ValidatorConfigRandomLocal.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.api.validator.config.ValidatorConfigRandomLocal){}[0]
    }

    final object Companion { // org.ton.api.validator.config/ValidatorConfigRandomLocal.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.api.validator.config/ValidatorConfigRandomLocal> // org.ton.api.validator.config/ValidatorConfigRandomLocal.Companion.serializer|serializer(){}[0]
    }
}

final value class org.ton.api.tonnode/Shard { // org.ton.api.tonnode/Shard|null[0]
    constructor <init>(kotlin/Long) // org.ton.api.tonnode/Shard.<init>|<init>(kotlin.Long){}[0]

    final val value // org.ton.api.tonnode/Shard.value|{}value[0]
        final fun <get-value>(): kotlin/Long // org.ton.api.tonnode/Shard.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.api.tonnode/Shard.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.api.tonnode/Shard.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.api.tonnode/Shard.toString|toString(){}[0]
    final inline fun bin(): kotlin/String // org.ton.api.tonnode/Shard.bin|bin(){}[0]
    final inline fun child(kotlin/Boolean): org.ton.api.tonnode/Shard // org.ton.api.tonnode/Shard.child|child(kotlin.Boolean){}[0]
    final inline fun contains(org.ton.api.tonnode/Shard): kotlin/Boolean // org.ton.api.tonnode/Shard.contains|contains(org.ton.api.tonnode.Shard){}[0]
    final inline fun hex(): kotlin/String // org.ton.api.tonnode/Shard.hex|hex(){}[0]
    final inline fun parent(): org.ton.api.tonnode/Shard // org.ton.api.tonnode/Shard.parent|parent(){}[0]
    final inline fun toLong(): kotlin/Long // org.ton.api.tonnode/Shard.toLong|toLong(){}[0]

    final object Companion { // org.ton.api.tonnode/Shard.Companion|null[0]
        final const val ID_ALL // org.ton.api.tonnode/Shard.Companion.ID_ALL|{}ID_ALL[0]
            final fun <get-ID_ALL>(): kotlin/Long // org.ton.api.tonnode/Shard.Companion.ID_ALL.<get-ID_ALL>|<get-ID_ALL>(){}[0]

        final val ALL // org.ton.api.tonnode/Shard.Companion.ALL|{}ALL[0]
            final fun <get-ALL>(): org.ton.api.tonnode/Shard // org.ton.api.tonnode/Shard.Companion.ALL.<get-ALL>|<get-ALL>(){}[0]

        final fun check(org.ton.api.tonnode/TonNodeBlockIdExt, org.ton.api.tonnode/TonNodeBlockIdExt, org.ton.cell/Cell) // org.ton.api.tonnode/Shard.Companion.check|check(org.ton.api.tonnode.TonNodeBlockIdExt;org.ton.api.tonnode.TonNodeBlockIdExt;org.ton.cell.Cell){}[0]
        final fun childShard(kotlin/Long, kotlin/Boolean): kotlin/Long // org.ton.api.tonnode/Shard.Companion.childShard|childShard(kotlin.Long;kotlin.Boolean){}[0]
        final fun containsShard(kotlin/Long, kotlin/Long): kotlin/Boolean // org.ton.api.tonnode/Shard.Companion.containsShard|containsShard(kotlin.Long;kotlin.Long){}[0]
        final fun extractShard(org.ton.bitstring/BitString): kotlin/Long // org.ton.api.tonnode/Shard.Companion.extractShard|extractShard(org.ton.bitstring.BitString){}[0]
        final fun parentShard(kotlin/Long): kotlin/Long // org.ton.api.tonnode/Shard.Companion.parentShard|parentShard(kotlin.Long){}[0]
    }
}

open class org.ton.api.exception/TonCancelledException : org.ton.api.exception/TonException { // org.ton.api.exception/TonCancelledException|null[0]
    constructor <init>(kotlin/String, kotlin/Throwable? = ...) // org.ton.api.exception/TonCancelledException.<init>|<init>(kotlin.String;kotlin.Throwable?){}[0]

    open val cause // org.ton.api.exception/TonCancelledException.cause|{}cause[0]
        open fun <get-cause>(): kotlin/Throwable? // org.ton.api.exception/TonCancelledException.cause.<get-cause>|<get-cause>(){}[0]
    open val code // org.ton.api.exception/TonCancelledException.code|{}code[0]
        open fun <get-code>(): kotlin/Int // org.ton.api.exception/TonCancelledException.code.<get-code>|<get-code>(){}[0]
    open val message // org.ton.api.exception/TonCancelledException.message|{}message[0]
        open fun <get-message>(): kotlin/String // org.ton.api.exception/TonCancelledException.message.<get-message>|<get-message>(){}[0]

    final object Companion { // org.ton.api.exception/TonCancelledException.Companion|null[0]
        final const val CODE // org.ton.api.exception/TonCancelledException.Companion.CODE|{}CODE[0]
            final fun <get-CODE>(): kotlin/Int // org.ton.api.exception/TonCancelledException.Companion.CODE.<get-CODE>|<get-CODE>(){}[0]
    }
}

open class org.ton.api.exception/TonErrorException : org.ton.api.exception/TonException { // org.ton.api.exception/TonErrorException|null[0]
    constructor <init>(kotlin/String, kotlin/Throwable? = ...) // org.ton.api.exception/TonErrorException.<init>|<init>(kotlin.String;kotlin.Throwable?){}[0]

    open val cause // org.ton.api.exception/TonErrorException.cause|{}cause[0]
        open fun <get-cause>(): kotlin/Throwable? // org.ton.api.exception/TonErrorException.cause.<get-cause>|<get-cause>(){}[0]
    open val code // org.ton.api.exception/TonErrorException.code|{}code[0]
        open fun <get-code>(): kotlin/Int // org.ton.api.exception/TonErrorException.code.<get-code>|<get-code>(){}[0]
    open val message // org.ton.api.exception/TonErrorException.message|{}message[0]
        open fun <get-message>(): kotlin/String // org.ton.api.exception/TonErrorException.message.<get-message>|<get-message>(){}[0]

    final object Companion { // org.ton.api.exception/TonErrorException.Companion|null[0]
        final const val CODE // org.ton.api.exception/TonErrorException.Companion.CODE|{}CODE[0]
            final fun <get-CODE>(): kotlin/Int // org.ton.api.exception/TonErrorException.Companion.CODE.<get-CODE>|<get-CODE>(){}[0]
    }
}

open class org.ton.api.exception/TonFailureException : org.ton.api.exception/TonException { // org.ton.api.exception/TonFailureException|null[0]
    constructor <init>(kotlin/String, kotlin/Throwable? = ...) // org.ton.api.exception/TonFailureException.<init>|<init>(kotlin.String;kotlin.Throwable?){}[0]

    open val cause // org.ton.api.exception/TonFailureException.cause|{}cause[0]
        open fun <get-cause>(): kotlin/Throwable? // org.ton.api.exception/TonFailureException.cause.<get-cause>|<get-cause>(){}[0]
    open val code // org.ton.api.exception/TonFailureException.code|{}code[0]
        open fun <get-code>(): kotlin/Int // org.ton.api.exception/TonFailureException.code.<get-code>|<get-code>(){}[0]
    open val message // org.ton.api.exception/TonFailureException.message|{}message[0]
        open fun <get-message>(): kotlin/String // org.ton.api.exception/TonFailureException.message.<get-message>|<get-message>(){}[0]

    final object Companion { // org.ton.api.exception/TonFailureException.Companion|null[0]
        final const val CODE // org.ton.api.exception/TonFailureException.Companion.CODE|{}CODE[0]
            final fun <get-CODE>(): kotlin/Int // org.ton.api.exception/TonFailureException.Companion.CODE.<get-CODE>|<get-CODE>(){}[0]
    }
}

open class org.ton.api.exception/TonNotReadyException : org.ton.api.exception/TonException { // org.ton.api.exception/TonNotReadyException|null[0]
    constructor <init>(kotlin/String, kotlin/Throwable? = ...) // org.ton.api.exception/TonNotReadyException.<init>|<init>(kotlin.String;kotlin.Throwable?){}[0]

    open val cause // org.ton.api.exception/TonNotReadyException.cause|{}cause[0]
        open fun <get-cause>(): kotlin/Throwable? // org.ton.api.exception/TonNotReadyException.cause.<get-cause>|<get-cause>(){}[0]
    open val code // org.ton.api.exception/TonNotReadyException.code|{}code[0]
        open fun <get-code>(): kotlin/Int // org.ton.api.exception/TonNotReadyException.code.<get-code>|<get-code>(){}[0]
    open val message // org.ton.api.exception/TonNotReadyException.message|{}message[0]
        open fun <get-message>(): kotlin/String // org.ton.api.exception/TonNotReadyException.message.<get-message>|<get-message>(){}[0]

    final object Companion { // org.ton.api.exception/TonNotReadyException.Companion|null[0]
        final const val CODE // org.ton.api.exception/TonNotReadyException.Companion.CODE|{}CODE[0]
            final fun <get-CODE>(): kotlin/Int // org.ton.api.exception/TonNotReadyException.Companion.CODE.<get-CODE>|<get-CODE>(){}[0]
    }
}

open class org.ton.api.exception/TonProtoviolationException : org.ton.api.exception/TonException { // org.ton.api.exception/TonProtoviolationException|null[0]
    constructor <init>(kotlin/String, kotlin/Throwable? = ...) // org.ton.api.exception/TonProtoviolationException.<init>|<init>(kotlin.String;kotlin.Throwable?){}[0]

    open val cause // org.ton.api.exception/TonProtoviolationException.cause|{}cause[0]
        open fun <get-cause>(): kotlin/Throwable? // org.ton.api.exception/TonProtoviolationException.cause.<get-cause>|<get-cause>(){}[0]
    open val code // org.ton.api.exception/TonProtoviolationException.code|{}code[0]
        open fun <get-code>(): kotlin/Int // org.ton.api.exception/TonProtoviolationException.code.<get-code>|<get-code>(){}[0]
    open val message // org.ton.api.exception/TonProtoviolationException.message|{}message[0]
        open fun <get-message>(): kotlin/String // org.ton.api.exception/TonProtoviolationException.message.<get-message>|<get-message>(){}[0]

    final object Companion { // org.ton.api.exception/TonProtoviolationException.Companion|null[0]
        final const val CODE // org.ton.api.exception/TonProtoviolationException.Companion.CODE|{}CODE[0]
            final fun <get-CODE>(): kotlin/Int // org.ton.api.exception/TonProtoviolationException.Companion.CODE.<get-CODE>|<get-CODE>(){}[0]
    }
}

open class org.ton.api.exception/TonTimeoutException : org.ton.api.exception/TonException { // org.ton.api.exception/TonTimeoutException|null[0]
    constructor <init>(kotlin/String, kotlin/Throwable? = ...) // org.ton.api.exception/TonTimeoutException.<init>|<init>(kotlin.String;kotlin.Throwable?){}[0]

    open val cause // org.ton.api.exception/TonTimeoutException.cause|{}cause[0]
        open fun <get-cause>(): kotlin/Throwable? // org.ton.api.exception/TonTimeoutException.cause.<get-cause>|<get-cause>(){}[0]
    open val code // org.ton.api.exception/TonTimeoutException.code|{}code[0]
        open fun <get-code>(): kotlin/Int // org.ton.api.exception/TonTimeoutException.code.<get-code>|<get-code>(){}[0]
    open val message // org.ton.api.exception/TonTimeoutException.message|{}message[0]
        open fun <get-message>(): kotlin/String // org.ton.api.exception/TonTimeoutException.message.<get-message>|<get-message>(){}[0]

    final object Companion { // org.ton.api.exception/TonTimeoutException.Companion|null[0]
        final const val CODE // org.ton.api.exception/TonTimeoutException.Companion.CODE|{}CODE[0]
            final fun <get-CODE>(): kotlin/Int // org.ton.api.exception/TonTimeoutException.Companion.CODE.<get-CODE>|<get-CODE>(){}[0]
    }
}

open class org.ton.api.exception/TonWarningException : org.ton.api.exception/TonException { // org.ton.api.exception/TonWarningException|null[0]
    constructor <init>(kotlin/String, kotlin/Throwable? = ...) // org.ton.api.exception/TonWarningException.<init>|<init>(kotlin.String;kotlin.Throwable?){}[0]

    open val cause // org.ton.api.exception/TonWarningException.cause|{}cause[0]
        open fun <get-cause>(): kotlin/Throwable? // org.ton.api.exception/TonWarningException.cause.<get-cause>|<get-cause>(){}[0]
    open val code // org.ton.api.exception/TonWarningException.code|{}code[0]
        open fun <get-code>(): kotlin/Int // org.ton.api.exception/TonWarningException.code.<get-code>|<get-code>(){}[0]
    open val message // org.ton.api.exception/TonWarningException.message|{}message[0]
        open fun <get-message>(): kotlin/String // org.ton.api.exception/TonWarningException.message.<get-message>|<get-message>(){}[0]

    final object Companion { // org.ton.api.exception/TonWarningException.Companion|null[0]
        final const val CODE // org.ton.api.exception/TonWarningException.Companion.CODE|{}CODE[0]
            final fun <get-CODE>(): kotlin/Int // org.ton.api.exception/TonWarningException.Companion.CODE.<get-CODE>|<get-CODE>(){}[0]
    }
}

final object org.ton.api.adnl.message/AdnlMessageNop : org.ton.api.adnl.message/AdnlMessage, org.ton.tl/TlConstructor<org.ton.api.adnl.message/AdnlMessageNop> { // org.ton.api.adnl.message/AdnlMessageNop|null[0]
    final const val SIZE_BYTES // org.ton.api.adnl.message/AdnlMessageNop.SIZE_BYTES|{}SIZE_BYTES[0]
        final fun <get-SIZE_BYTES>(): kotlin/Int // org.ton.api.adnl.message/AdnlMessageNop.SIZE_BYTES.<get-SIZE_BYTES>|<get-SIZE_BYTES>(){}[0]

    final fun decode(org.ton.tl/TlReader): org.ton.api.adnl.message/AdnlMessageNop // org.ton.api.adnl.message/AdnlMessageNop.decode|decode(org.ton.tl.TlReader){}[0]
    final fun encode(org.ton.tl/TlWriter, org.ton.api.adnl.message/AdnlMessageNop) // org.ton.api.adnl.message/AdnlMessageNop.encode|encode(org.ton.tl.TlWriter;org.ton.api.adnl.message.AdnlMessageNop){}[0]
}

final object org.ton.api.dht/DhtStored : org.ton.tl/TlConstructor<org.ton.api.dht/DhtStored>, org.ton.tl/TlObject<org.ton.api.dht/DhtStored> { // org.ton.api.dht/DhtStored|null[0]
    final fun decode(org.ton.tl/TlReader): org.ton.api.dht/DhtStored // org.ton.api.dht/DhtStored.decode|decode(org.ton.tl.TlReader){}[0]
    final fun encode(org.ton.tl/TlWriter, org.ton.api.dht/DhtStored) // org.ton.api.dht/DhtStored.encode|encode(org.ton.tl.TlWriter;org.ton.api.dht.DhtStored){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.api.dht/DhtStored> // org.ton.api.dht/DhtStored.tlCodec|tlCodec(){}[0]
}

final object org.ton.api.tonnode/Workchain { // org.ton.api.tonnode/Workchain|null[0]
    final const val BASECHAIN_ID // org.ton.api.tonnode/Workchain.BASECHAIN_ID|{}BASECHAIN_ID[0]
        final fun <get-BASECHAIN_ID>(): kotlin/Int // org.ton.api.tonnode/Workchain.BASECHAIN_ID.<get-BASECHAIN_ID>|<get-BASECHAIN_ID>(){}[0]
    final const val INVALID_WORKCHAIN // org.ton.api.tonnode/Workchain.INVALID_WORKCHAIN|{}INVALID_WORKCHAIN[0]
        final fun <get-INVALID_WORKCHAIN>(): kotlin/Int // org.ton.api.tonnode/Workchain.INVALID_WORKCHAIN.<get-INVALID_WORKCHAIN>|<get-INVALID_WORKCHAIN>(){}[0]
    final const val MASTERCHAIN_ID // org.ton.api.tonnode/Workchain.MASTERCHAIN_ID|{}MASTERCHAIN_ID[0]
        final fun <get-MASTERCHAIN_ID>(): kotlin/Int // org.ton.api.tonnode/Workchain.MASTERCHAIN_ID.<get-MASTERCHAIN_ID>|<get-MASTERCHAIN_ID>(){}[0]
}

final inline fun (kotlin.collections/Iterable<org.ton.api.http/HttpHeader>).org.ton.api.http/get(kotlin/String): kotlin/String? // org.ton.api.http/get|get@kotlin.collections.Iterable<org.ton.api.http.HttpHeader>(kotlin.String){}[0]
final inline fun (kotlin.collections/Iterable<org.ton.api.http/HttpHeader>).org.ton.api.http/getAll(kotlin/String): kotlin.sequences/Sequence<kotlin/String> // org.ton.api.http/getAll|getAll@kotlin.collections.Iterable<org.ton.api.http.HttpHeader>(kotlin.String){}[0]
final inline fun (kotlin/Long).org.ton.api.tonnode/toShard(): org.ton.api.tonnode/Shard // org.ton.api.tonnode/toShard|toShard@kotlin.Long(){}[0]
final inline fun (kotlin/ULong).org.ton.api.tonnode/toShard(): org.ton.api.tonnode/Shard // org.ton.api.tonnode/toShard|toShard@kotlin.ULong(){}[0]
final inline fun (org.ton.api.tonnode/Shard).org.ton.api.tonnode/toULong(): kotlin/ULong // org.ton.api.tonnode/toULong|toULong@org.ton.api.tonnode.Shard(){}[0]
final inline fun org.ton.api.exception/TonException(kotlin/Int, kotlin/String, kotlin/Throwable? = ...): org.ton.api.exception/TonException // org.ton.api.exception/TonException|TonException(kotlin.Int;kotlin.String;kotlin.Throwable?){}[0]
final inline fun org.ton.api.tonnode/TonNodeBlockId(kotlin/Int = ..., kotlin/Long = ..., kotlin/Int = ...): org.ton.api.tonnode/TonNodeBlockId // org.ton.api.tonnode/TonNodeBlockId|TonNodeBlockId(kotlin.Int;kotlin.Long;kotlin.Int){}[0]
final inline fun org.ton.api.tonnode/TonNodeBlockId(kotlin/String): org.ton.api.tonnode/TonNodeBlockId // org.ton.api.tonnode/TonNodeBlockId|TonNodeBlockId(kotlin.String){}[0]
