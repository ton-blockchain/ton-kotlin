// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, watchosArm32, watchosArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <org.ton.kotlin:ton-kotlin-block-tlb>
open enum class org.ton.block/AccStatusChange : kotlin/Enum<org.ton.block/AccStatusChange> { // org.ton.block/AccStatusChange|null[0]
    enum entry DELETED // org.ton.block/AccStatusChange.DELETED|null[0]
    enum entry FROZEN // org.ton.block/AccStatusChange.FROZEN|null[0]
    enum entry UNCHANGED // org.ton.block/AccStatusChange.UNCHANGED|null[0]

    final val entries // org.ton.block/AccStatusChange.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<org.ton.block/AccStatusChange> // org.ton.block/AccStatusChange.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): org.ton.block/AccStatusChange // org.ton.block/AccStatusChange.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<org.ton.block/AccStatusChange> // org.ton.block/AccStatusChange.values|values#static(){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.block/AccStatusChange> { // org.ton.block/AccStatusChange.Companion|null[0]
        final fun createCell(org.ton.block/AccStatusChange): org.ton.cell/Cell // org.ton.block/AccStatusChange.Companion.createCell|createCell(org.ton.block.AccStatusChange){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/AccStatusChange // org.ton.block/AccStatusChange.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/AccStatusChange // org.ton.block/AccStatusChange.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/AccStatusChange // org.ton.block/AccStatusChange.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/AccStatusChange) // org.ton.block/AccStatusChange.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.AccStatusChange){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/AccStatusChange, org.ton.kotlin.cell/CellContext) // org.ton.block/AccStatusChange.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.AccStatusChange;org.ton.kotlin.cell.CellContext){}[0]
    }
}

open enum class org.ton.block/AccountStatus : kotlin/Enum<org.ton.block/AccountStatus> { // org.ton.block/AccountStatus|null[0]
    enum entry ACTIVE // org.ton.block/AccountStatus.ACTIVE|null[0]
    enum entry FROZEN // org.ton.block/AccountStatus.FROZEN|null[0]
    enum entry NONEXIST // org.ton.block/AccountStatus.NONEXIST|null[0]
    enum entry UNINIT // org.ton.block/AccountStatus.UNINIT|null[0]

    final val entries // org.ton.block/AccountStatus.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<org.ton.block/AccountStatus> // org.ton.block/AccountStatus.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): org.ton.block/AccountStatus // org.ton.block/AccountStatus.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<org.ton.block/AccountStatus> // org.ton.block/AccountStatus.values|values#static(){}[0]

    final object Companion : org.ton.tlb.providers/TlbCombinatorProvider<org.ton.block/AccountStatus> { // org.ton.block/AccountStatus.Companion|null[0]
        final fun createCell(org.ton.block/AccountStatus): org.ton.cell/Cell // org.ton.block/AccountStatus.Companion.createCell|createCell(org.ton.block.AccountStatus){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/AccountStatus // org.ton.block/AccountStatus.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/AccountStatus // org.ton.block/AccountStatus.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/AccountStatus // org.ton.block/AccountStatus.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/AccountStatus) // org.ton.block/AccountStatus.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.AccountStatus){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/AccountStatus, org.ton.kotlin.cell/CellContext) // org.ton.block/AccountStatus.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.AccountStatus;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCombinator(): org.ton.tlb/TlbCombinator<org.ton.block/AccountStatus> // org.ton.block/AccountStatus.Companion.tlbCombinator|tlbCombinator(){}[0]
    }
}

abstract interface org.ton.block/MutableVmStack : org.ton.block/VmStack { // org.ton.block/MutableVmStack|null[0]
    abstract fun interchange(kotlin/Int, kotlin/Int) // org.ton.block/MutableVmStack.interchange|interchange(kotlin.Int;kotlin.Int){}[0]
    abstract fun pop(): org.ton.block/VmStackValue // org.ton.block/MutableVmStack.pop|pop(){}[0]
    abstract fun push(org.ton.block/VmStackValue) // org.ton.block/MutableVmStack.push|push(org.ton.block.VmStackValue){}[0]
    open fun interchange(kotlin/Int) // org.ton.block/MutableVmStack.interchange|interchange(kotlin.Int){}[0]
    open fun popBool(): kotlin/Boolean // org.ton.block/MutableVmStack.popBool|popBool(){}[0]
    open fun popBuilder(): org.ton.cell/CellBuilder // org.ton.block/MutableVmStack.popBuilder|popBuilder(){}[0]
    open fun popCell(): org.ton.cell/Cell // org.ton.block/MutableVmStack.popCell|popCell(){}[0]
    open fun popCont(): org.ton.block/VmCont // org.ton.block/MutableVmStack.popCont|popCont(){}[0]
    open fun popInt(): org.ton.bigint/BigInt // org.ton.block/MutableVmStack.popInt|popInt(){}[0]
    open fun popNull(): org.ton.block/VmStackNull // org.ton.block/MutableVmStack.popNull|popNull(){}[0]
    open fun popNumber(): org.ton.block/VmStackNumber // org.ton.block/MutableVmStack.popNumber|popNumber(){}[0]
    open fun popSlice(): org.ton.cell/CellSlice // org.ton.block/MutableVmStack.popSlice|popSlice(){}[0]
    open fun popTinyInt(): kotlin/Long // org.ton.block/MutableVmStack.popTinyInt|popTinyInt(){}[0]
    open fun popTuple(): org.ton.block/VmTuple // org.ton.block/MutableVmStack.popTuple|popTuple(){}[0]
    open fun pushBool(kotlin/Boolean) // org.ton.block/MutableVmStack.pushBool|pushBool(kotlin.Boolean){}[0]
    open fun pushBuilder(org.ton.cell/CellBuilder) // org.ton.block/MutableVmStack.pushBuilder|pushBuilder(org.ton.cell.CellBuilder){}[0]
    open fun pushCell(org.ton.cell/Cell) // org.ton.block/MutableVmStack.pushCell|pushCell(org.ton.cell.Cell){}[0]
    open fun pushCont(org.ton.block/VmCont) // org.ton.block/MutableVmStack.pushCont|pushCont(org.ton.block.VmCont){}[0]
    open fun pushInt(org.ton.bigint/BigInt) // org.ton.block/MutableVmStack.pushInt|pushInt(org.ton.bigint.BigInt){}[0]
    open fun pushNan() // org.ton.block/MutableVmStack.pushNan|pushNan(){}[0]
    open fun pushNull() // org.ton.block/MutableVmStack.pushNull|pushNull(){}[0]
    open fun pushSlice(org.ton.cell/CellSlice) // org.ton.block/MutableVmStack.pushSlice|pushSlice(org.ton.cell.CellSlice){}[0]
    open fun pushTinyInt(kotlin/Boolean) // org.ton.block/MutableVmStack.pushTinyInt|pushTinyInt(kotlin.Boolean){}[0]
    open fun pushTinyInt(kotlin/Int) // org.ton.block/MutableVmStack.pushTinyInt|pushTinyInt(kotlin.Int){}[0]
    open fun pushTinyInt(kotlin/Long) // org.ton.block/MutableVmStack.pushTinyInt|pushTinyInt(kotlin.Long){}[0]
    open fun pushTuple(org.ton.block/VmTuple) // org.ton.block/MutableVmStack.pushTuple|pushTuple(org.ton.block.VmTuple){}[0]
    open fun swap() // org.ton.block/MutableVmStack.swap|swap(){}[0]
}

abstract interface org.ton.block/VmStack : kotlin.collections/Collection<org.ton.block/VmStackValue> { // org.ton.block/VmStack|null[0]
    abstract val depth // org.ton.block/VmStack.depth|{}depth[0]
        abstract fun <get-depth>(): kotlin/Int // org.ton.block/VmStack.depth.<get-depth>|<get-depth>(){}[0]
    abstract val stack // org.ton.block/VmStack.stack|{}stack[0]
        abstract fun <get-stack>(): org.ton.block/VmStackList // org.ton.block/VmStack.stack.<get-stack>|<get-stack>(){}[0]
    open val size // org.ton.block/VmStack.size|{}size[0]
        open fun <get-size>(): kotlin/Int // org.ton.block/VmStack.size.<get-size>|<get-size>(){}[0]

    abstract fun toMutableVmStack(): org.ton.block/MutableVmStack // org.ton.block/VmStack.toMutableVmStack|toMutableVmStack(){}[0]
    open fun contains(org.ton.block/VmStackValue): kotlin/Boolean // org.ton.block/VmStack.contains|contains(org.ton.block.VmStackValue){}[0]
    open fun containsAll(kotlin.collections/Collection<org.ton.block/VmStackValue>): kotlin/Boolean // org.ton.block/VmStack.containsAll|containsAll(kotlin.collections.Collection<org.ton.block.VmStackValue>){}[0]
    open fun get(kotlin/Int): org.ton.block/VmStackValue // org.ton.block/VmStack.get|get(kotlin.Int){}[0]
    open fun isEmpty(): kotlin/Boolean // org.ton.block/VmStack.isEmpty|isEmpty(){}[0]
    open fun iterator(): kotlin.collections/Iterator<org.ton.block/VmStackValue> // org.ton.block/VmStack.iterator|iterator(){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.block/VmStack> { // org.ton.block/VmStack.Companion|null[0]
        final fun createCell(org.ton.block/VmStack): org.ton.cell/Cell // org.ton.block/VmStack.Companion.createCell|createCell(org.ton.block.VmStack){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/VmStack // org.ton.block/VmStack.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/VmStack // org.ton.block/VmStack.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/VmStack // org.ton.block/VmStack.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmStack) // org.ton.block/VmStack.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmStack){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmStack, org.ton.kotlin.cell/CellContext) // org.ton.block/VmStack.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmStack;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCodec(): org.ton.tlb/TlbConstructor<org.ton.block/VmStack> // org.ton.block/VmStack.Companion.tlbCodec|tlbCodec(){}[0]
    }
}

sealed interface <#A: kotlin/Any?, #B: kotlin/Any?> org.ton.block/Either : org.ton.tlb/TlbObject { // org.ton.block/Either|null[0]
    abstract val x // org.ton.block/Either.x|{}x[0]
        abstract fun <get-x>(): #A? // org.ton.block/Either.x.<get-x>|<get-x>(){}[0]
    abstract val y // org.ton.block/Either.y|{}y[0]
        abstract fun <get-y>(): #B? // org.ton.block/Either.y.<get-y>|<get-y>(){}[0]

    open fun toPair(): kotlin/Pair<#A?, #B?> // org.ton.block/Either.toPair|toPair(){}[0]

    final class <#A1: kotlin/Any?, #B1: kotlin/Any?> Left : org.ton.block/Either<#A1, #B1> { // org.ton.block/Either.Left|null[0]
        constructor <init>(#A1) // org.ton.block/Either.Left.<init>|<init>(1:0){}[0]

        final val value // org.ton.block/Either.Left.value|{}value[0]
            final fun <get-value>(): #A1 // org.ton.block/Either.Left.value.<get-value>|<get-value>(){}[0]
        final val x // org.ton.block/Either.Left.x|{}x[0]
            final fun <get-x>(): #A1? // org.ton.block/Either.Left.x.<get-x>|<get-x>(){}[0]
        final val y // org.ton.block/Either.Left.y|{}y[0]
            final fun <get-y>(): #B1? // org.ton.block/Either.Left.y.<get-y>|<get-y>(){}[0]

        final fun component1(): #A1? // org.ton.block/Either.Left.component1|component1(){}[0]
        final fun component2(): #B1? // org.ton.block/Either.Left.component2|component2(){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/Either.Left.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // org.ton.block/Either.Left.hashCode|hashCode(){}[0]
        final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/Either.Left.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
        final fun toString(): kotlin/String // org.ton.block/Either.Left.toString|toString(){}[0]
    }

    final class <#A1: kotlin/Any?, #B1: kotlin/Any?> Right : org.ton.block/Either<#A1, #B1> { // org.ton.block/Either.Right|null[0]
        constructor <init>(#B1) // org.ton.block/Either.Right.<init>|<init>(1:1){}[0]

        final val value // org.ton.block/Either.Right.value|{}value[0]
            final fun <get-value>(): #B1 // org.ton.block/Either.Right.value.<get-value>|<get-value>(){}[0]
        final val x // org.ton.block/Either.Right.x|{}x[0]
            final fun <get-x>(): #A1? // org.ton.block/Either.Right.x.<get-x>|<get-x>(){}[0]
        final val y // org.ton.block/Either.Right.y|{}y[0]
            final fun <get-y>(): #B1? // org.ton.block/Either.Right.y.<get-y>|<get-y>(){}[0]

        final fun component1(): #A1? // org.ton.block/Either.Right.component1|component1(){}[0]
        final fun component2(): #B1? // org.ton.block/Either.Right.component2|component2(){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/Either.Right.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // org.ton.block/Either.Right.hashCode|hashCode(){}[0]
        final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/Either.Right.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
        final fun toString(): kotlin/String // org.ton.block/Either.Right.toString|toString(){}[0]
    }

    final object Companion { // org.ton.block/Either.Companion|null[0]
        final fun <#A2: kotlin/Any?, #B2: kotlin/Any?> of(#A2?, #B2?): org.ton.block/Either<#A2, #B2> // org.ton.block/Either.Companion.of|of(0:0?;0:1?){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?, #B2: kotlin/Any?> tlbCodec(org.ton.tlb/TlbCodec<#A2>, org.ton.tlb/TlbCodec<#B2>): org.ton.tlb/TlbCodec<org.ton.block/Either<#A2, #B2>> // org.ton.block/Either.Companion.tlbCodec|tlbCodec(org.ton.tlb.TlbCodec<0:0>;org.ton.tlb.TlbCodec<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    }
}

sealed interface <#A: kotlin/Any?> org.ton.block/BinTree : kotlin.collections/Iterable<#A>, org.ton.tlb/TlbObject { // org.ton.block/BinTree|null[0]
    abstract fun nodes(): kotlin.sequences/Sequence<#A> // org.ton.block/BinTree.nodes|nodes(){}[0]
    open fun iterator(): kotlin.collections/Iterator<#A> // org.ton.block/BinTree.iterator|iterator(){}[0]

    final object Companion { // org.ton.block/BinTree.Companion|null[0]
        final fun <#A2: kotlin/Any?> tlbCodec(org.ton.tlb/TlbCodec<#A2>): org.ton.tlb/TlbCombinator<org.ton.block/BinTree<#A2>> // org.ton.block/BinTree.Companion.tlbCodec|tlbCodec(org.ton.tlb.TlbCodec<0:0>){0§<kotlin.Any?>}[0]
    }
}

sealed interface <#A: kotlin/Any?> org.ton.block/Maybe : org.ton.tlb/TlbObject { // org.ton.block/Maybe|null[0]
    abstract val value // org.ton.block/Maybe.value|{}value[0]
        abstract fun <get-value>(): #A? // org.ton.block/Maybe.value.<get-value>|<get-value>(){}[0]

    open fun get(): #A? // org.ton.block/Maybe.get|get(){}[0]

    final object Companion { // org.ton.block/Maybe.Companion|null[0]
        final fun <#A2: kotlin/Any?> of(#A2?): org.ton.block/Maybe<#A2> // org.ton.block/Maybe.Companion.of|of(0:0?){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> tlbCodec(org.ton.tlb/TlbCodec<#A2>): org.ton.tlb/TlbCodec<org.ton.block/Maybe<#A2>> // org.ton.block/Maybe.Companion.tlbCodec|tlbCodec(org.ton.tlb.TlbCodec<0:0>){0§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?> invoke(org.ton.tlb/TlbCodec<#A2>): org.ton.tlb/TlbCodec<org.ton.block/Maybe<#A2>> // org.ton.block/Maybe.Companion.invoke|invoke(org.ton.tlb.TlbCodec<0:0>){0§<kotlin.Any?>}[0]
    }
}

sealed interface org.ton.block/AccountState : org.ton.tlb/TlbObject { // org.ton.block/AccountState|null[0]
    abstract val status // org.ton.block/AccountState.status|{}status[0]
        abstract fun <get-status>(): org.ton.block/AccountStatus // org.ton.block/AccountState.status.<get-status>|<get-status>(){}[0]

    final object Companion : org.ton.tlb.providers/TlbCombinatorProvider<org.ton.block/AccountState> { // org.ton.block/AccountState.Companion|null[0]
        final fun createCell(org.ton.block/AccountState): org.ton.cell/Cell // org.ton.block/AccountState.Companion.createCell|createCell(org.ton.block.AccountState){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/AccountState // org.ton.block/AccountState.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/AccountState // org.ton.block/AccountState.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/AccountState // org.ton.block/AccountState.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/AccountState) // org.ton.block/AccountState.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.AccountState){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/AccountState, org.ton.kotlin.cell/CellContext) // org.ton.block/AccountState.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.AccountState;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCombinator(): org.ton.tlb/TlbCombinator<org.ton.block/AccountState> // org.ton.block/AccountState.Companion.tlbCombinator|tlbCombinator(){}[0]
    }
}

sealed interface org.ton.block/BlkPrevInfo : org.ton.tlb/TlbObject { // org.ton.block/BlkPrevInfo|null[0]
    final object Companion { // org.ton.block/BlkPrevInfo.Companion|null[0]
        final fun tlbCodec(kotlin/Boolean): org.ton.tlb/TlbCodec<org.ton.block/BlkPrevInfo> // org.ton.block/BlkPrevInfo.Companion.tlbCodec|tlbCodec(kotlin.Boolean){}[0]
        final fun tlbCodec(kotlin/Int): org.ton.tlb/TlbCodec<org.ton.block/BlkPrevInfo> // org.ton.block/BlkPrevInfo.Companion.tlbCodec|tlbCodec(kotlin.Int){}[0]
    }
}

sealed interface org.ton.block/BlockCreateStats : org.ton.tlb/TlbObject { // org.ton.block/BlockCreateStats|null[0]
    final object Companion : org.ton.tlb.providers/TlbCombinatorProvider<org.ton.block/BlockCreateStats> { // org.ton.block/BlockCreateStats.Companion|null[0]
        final fun createCell(org.ton.block/BlockCreateStats): org.ton.cell/Cell // org.ton.block/BlockCreateStats.Companion.createCell|createCell(org.ton.block.BlockCreateStats){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/BlockCreateStats // org.ton.block/BlockCreateStats.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/BlockCreateStats // org.ton.block/BlockCreateStats.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/BlockCreateStats // org.ton.block/BlockCreateStats.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/BlockCreateStats) // org.ton.block/BlockCreateStats.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.BlockCreateStats){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/BlockCreateStats, org.ton.kotlin.cell/CellContext) // org.ton.block/BlockCreateStats.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.BlockCreateStats;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCombinator(): org.ton.tlb/TlbCombinator<org.ton.block/BlockCreateStats> // org.ton.block/BlockCreateStats.Companion.tlbCombinator|tlbCombinator(){}[0]
    }
}

sealed interface org.ton.block/CommonMsgInfo : org.ton.tlb/TlbObject { // org.ton.block/CommonMsgInfo|null[0]
    final object Companion : org.ton.tlb/TlbCodec<org.ton.block/CommonMsgInfo> { // org.ton.block/CommonMsgInfo.Companion|null[0]
        final fun createCell(org.ton.block/CommonMsgInfo): org.ton.cell/Cell // org.ton.block/CommonMsgInfo.Companion.createCell|createCell(org.ton.block.CommonMsgInfo){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/CommonMsgInfo // org.ton.block/CommonMsgInfo.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/CommonMsgInfo // org.ton.block/CommonMsgInfo.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/CommonMsgInfo // org.ton.block/CommonMsgInfo.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/CommonMsgInfo) // org.ton.block/CommonMsgInfo.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.CommonMsgInfo){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/CommonMsgInfo, org.ton.kotlin.cell/CellContext) // org.ton.block/CommonMsgInfo.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.CommonMsgInfo;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCodec(): org.ton.tlb/TlbCombinator<org.ton.block/CommonMsgInfo> // org.ton.block/CommonMsgInfo.Companion.tlbCodec|tlbCodec(){}[0]
    }
}

sealed interface org.ton.block/CommonMsgInfoRelaxed : org.ton.tlb/TlbObject { // org.ton.block/CommonMsgInfoRelaxed|null[0]
    final class ExtOutMsgInfoRelaxed : org.ton.block/CommonMsgInfoRelaxed { // org.ton.block/CommonMsgInfoRelaxed.ExtOutMsgInfoRelaxed|null[0]
        constructor <init>(org.ton.block/MsgAddress, org.ton.block/MsgAddressExt, kotlin/ULong, kotlin/UInt) // org.ton.block/CommonMsgInfoRelaxed.ExtOutMsgInfoRelaxed.<init>|<init>(org.ton.block.MsgAddress;org.ton.block.MsgAddressExt;kotlin.ULong;kotlin.UInt){}[0]

        final val createdAt // org.ton.block/CommonMsgInfoRelaxed.ExtOutMsgInfoRelaxed.createdAt|{}createdAt[0]
            final fun <get-createdAt>(): kotlin/UInt // org.ton.block/CommonMsgInfoRelaxed.ExtOutMsgInfoRelaxed.createdAt.<get-createdAt>|<get-createdAt>(){}[0]
        final val createdLt // org.ton.block/CommonMsgInfoRelaxed.ExtOutMsgInfoRelaxed.createdLt|{}createdLt[0]
            final fun <get-createdLt>(): kotlin/ULong // org.ton.block/CommonMsgInfoRelaxed.ExtOutMsgInfoRelaxed.createdLt.<get-createdLt>|<get-createdLt>(){}[0]
        final val dest // org.ton.block/CommonMsgInfoRelaxed.ExtOutMsgInfoRelaxed.dest|{}dest[0]
            final fun <get-dest>(): org.ton.block/MsgAddressExt // org.ton.block/CommonMsgInfoRelaxed.ExtOutMsgInfoRelaxed.dest.<get-dest>|<get-dest>(){}[0]
        final val src // org.ton.block/CommonMsgInfoRelaxed.ExtOutMsgInfoRelaxed.src|{}src[0]
            final fun <get-src>(): org.ton.block/MsgAddress // org.ton.block/CommonMsgInfoRelaxed.ExtOutMsgInfoRelaxed.src.<get-src>|<get-src>(){}[0]

        final fun component1(): org.ton.block/MsgAddress // org.ton.block/CommonMsgInfoRelaxed.ExtOutMsgInfoRelaxed.component1|component1(){}[0]
        final fun component2(): org.ton.block/MsgAddressExt // org.ton.block/CommonMsgInfoRelaxed.ExtOutMsgInfoRelaxed.component2|component2(){}[0]
        final fun component3(): kotlin/ULong // org.ton.block/CommonMsgInfoRelaxed.ExtOutMsgInfoRelaxed.component3|component3(){}[0]
        final fun component4(): kotlin/UInt // org.ton.block/CommonMsgInfoRelaxed.ExtOutMsgInfoRelaxed.component4|component4(){}[0]
        final fun copy(org.ton.block/MsgAddress = ..., org.ton.block/MsgAddressExt = ..., kotlin/ULong = ..., kotlin/UInt = ...): org.ton.block/CommonMsgInfoRelaxed.ExtOutMsgInfoRelaxed // org.ton.block/CommonMsgInfoRelaxed.ExtOutMsgInfoRelaxed.copy|copy(org.ton.block.MsgAddress;org.ton.block.MsgAddressExt;kotlin.ULong;kotlin.UInt){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/CommonMsgInfoRelaxed.ExtOutMsgInfoRelaxed.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // org.ton.block/CommonMsgInfoRelaxed.ExtOutMsgInfoRelaxed.hashCode|hashCode(){}[0]
        final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/CommonMsgInfoRelaxed.ExtOutMsgInfoRelaxed.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
        final fun toString(): kotlin/String // org.ton.block/CommonMsgInfoRelaxed.ExtOutMsgInfoRelaxed.toString|toString(){}[0]
    }

    final class IntMsgInfoRelaxed : org.ton.block/CommonMsgInfoRelaxed { // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed|null[0]
        constructor <init>(kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., org.ton.block/MsgAddress = ..., org.ton.block/MsgAddressInt = ..., org.ton.block/CurrencyCollection = ..., org.ton.block/Coins = ..., org.ton.block/Coins = ..., kotlin/ULong = ..., kotlin/UInt = ...) // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.<init>|<init>(kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;org.ton.block.MsgAddress;org.ton.block.MsgAddressInt;org.ton.block.CurrencyCollection;org.ton.block.Coins;org.ton.block.Coins;kotlin.ULong;kotlin.UInt){}[0]
        constructor <init>(org.ton.block/MsgAddressInt, kotlin/Boolean, org.ton.block/Coins) // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.<init>|<init>(org.ton.block.MsgAddressInt;kotlin.Boolean;org.ton.block.Coins){}[0]
        constructor <init>(org.ton.block/MsgAddressInt, kotlin/Boolean, org.ton.block/CurrencyCollection) // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.<init>|<init>(org.ton.block.MsgAddressInt;kotlin.Boolean;org.ton.block.CurrencyCollection){}[0]

        final val bounce // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.bounce|{}bounce[0]
            final fun <get-bounce>(): kotlin/Boolean // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.bounce.<get-bounce>|<get-bounce>(){}[0]
        final val bounced // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.bounced|{}bounced[0]
            final fun <get-bounced>(): kotlin/Boolean // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.bounced.<get-bounced>|<get-bounced>(){}[0]
        final val createdAt // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.createdAt|{}createdAt[0]
            final fun <get-createdAt>(): kotlin/UInt // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.createdAt.<get-createdAt>|<get-createdAt>(){}[0]
        final val createdLt // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.createdLt|{}createdLt[0]
            final fun <get-createdLt>(): kotlin/ULong // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.createdLt.<get-createdLt>|<get-createdLt>(){}[0]
        final val dest // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.dest|{}dest[0]
            final fun <get-dest>(): org.ton.block/MsgAddressInt // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.dest.<get-dest>|<get-dest>(){}[0]
        final val fwdFee // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.fwdFee|{}fwdFee[0]
            final fun <get-fwdFee>(): org.ton.block/Coins // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.fwdFee.<get-fwdFee>|<get-fwdFee>(){}[0]
        final val ihrDisabled // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.ihrDisabled|{}ihrDisabled[0]
            final fun <get-ihrDisabled>(): kotlin/Boolean // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.ihrDisabled.<get-ihrDisabled>|<get-ihrDisabled>(){}[0]
        final val ihrFee // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.ihrFee|{}ihrFee[0]
            final fun <get-ihrFee>(): org.ton.block/Coins // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.ihrFee.<get-ihrFee>|<get-ihrFee>(){}[0]
        final val src // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.src|{}src[0]
            final fun <get-src>(): org.ton.block/MsgAddress // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.src.<get-src>|<get-src>(){}[0]
        final val value // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.value|{}value[0]
            final fun <get-value>(): org.ton.block/CurrencyCollection // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.value.<get-value>|<get-value>(){}[0]

        final fun component1(): kotlin/Boolean // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.component1|component1(){}[0]
        final fun component10(): kotlin/UInt // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.component10|component10(){}[0]
        final fun component2(): kotlin/Boolean // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.component2|component2(){}[0]
        final fun component3(): kotlin/Boolean // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.component3|component3(){}[0]
        final fun component4(): org.ton.block/MsgAddress // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.component4|component4(){}[0]
        final fun component5(): org.ton.block/MsgAddressInt // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.component5|component5(){}[0]
        final fun component6(): org.ton.block/CurrencyCollection // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.component6|component6(){}[0]
        final fun component7(): org.ton.block/Coins // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.component7|component7(){}[0]
        final fun component8(): org.ton.block/Coins // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.component8|component8(){}[0]
        final fun component9(): kotlin/ULong // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.component9|component9(){}[0]
        final fun copy(kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., org.ton.block/MsgAddress = ..., org.ton.block/MsgAddressInt = ..., org.ton.block/CurrencyCollection = ..., org.ton.block/Coins = ..., org.ton.block/Coins = ..., kotlin/ULong = ..., kotlin/UInt = ...): org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.copy|copy(kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;org.ton.block.MsgAddress;org.ton.block.MsgAddressInt;org.ton.block.CurrencyCollection;org.ton.block.Coins;org.ton.block.Coins;kotlin.ULong;kotlin.UInt){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.hashCode|hashCode(){}[0]
        final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
        final fun toString(): kotlin/String // org.ton.block/CommonMsgInfoRelaxed.IntMsgInfoRelaxed.toString|toString(){}[0]
    }

    final object Companion : org.ton.tlb.providers/TlbCombinatorProvider<org.ton.block/CommonMsgInfoRelaxed> { // org.ton.block/CommonMsgInfoRelaxed.Companion|null[0]
        final fun createCell(org.ton.block/CommonMsgInfoRelaxed): org.ton.cell/Cell // org.ton.block/CommonMsgInfoRelaxed.Companion.createCell|createCell(org.ton.block.CommonMsgInfoRelaxed){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/CommonMsgInfoRelaxed // org.ton.block/CommonMsgInfoRelaxed.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/CommonMsgInfoRelaxed // org.ton.block/CommonMsgInfoRelaxed.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/CommonMsgInfoRelaxed // org.ton.block/CommonMsgInfoRelaxed.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/CommonMsgInfoRelaxed) // org.ton.block/CommonMsgInfoRelaxed.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.CommonMsgInfoRelaxed){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/CommonMsgInfoRelaxed, org.ton.kotlin.cell/CellContext) // org.ton.block/CommonMsgInfoRelaxed.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.CommonMsgInfoRelaxed;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCombinator(): org.ton.tlb/TlbCombinator<org.ton.block/CommonMsgInfoRelaxed> // org.ton.block/CommonMsgInfoRelaxed.Companion.tlbCombinator|tlbCombinator(){}[0]
    }
}

sealed interface org.ton.block/CryptoSignature { // org.ton.block/CryptoSignature|null[0]
    final object Companion : org.ton.tlb.providers/TlbCombinatorProvider<org.ton.block/CryptoSignature> { // org.ton.block/CryptoSignature.Companion|null[0]
        final fun createCell(org.ton.block/CryptoSignature): org.ton.cell/Cell // org.ton.block/CryptoSignature.Companion.createCell|createCell(org.ton.block.CryptoSignature){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/CryptoSignature // org.ton.block/CryptoSignature.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/CryptoSignature // org.ton.block/CryptoSignature.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/CryptoSignature // org.ton.block/CryptoSignature.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/CryptoSignature) // org.ton.block/CryptoSignature.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.CryptoSignature){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/CryptoSignature, org.ton.kotlin.cell/CellContext) // org.ton.block/CryptoSignature.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.CryptoSignature;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCombinator(): org.ton.tlb/TlbCombinator<org.ton.block/CryptoSignature> // org.ton.block/CryptoSignature.Companion.tlbCombinator|tlbCombinator(){}[0]
    }
}

sealed interface org.ton.block/DnsRecord { // org.ton.block/DnsRecord|null[0]
    final object Companion : org.ton.tlb.providers/TlbCombinatorProvider<org.ton.block/DnsRecord> { // org.ton.block/DnsRecord.Companion|null[0]
        final fun createCell(org.ton.block/DnsRecord): org.ton.cell/Cell // org.ton.block/DnsRecord.Companion.createCell|createCell(org.ton.block.DnsRecord){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/DnsRecord // org.ton.block/DnsRecord.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/DnsRecord // org.ton.block/DnsRecord.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/DnsRecord // org.ton.block/DnsRecord.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/DnsRecord) // org.ton.block/DnsRecord.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.DnsRecord){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/DnsRecord, org.ton.kotlin.cell/CellContext) // org.ton.block/DnsRecord.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.DnsRecord;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCombinator(): org.ton.tlb/TlbCombinator<org.ton.block/DnsRecord> // org.ton.block/DnsRecord.Companion.tlbCombinator|tlbCombinator(){}[0]
    }
}

sealed interface org.ton.block/FutureSplitMerge : org.ton.tlb/TlbObject { // org.ton.block/FutureSplitMerge|null[0]
    final class FsmMerge : org.ton.block/FutureSplitMerge { // org.ton.block/FutureSplitMerge.FsmMerge|null[0]
        constructor <init>(kotlin/UInt, kotlin/UInt) // org.ton.block/FutureSplitMerge.FsmMerge.<init>|<init>(kotlin.UInt;kotlin.UInt){}[0]

        final val interval // org.ton.block/FutureSplitMerge.FsmMerge.interval|{}interval[0]
            final fun <get-interval>(): kotlin/UInt // org.ton.block/FutureSplitMerge.FsmMerge.interval.<get-interval>|<get-interval>(){}[0]
        final val mergeUtime // org.ton.block/FutureSplitMerge.FsmMerge.mergeUtime|{}mergeUtime[0]
            final fun <get-mergeUtime>(): kotlin/UInt // org.ton.block/FutureSplitMerge.FsmMerge.mergeUtime.<get-mergeUtime>|<get-mergeUtime>(){}[0]

        final fun component1(): kotlin/UInt // org.ton.block/FutureSplitMerge.FsmMerge.component1|component1(){}[0]
        final fun component2(): kotlin/UInt // org.ton.block/FutureSplitMerge.FsmMerge.component2|component2(){}[0]
        final fun copy(kotlin/UInt = ..., kotlin/UInt = ...): org.ton.block/FutureSplitMerge.FsmMerge // org.ton.block/FutureSplitMerge.FsmMerge.copy|copy(kotlin.UInt;kotlin.UInt){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/FutureSplitMerge.FsmMerge.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // org.ton.block/FutureSplitMerge.FsmMerge.hashCode|hashCode(){}[0]
        final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/FutureSplitMerge.FsmMerge.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
        final fun toString(): kotlin/String // org.ton.block/FutureSplitMerge.FsmMerge.toString|toString(){}[0]

        final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/FutureSplitMerge.FsmMerge> { // org.ton.block/FutureSplitMerge.FsmMerge.Companion|null[0]
            final fun createCell(org.ton.block/FutureSplitMerge.FsmMerge): org.ton.cell/Cell // org.ton.block/FutureSplitMerge.FsmMerge.Companion.createCell|createCell(org.ton.block.FutureSplitMerge.FsmMerge){}[0]
            final fun loadTlb(org.ton.cell/Cell): org.ton.block/FutureSplitMerge.FsmMerge // org.ton.block/FutureSplitMerge.FsmMerge.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
            final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/FutureSplitMerge.FsmMerge // org.ton.block/FutureSplitMerge.FsmMerge.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
            final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/FutureSplitMerge.FsmMerge // org.ton.block/FutureSplitMerge.FsmMerge.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
            final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/FutureSplitMerge.FsmMerge) // org.ton.block/FutureSplitMerge.FsmMerge.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.FutureSplitMerge.FsmMerge){}[0]
            final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/FutureSplitMerge.FsmMerge, org.ton.kotlin.cell/CellContext) // org.ton.block/FutureSplitMerge.FsmMerge.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.FutureSplitMerge.FsmMerge;org.ton.kotlin.cell.CellContext){}[0]
            final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/FutureSplitMerge.FsmMerge> // org.ton.block/FutureSplitMerge.FsmMerge.Companion.tlbConstructor|tlbConstructor(){}[0]
        }
    }

    final class FsmSplit : org.ton.block/FutureSplitMerge { // org.ton.block/FutureSplitMerge.FsmSplit|null[0]
        constructor <init>(kotlin/UInt, kotlin/UInt) // org.ton.block/FutureSplitMerge.FsmSplit.<init>|<init>(kotlin.UInt;kotlin.UInt){}[0]

        final val interval // org.ton.block/FutureSplitMerge.FsmSplit.interval|{}interval[0]
            final fun <get-interval>(): kotlin/UInt // org.ton.block/FutureSplitMerge.FsmSplit.interval.<get-interval>|<get-interval>(){}[0]
        final val splitUtime // org.ton.block/FutureSplitMerge.FsmSplit.splitUtime|{}splitUtime[0]
            final fun <get-splitUtime>(): kotlin/UInt // org.ton.block/FutureSplitMerge.FsmSplit.splitUtime.<get-splitUtime>|<get-splitUtime>(){}[0]

        final fun component1(): kotlin/UInt // org.ton.block/FutureSplitMerge.FsmSplit.component1|component1(){}[0]
        final fun component2(): kotlin/UInt // org.ton.block/FutureSplitMerge.FsmSplit.component2|component2(){}[0]
        final fun copy(kotlin/UInt = ..., kotlin/UInt = ...): org.ton.block/FutureSplitMerge.FsmSplit // org.ton.block/FutureSplitMerge.FsmSplit.copy|copy(kotlin.UInt;kotlin.UInt){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/FutureSplitMerge.FsmSplit.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // org.ton.block/FutureSplitMerge.FsmSplit.hashCode|hashCode(){}[0]
        final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/FutureSplitMerge.FsmSplit.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
        final fun toString(): kotlin/String // org.ton.block/FutureSplitMerge.FsmSplit.toString|toString(){}[0]

        final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/FutureSplitMerge.FsmSplit> { // org.ton.block/FutureSplitMerge.FsmSplit.Companion|null[0]
            final fun createCell(org.ton.block/FutureSplitMerge.FsmSplit): org.ton.cell/Cell // org.ton.block/FutureSplitMerge.FsmSplit.Companion.createCell|createCell(org.ton.block.FutureSplitMerge.FsmSplit){}[0]
            final fun loadTlb(org.ton.cell/Cell): org.ton.block/FutureSplitMerge.FsmSplit // org.ton.block/FutureSplitMerge.FsmSplit.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
            final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/FutureSplitMerge.FsmSplit // org.ton.block/FutureSplitMerge.FsmSplit.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
            final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/FutureSplitMerge.FsmSplit // org.ton.block/FutureSplitMerge.FsmSplit.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
            final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/FutureSplitMerge.FsmSplit) // org.ton.block/FutureSplitMerge.FsmSplit.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.FutureSplitMerge.FsmSplit){}[0]
            final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/FutureSplitMerge.FsmSplit, org.ton.kotlin.cell/CellContext) // org.ton.block/FutureSplitMerge.FsmSplit.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.FutureSplitMerge.FsmSplit;org.ton.kotlin.cell.CellContext){}[0]
            final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/FutureSplitMerge.FsmSplit> // org.ton.block/FutureSplitMerge.FsmSplit.Companion.tlbConstructor|tlbConstructor(){}[0]
        }
    }

    final object Companion : org.ton.tlb.providers/TlbCombinatorProvider<org.ton.block/FutureSplitMerge> { // org.ton.block/FutureSplitMerge.Companion|null[0]
        final fun createCell(org.ton.block/FutureSplitMerge): org.ton.cell/Cell // org.ton.block/FutureSplitMerge.Companion.createCell|createCell(org.ton.block.FutureSplitMerge){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/FutureSplitMerge // org.ton.block/FutureSplitMerge.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/FutureSplitMerge // org.ton.block/FutureSplitMerge.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/FutureSplitMerge // org.ton.block/FutureSplitMerge.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/FutureSplitMerge) // org.ton.block/FutureSplitMerge.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.FutureSplitMerge){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/FutureSplitMerge, org.ton.kotlin.cell/CellContext) // org.ton.block/FutureSplitMerge.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.FutureSplitMerge;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCombinator(): org.ton.tlb/TlbCombinator<org.ton.block/FutureSplitMerge> // org.ton.block/FutureSplitMerge.Companion.tlbCombinator|tlbCombinator(){}[0]
    }

    final object FsmNone : org.ton.block/FutureSplitMerge, org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/FutureSplitMerge.FsmNone> { // org.ton.block/FutureSplitMerge.FsmNone|null[0]
        final fun createCell(org.ton.block/FutureSplitMerge.FsmNone): org.ton.cell/Cell // org.ton.block/FutureSplitMerge.FsmNone.createCell|createCell(org.ton.block.FutureSplitMerge.FsmNone){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/FutureSplitMerge.FsmNone // org.ton.block/FutureSplitMerge.FsmNone.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/FutureSplitMerge.FsmNone // org.ton.block/FutureSplitMerge.FsmNone.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/FutureSplitMerge.FsmNone // org.ton.block/FutureSplitMerge.FsmNone.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/FutureSplitMerge.FsmNone.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/FutureSplitMerge.FsmNone) // org.ton.block/FutureSplitMerge.FsmNone.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.FutureSplitMerge.FsmNone){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/FutureSplitMerge.FsmNone, org.ton.kotlin.cell/CellContext) // org.ton.block/FutureSplitMerge.FsmNone.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.FutureSplitMerge.FsmNone;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/FutureSplitMerge.FsmNone> // org.ton.block/FutureSplitMerge.FsmNone.tlbConstructor|tlbConstructor(){}[0]
        final fun toString(): kotlin/String // org.ton.block/FutureSplitMerge.FsmNone.toString|toString(){}[0]
    }
}

sealed interface org.ton.block/InMsg : org.ton.tlb/TlbObject { // org.ton.block/InMsg|null[0]
    final object Companion : org.ton.tlb.providers/TlbCombinatorProvider<org.ton.block/InMsg> { // org.ton.block/InMsg.Companion|null[0]
        final fun createCell(org.ton.block/InMsg): org.ton.cell/Cell // org.ton.block/InMsg.Companion.createCell|createCell(org.ton.block.InMsg){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/InMsg // org.ton.block/InMsg.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/InMsg // org.ton.block/InMsg.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/InMsg // org.ton.block/InMsg.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/InMsg) // org.ton.block/InMsg.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.InMsg){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/InMsg, org.ton.kotlin.cell/CellContext) // org.ton.block/InMsg.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.InMsg;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCombinator(): org.ton.tlb/TlbCombinator<org.ton.block/InMsg> // org.ton.block/InMsg.Companion.tlbCombinator|tlbCombinator(){}[0]
    }
}

sealed interface org.ton.block/IntermediateAddress : org.ton.tlb/TlbObject { // org.ton.block/IntermediateAddress|null[0]
    final object Companion : org.ton.tlb.providers/TlbCombinatorProvider<org.ton.block/IntermediateAddress> { // org.ton.block/IntermediateAddress.Companion|null[0]
        final fun createCell(org.ton.block/IntermediateAddress): org.ton.cell/Cell // org.ton.block/IntermediateAddress.Companion.createCell|createCell(org.ton.block.IntermediateAddress){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/IntermediateAddress // org.ton.block/IntermediateAddress.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/IntermediateAddress // org.ton.block/IntermediateAddress.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/IntermediateAddress // org.ton.block/IntermediateAddress.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/IntermediateAddress) // org.ton.block/IntermediateAddress.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.IntermediateAddress){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/IntermediateAddress, org.ton.kotlin.cell/CellContext) // org.ton.block/IntermediateAddress.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.IntermediateAddress;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCombinator(): org.ton.tlb/TlbCombinator<org.ton.block/IntermediateAddress> // org.ton.block/IntermediateAddress.Companion.tlbCombinator|tlbCombinator(){}[0]
    }
}

sealed interface org.ton.block/LibRef // org.ton.block/LibRef|null[0]

sealed interface org.ton.block/MsgAddress : org.ton.kotlin.cell/CellSizeable, org.ton.tlb/TlbObject { // org.ton.block/MsgAddress|null[0]
    final object Companion : org.ton.tlb.providers/TlbCombinatorProvider<org.ton.block/MsgAddress> { // org.ton.block/MsgAddress.Companion|null[0]
        final fun createCell(org.ton.block/MsgAddress): org.ton.cell/Cell // org.ton.block/MsgAddress.Companion.createCell|createCell(org.ton.block.MsgAddress){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/MsgAddress // org.ton.block/MsgAddress.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/MsgAddress // org.ton.block/MsgAddress.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/MsgAddress // org.ton.block/MsgAddress.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgAddress) // org.ton.block/MsgAddress.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgAddress){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgAddress, org.ton.kotlin.cell/CellContext) // org.ton.block/MsgAddress.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgAddress;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCombinator(): org.ton.tlb/TlbCombinator<org.ton.block/MsgAddress> // org.ton.block/MsgAddress.Companion.tlbCombinator|tlbCombinator(){}[0]
    }
}

sealed interface org.ton.block/MsgAddressExt : org.ton.block/MsgAddress { // org.ton.block/MsgAddressExt|null[0]
    final object Companion : org.ton.tlb/TlbCodec<org.ton.block/MsgAddressExt> { // org.ton.block/MsgAddressExt.Companion|null[0]
        final fun createCell(org.ton.block/MsgAddressExt): org.ton.cell/Cell // org.ton.block/MsgAddressExt.Companion.createCell|createCell(org.ton.block.MsgAddressExt){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/MsgAddressExt // org.ton.block/MsgAddressExt.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/MsgAddressExt // org.ton.block/MsgAddressExt.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/MsgAddressExt // org.ton.block/MsgAddressExt.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun of(kotlin/ByteArray): org.ton.block/MsgAddressExt // org.ton.block/MsgAddressExt.Companion.of|of(kotlin.ByteArray){}[0]
        final fun of(org.ton.bitstring/BitString? = ...): org.ton.block/MsgAddressExt // org.ton.block/MsgAddressExt.Companion.of|of(org.ton.bitstring.BitString?){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgAddressExt) // org.ton.block/MsgAddressExt.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgAddressExt){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgAddressExt, org.ton.kotlin.cell/CellContext) // org.ton.block/MsgAddressExt.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgAddressExt;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCodec(): org.ton.tlb/TlbCombinator<org.ton.block/MsgAddressExt> // org.ton.block/MsgAddressExt.Companion.tlbCodec|tlbCodec(){}[0]
    }
}

sealed interface org.ton.block/MsgAddressInt : org.ton.block/MsgAddress { // org.ton.block/MsgAddressInt|null[0]
    abstract val address // org.ton.block/MsgAddressInt.address|{}address[0]
        abstract fun <get-address>(): org.ton.bitstring/BitString // org.ton.block/MsgAddressInt.address.<get-address>|<get-address>(){}[0]
    abstract val workchainId // org.ton.block/MsgAddressInt.workchainId|{}workchainId[0]
        abstract fun <get-workchainId>(): kotlin/Int // org.ton.block/MsgAddressInt.workchainId.<get-workchainId>|<get-workchainId>(){}[0]

    abstract fun toAddrStd(): org.ton.block/AddrStd // org.ton.block/MsgAddressInt.toAddrStd|toAddrStd(){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.block/MsgAddressInt> { // org.ton.block/MsgAddressInt.Companion|null[0]
        final fun createCell(org.ton.block/MsgAddressInt): org.ton.cell/Cell // org.ton.block/MsgAddressInt.Companion.createCell|createCell(org.ton.block.MsgAddressInt){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/MsgAddressInt // org.ton.block/MsgAddressInt.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/MsgAddressInt // org.ton.block/MsgAddressInt.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/MsgAddressInt // org.ton.block/MsgAddressInt.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun parse(kotlin/String): org.ton.block/MsgAddressInt // org.ton.block/MsgAddressInt.Companion.parse|parse(kotlin.String){}[0]
        final fun parseRaw(kotlin/String): org.ton.block/MsgAddressInt // org.ton.block/MsgAddressInt.Companion.parseRaw|parseRaw(kotlin.String){}[0]
        final fun parseUserFriendly(kotlin/String): org.ton.block/MsgAddressInt // org.ton.block/MsgAddressInt.Companion.parseUserFriendly|parseUserFriendly(kotlin.String){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgAddressInt) // org.ton.block/MsgAddressInt.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgAddressInt){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgAddressInt, org.ton.kotlin.cell/CellContext) // org.ton.block/MsgAddressInt.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgAddressInt;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCodec(): org.ton.tlb/TlbCombinator<org.ton.block/MsgAddressInt> // org.ton.block/MsgAddressInt.Companion.tlbCodec|tlbCodec(){}[0]
        final fun toString(org.ton.block/MsgAddressInt, kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ...): kotlin/String // org.ton.block/MsgAddressInt.Companion.toString|toString(org.ton.block.MsgAddressInt;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean){}[0]
    }
}

sealed interface org.ton.block/OutAction // org.ton.block/OutAction|null[0]

sealed interface org.ton.block/OutList // org.ton.block/OutList|null[0]

sealed interface org.ton.block/OutMsg : org.ton.tlb/TlbObject { // org.ton.block/OutMsg|null[0]
    final object Companion : org.ton.tlb.providers/TlbCombinatorProvider<org.ton.block/OutMsg> { // org.ton.block/OutMsg.Companion|null[0]
        final fun createCell(org.ton.block/OutMsg): org.ton.cell/Cell // org.ton.block/OutMsg.Companion.createCell|createCell(org.ton.block.OutMsg){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/OutMsg // org.ton.block/OutMsg.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/OutMsg // org.ton.block/OutMsg.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/OutMsg // org.ton.block/OutMsg.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/OutMsg) // org.ton.block/OutMsg.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.OutMsg){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/OutMsg, org.ton.kotlin.cell/CellContext) // org.ton.block/OutMsg.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.OutMsg;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCombinator(): org.ton.tlb/TlbCombinator<org.ton.block/OutMsg> // org.ton.block/OutMsg.Companion.tlbCombinator|tlbCombinator(){}[0]
    }
}

sealed interface org.ton.block/ProtoList : kotlin.collections/Iterable<org.ton.block/Protocol> { // org.ton.block/ProtoList|null[0]
    final object Companion : org.ton.tlb.providers/TlbCombinatorProvider<org.ton.block/ProtoList> { // org.ton.block/ProtoList.Companion|null[0]
        final fun createCell(org.ton.block/ProtoList): org.ton.cell/Cell // org.ton.block/ProtoList.Companion.createCell|createCell(org.ton.block.ProtoList){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/ProtoList // org.ton.block/ProtoList.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/ProtoList // org.ton.block/ProtoList.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/ProtoList // org.ton.block/ProtoList.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ProtoList) // org.ton.block/ProtoList.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ProtoList){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ProtoList, org.ton.kotlin.cell/CellContext) // org.ton.block/ProtoList.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ProtoList;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCombinator(): org.ton.tlb/TlbCombinator<org.ton.block/ProtoList> // org.ton.block/ProtoList.Companion.tlbCombinator|tlbCombinator(){}[0]
    }
}

sealed interface org.ton.block/Protocol { // org.ton.block/Protocol|null[0]
    final object Companion : org.ton.tlb.providers/TlbCombinatorProvider<org.ton.block/Protocol> { // org.ton.block/Protocol.Companion|null[0]
        final fun createCell(org.ton.block/Protocol): org.ton.cell/Cell // org.ton.block/Protocol.Companion.createCell|createCell(org.ton.block.Protocol){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/Protocol // org.ton.block/Protocol.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/Protocol // org.ton.block/Protocol.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/Protocol // org.ton.block/Protocol.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/Protocol) // org.ton.block/Protocol.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.Protocol){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/Protocol, org.ton.kotlin.cell/CellContext) // org.ton.block/Protocol.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.Protocol;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCombinator(): org.ton.tlb/TlbCombinator<org.ton.block/Protocol> // org.ton.block/Protocol.Companion.tlbCombinator|tlbCombinator(){}[0]
    }
}

sealed interface org.ton.block/ShardDescr : org.ton.tlb/TlbObject { // org.ton.block/ShardDescr|null[0]
    final object Companion : org.ton.tlb.providers/TlbCombinatorProvider<org.ton.block/ShardDescr> { // org.ton.block/ShardDescr.Companion|null[0]
        final fun createCell(org.ton.block/ShardDescr): org.ton.cell/Cell // org.ton.block/ShardDescr.Companion.createCell|createCell(org.ton.block.ShardDescr){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/ShardDescr // org.ton.block/ShardDescr.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/ShardDescr // org.ton.block/ShardDescr.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/ShardDescr // org.ton.block/ShardDescr.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ShardDescr) // org.ton.block/ShardDescr.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ShardDescr){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ShardDescr, org.ton.kotlin.cell/CellContext) // org.ton.block/ShardDescr.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ShardDescr;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCombinator(): org.ton.tlb/TlbCombinator<org.ton.block/ShardDescr> // org.ton.block/ShardDescr.Companion.tlbCombinator|tlbCombinator(){}[0]
    }
}

sealed interface org.ton.block/ShardState : org.ton.tlb/TlbObject { // org.ton.block/ShardState|null[0]
    final object Companion : org.ton.tlb.providers/TlbCombinatorProvider<org.ton.block/ShardState> { // org.ton.block/ShardState.Companion|null[0]
        final fun createCell(org.ton.block/ShardState): org.ton.cell/Cell // org.ton.block/ShardState.Companion.createCell|createCell(org.ton.block.ShardState){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/ShardState // org.ton.block/ShardState.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/ShardState // org.ton.block/ShardState.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/ShardState // org.ton.block/ShardState.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ShardState) // org.ton.block/ShardState.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ShardState){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ShardState, org.ton.kotlin.cell/CellContext) // org.ton.block/ShardState.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ShardState;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCombinator(): org.ton.tlb/TlbCombinator<org.ton.block/ShardState> // org.ton.block/ShardState.Companion.tlbCombinator|tlbCombinator(){}[0]
    }
}

sealed interface org.ton.block/SmcCapList : kotlin.collections/Iterable<org.ton.block/SmcCapability> { // org.ton.block/SmcCapList|null[0]
    final class Next : org.ton.block/SmcCapList { // org.ton.block/SmcCapList.Next|null[0]
        constructor <init>(org.ton.block/SmcCapability, org.ton.block/SmcCapList) // org.ton.block/SmcCapList.Next.<init>|<init>(org.ton.block.SmcCapability;org.ton.block.SmcCapList){}[0]

        final val head // org.ton.block/SmcCapList.Next.head|{}head[0]
            final fun <get-head>(): org.ton.block/SmcCapability // org.ton.block/SmcCapList.Next.head.<get-head>|<get-head>(){}[0]
        final val tail // org.ton.block/SmcCapList.Next.tail|{}tail[0]
            final fun <get-tail>(): org.ton.block/SmcCapList // org.ton.block/SmcCapList.Next.tail.<get-tail>|<get-tail>(){}[0]

        final fun component1(): org.ton.block/SmcCapability // org.ton.block/SmcCapList.Next.component1|component1(){}[0]
        final fun component2(): org.ton.block/SmcCapList // org.ton.block/SmcCapList.Next.component2|component2(){}[0]
        final fun copy(org.ton.block/SmcCapability = ..., org.ton.block/SmcCapList = ...): org.ton.block/SmcCapList.Next // org.ton.block/SmcCapList.Next.copy|copy(org.ton.block.SmcCapability;org.ton.block.SmcCapList){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/SmcCapList.Next.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // org.ton.block/SmcCapList.Next.hashCode|hashCode(){}[0]
        final fun iterator(): kotlin.collections/Iterator<org.ton.block/SmcCapability> // org.ton.block/SmcCapList.Next.iterator|iterator(){}[0]
        final fun toString(): kotlin/String // org.ton.block/SmcCapList.Next.toString|toString(){}[0]
    }

    final object Companion : org.ton.tlb.providers/TlbCombinatorProvider<org.ton.block/SmcCapList> { // org.ton.block/SmcCapList.Companion|null[0]
        final fun createCell(org.ton.block/SmcCapList): org.ton.cell/Cell // org.ton.block/SmcCapList.Companion.createCell|createCell(org.ton.block.SmcCapList){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/SmcCapList // org.ton.block/SmcCapList.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/SmcCapList // org.ton.block/SmcCapList.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/SmcCapList // org.ton.block/SmcCapList.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun of(kotlin.collections/Iterable<org.ton.block/SmcCapability>): org.ton.block/SmcCapList // org.ton.block/SmcCapList.Companion.of|of(kotlin.collections.Iterable<org.ton.block.SmcCapability>){}[0]
        final fun of(kotlin/Array<out org.ton.block/SmcCapability>...): org.ton.block/SmcCapList // org.ton.block/SmcCapList.Companion.of|of(kotlin.Array<out|org.ton.block.SmcCapability>...){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/SmcCapList) // org.ton.block/SmcCapList.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.SmcCapList){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/SmcCapList, org.ton.kotlin.cell/CellContext) // org.ton.block/SmcCapList.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.SmcCapList;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCombinator(): org.ton.tlb/TlbCombinator<org.ton.block/SmcCapList> // org.ton.block/SmcCapList.Companion.tlbCombinator|tlbCombinator(){}[0]
    }

    final object Nil : org.ton.block/SmcCapList { // org.ton.block/SmcCapList.Nil|null[0]
        final fun iterator(): kotlin.collections/Iterator<org.ton.block/SmcCapability> // org.ton.block/SmcCapList.Nil.iterator|iterator(){}[0]
    }
}

sealed interface org.ton.block/SmcCapability { // org.ton.block/SmcCapability|null[0]
    final class Name : org.ton.block/SmcCapability { // org.ton.block/SmcCapability.Name|null[0]
        constructor <init>(org.ton.block/Text) // org.ton.block/SmcCapability.Name.<init>|<init>(org.ton.block.Text){}[0]

        final val name // org.ton.block/SmcCapability.Name.name|{}name[0]
            final fun <get-name>(): org.ton.block/Text // org.ton.block/SmcCapability.Name.name.<get-name>|<get-name>(){}[0]

        final fun component1(): org.ton.block/Text // org.ton.block/SmcCapability.Name.component1|component1(){}[0]
        final fun copy(org.ton.block/Text = ...): org.ton.block/SmcCapability.Name // org.ton.block/SmcCapability.Name.copy|copy(org.ton.block.Text){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/SmcCapability.Name.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // org.ton.block/SmcCapability.Name.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // org.ton.block/SmcCapability.Name.toString|toString(){}[0]

        final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/SmcCapability.Name> { // org.ton.block/SmcCapability.Name.Companion|null[0]
            final fun createCell(org.ton.block/SmcCapability.Name): org.ton.cell/Cell // org.ton.block/SmcCapability.Name.Companion.createCell|createCell(org.ton.block.SmcCapability.Name){}[0]
            final fun loadTlb(org.ton.cell/Cell): org.ton.block/SmcCapability.Name // org.ton.block/SmcCapability.Name.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
            final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/SmcCapability.Name // org.ton.block/SmcCapability.Name.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
            final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/SmcCapability.Name // org.ton.block/SmcCapability.Name.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
            final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/SmcCapability.Name) // org.ton.block/SmcCapability.Name.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.SmcCapability.Name){}[0]
            final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/SmcCapability.Name, org.ton.kotlin.cell/CellContext) // org.ton.block/SmcCapability.Name.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.SmcCapability.Name;org.ton.kotlin.cell.CellContext){}[0]
            final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/SmcCapability.Name> // org.ton.block/SmcCapability.Name.Companion.tlbConstructor|tlbConstructor(){}[0]
        }
    }

    final object Companion : org.ton.tlb.providers/TlbCombinatorProvider<org.ton.block/SmcCapability> { // org.ton.block/SmcCapability.Companion|null[0]
        final fun createCell(org.ton.block/SmcCapability): org.ton.cell/Cell // org.ton.block/SmcCapability.Companion.createCell|createCell(org.ton.block.SmcCapability){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/SmcCapability // org.ton.block/SmcCapability.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/SmcCapability // org.ton.block/SmcCapability.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/SmcCapability // org.ton.block/SmcCapability.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/SmcCapability) // org.ton.block/SmcCapability.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.SmcCapability){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/SmcCapability, org.ton.kotlin.cell/CellContext) // org.ton.block/SmcCapability.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.SmcCapability;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCombinator(): org.ton.tlb/TlbCombinator<org.ton.block/SmcCapability> // org.ton.block/SmcCapability.Companion.tlbCombinator|tlbCombinator(){}[0]
    }

    final object IsWallet : org.ton.block/SmcCapability, org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/SmcCapability.IsWallet> { // org.ton.block/SmcCapability.IsWallet|null[0]
        final fun createCell(org.ton.block/SmcCapability.IsWallet): org.ton.cell/Cell // org.ton.block/SmcCapability.IsWallet.createCell|createCell(org.ton.block.SmcCapability.IsWallet){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/SmcCapability.IsWallet // org.ton.block/SmcCapability.IsWallet.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/SmcCapability.IsWallet // org.ton.block/SmcCapability.IsWallet.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/SmcCapability.IsWallet // org.ton.block/SmcCapability.IsWallet.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/SmcCapability.IsWallet) // org.ton.block/SmcCapability.IsWallet.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.SmcCapability.IsWallet){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/SmcCapability.IsWallet, org.ton.kotlin.cell/CellContext) // org.ton.block/SmcCapability.IsWallet.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.SmcCapability.IsWallet;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/SmcCapability.IsWallet> // org.ton.block/SmcCapability.IsWallet.tlbConstructor|tlbConstructor(){}[0]
    }

    final object MethodPubKey : org.ton.block/SmcCapability, org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/SmcCapability.MethodPubKey> { // org.ton.block/SmcCapability.MethodPubKey|null[0]
        final fun createCell(org.ton.block/SmcCapability.MethodPubKey): org.ton.cell/Cell // org.ton.block/SmcCapability.MethodPubKey.createCell|createCell(org.ton.block.SmcCapability.MethodPubKey){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/SmcCapability.MethodPubKey // org.ton.block/SmcCapability.MethodPubKey.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/SmcCapability.MethodPubKey // org.ton.block/SmcCapability.MethodPubKey.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/SmcCapability.MethodPubKey // org.ton.block/SmcCapability.MethodPubKey.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/SmcCapability.MethodPubKey) // org.ton.block/SmcCapability.MethodPubKey.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.SmcCapability.MethodPubKey){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/SmcCapability.MethodPubKey, org.ton.kotlin.cell/CellContext) // org.ton.block/SmcCapability.MethodPubKey.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.SmcCapability.MethodPubKey;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/SmcCapability.MethodPubKey> // org.ton.block/SmcCapability.MethodPubKey.tlbConstructor|tlbConstructor(){}[0]
    }

    final object MethodSeqno : org.ton.block/SmcCapability, org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/SmcCapability.MethodSeqno> { // org.ton.block/SmcCapability.MethodSeqno|null[0]
        final fun createCell(org.ton.block/SmcCapability.MethodSeqno): org.ton.cell/Cell // org.ton.block/SmcCapability.MethodSeqno.createCell|createCell(org.ton.block.SmcCapability.MethodSeqno){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/SmcCapability.MethodSeqno // org.ton.block/SmcCapability.MethodSeqno.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/SmcCapability.MethodSeqno // org.ton.block/SmcCapability.MethodSeqno.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/SmcCapability.MethodSeqno // org.ton.block/SmcCapability.MethodSeqno.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/SmcCapability.MethodSeqno) // org.ton.block/SmcCapability.MethodSeqno.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.SmcCapability.MethodSeqno){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/SmcCapability.MethodSeqno, org.ton.kotlin.cell/CellContext) // org.ton.block/SmcCapability.MethodSeqno.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.SmcCapability.MethodSeqno;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/SmcCapability.MethodSeqno> // org.ton.block/SmcCapability.MethodSeqno.tlbConstructor|tlbConstructor(){}[0]
    }
}

sealed interface org.ton.block/TextChunkRef { // org.ton.block/TextChunkRef|null[0]
    final object Companion { // org.ton.block/TextChunkRef.Companion|null[0]
        final fun tlbCombinator(kotlin/Int): org.ton.tlb/TlbCombinator<org.ton.block/TextChunkRef> // org.ton.block/TextChunkRef.Companion.tlbCombinator|tlbCombinator(kotlin.Int){}[0]
    }
}

sealed interface org.ton.block/TextChunks { // org.ton.block/TextChunks|null[0]
    final object Companion { // org.ton.block/TextChunks.Companion|null[0]
        final fun tlbCodec(kotlin/Int): org.ton.tlb/TlbCodec<org.ton.block/TextChunks> // org.ton.block/TextChunks.Companion.tlbCodec|tlbCodec(kotlin.Int){}[0]
    }
}

sealed interface org.ton.block/VmCont { // org.ton.block/VmCont|null[0]
    final class Again : org.ton.block/VmCont { // org.ton.block/VmCont.Again|null[0]
        constructor <init>(org.ton.tlb/CellRef<org.ton.block/VmCont>) // org.ton.block/VmCont.Again.<init>|<init>(org.ton.tlb.CellRef<org.ton.block.VmCont>){}[0]

        final val body // org.ton.block/VmCont.Again.body|{}body[0]
            final fun <get-body>(): org.ton.tlb/CellRef<org.ton.block/VmCont> // org.ton.block/VmCont.Again.body.<get-body>|<get-body>(){}[0]

        final fun component1(): org.ton.tlb/CellRef<org.ton.block/VmCont> // org.ton.block/VmCont.Again.component1|component1(){}[0]
        final fun copy(org.ton.tlb/CellRef<org.ton.block/VmCont> = ...): org.ton.block/VmCont.Again // org.ton.block/VmCont.Again.copy|copy(org.ton.tlb.CellRef<org.ton.block.VmCont>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/VmCont.Again.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // org.ton.block/VmCont.Again.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // org.ton.block/VmCont.Again.toString|toString(){}[0]
    }

    final class PushInt : org.ton.block/VmCont { // org.ton.block/VmCont.PushInt|null[0]
        constructor <init>(kotlin/Int, org.ton.tlb/CellRef<org.ton.block/VmCont>) // org.ton.block/VmCont.PushInt.<init>|<init>(kotlin.Int;org.ton.tlb.CellRef<org.ton.block.VmCont>){}[0]

        final val next // org.ton.block/VmCont.PushInt.next|{}next[0]
            final fun <get-next>(): org.ton.tlb/CellRef<org.ton.block/VmCont> // org.ton.block/VmCont.PushInt.next.<get-next>|<get-next>(){}[0]
        final val value // org.ton.block/VmCont.PushInt.value|{}value[0]
            final fun <get-value>(): kotlin/Int // org.ton.block/VmCont.PushInt.value.<get-value>|<get-value>(){}[0]

        final fun component1(): kotlin/Int // org.ton.block/VmCont.PushInt.component1|component1(){}[0]
        final fun component2(): org.ton.tlb/CellRef<org.ton.block/VmCont> // org.ton.block/VmCont.PushInt.component2|component2(){}[0]
        final fun copy(kotlin/Int = ..., org.ton.tlb/CellRef<org.ton.block/VmCont> = ...): org.ton.block/VmCont.PushInt // org.ton.block/VmCont.PushInt.copy|copy(kotlin.Int;org.ton.tlb.CellRef<org.ton.block.VmCont>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/VmCont.PushInt.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // org.ton.block/VmCont.PushInt.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // org.ton.block/VmCont.PushInt.toString|toString(){}[0]
    }

    final class Until : org.ton.block/VmCont { // org.ton.block/VmCont.Until|null[0]
        constructor <init>(org.ton.tlb/CellRef<org.ton.block/VmCont>, org.ton.tlb/CellRef<org.ton.block/VmCont>) // org.ton.block/VmCont.Until.<init>|<init>(org.ton.tlb.CellRef<org.ton.block.VmCont>;org.ton.tlb.CellRef<org.ton.block.VmCont>){}[0]

        final val after // org.ton.block/VmCont.Until.after|{}after[0]
            final fun <get-after>(): org.ton.tlb/CellRef<org.ton.block/VmCont> // org.ton.block/VmCont.Until.after.<get-after>|<get-after>(){}[0]
        final val body // org.ton.block/VmCont.Until.body|{}body[0]
            final fun <get-body>(): org.ton.tlb/CellRef<org.ton.block/VmCont> // org.ton.block/VmCont.Until.body.<get-body>|<get-body>(){}[0]

        final fun component1(): org.ton.tlb/CellRef<org.ton.block/VmCont> // org.ton.block/VmCont.Until.component1|component1(){}[0]
        final fun component2(): org.ton.tlb/CellRef<org.ton.block/VmCont> // org.ton.block/VmCont.Until.component2|component2(){}[0]
        final fun copy(org.ton.tlb/CellRef<org.ton.block/VmCont> = ..., org.ton.tlb/CellRef<org.ton.block/VmCont> = ...): org.ton.block/VmCont.Until // org.ton.block/VmCont.Until.copy|copy(org.ton.tlb.CellRef<org.ton.block.VmCont>;org.ton.tlb.CellRef<org.ton.block.VmCont>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/VmCont.Until.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // org.ton.block/VmCont.Until.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // org.ton.block/VmCont.Until.toString|toString(){}[0]
    }

    final class WhileBody : org.ton.block/VmCont { // org.ton.block/VmCont.WhileBody|null[0]
        constructor <init>(org.ton.tlb/CellRef<org.ton.block/VmCont>, org.ton.tlb/CellRef<org.ton.block/VmCont>, org.ton.tlb/CellRef<org.ton.block/VmCont>) // org.ton.block/VmCont.WhileBody.<init>|<init>(org.ton.tlb.CellRef<org.ton.block.VmCont>;org.ton.tlb.CellRef<org.ton.block.VmCont>;org.ton.tlb.CellRef<org.ton.block.VmCont>){}[0]

        final val after // org.ton.block/VmCont.WhileBody.after|{}after[0]
            final fun <get-after>(): org.ton.tlb/CellRef<org.ton.block/VmCont> // org.ton.block/VmCont.WhileBody.after.<get-after>|<get-after>(){}[0]
        final val body // org.ton.block/VmCont.WhileBody.body|{}body[0]
            final fun <get-body>(): org.ton.tlb/CellRef<org.ton.block/VmCont> // org.ton.block/VmCont.WhileBody.body.<get-body>|<get-body>(){}[0]
        final val cond // org.ton.block/VmCont.WhileBody.cond|{}cond[0]
            final fun <get-cond>(): org.ton.tlb/CellRef<org.ton.block/VmCont> // org.ton.block/VmCont.WhileBody.cond.<get-cond>|<get-cond>(){}[0]

        final fun component1(): org.ton.tlb/CellRef<org.ton.block/VmCont> // org.ton.block/VmCont.WhileBody.component1|component1(){}[0]
        final fun component2(): org.ton.tlb/CellRef<org.ton.block/VmCont> // org.ton.block/VmCont.WhileBody.component2|component2(){}[0]
        final fun component3(): org.ton.tlb/CellRef<org.ton.block/VmCont> // org.ton.block/VmCont.WhileBody.component3|component3(){}[0]
        final fun copy(org.ton.tlb/CellRef<org.ton.block/VmCont> = ..., org.ton.tlb/CellRef<org.ton.block/VmCont> = ..., org.ton.tlb/CellRef<org.ton.block/VmCont> = ...): org.ton.block/VmCont.WhileBody // org.ton.block/VmCont.WhileBody.copy|copy(org.ton.tlb.CellRef<org.ton.block.VmCont>;org.ton.tlb.CellRef<org.ton.block.VmCont>;org.ton.tlb.CellRef<org.ton.block.VmCont>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/VmCont.WhileBody.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // org.ton.block/VmCont.WhileBody.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // org.ton.block/VmCont.WhileBody.toString|toString(){}[0]
    }

    final class WhileCond : org.ton.block/VmCont { // org.ton.block/VmCont.WhileCond|null[0]
        constructor <init>(org.ton.tlb/CellRef<org.ton.block/VmCont>, org.ton.tlb/CellRef<org.ton.block/VmCont>, org.ton.tlb/CellRef<org.ton.block/VmCont>) // org.ton.block/VmCont.WhileCond.<init>|<init>(org.ton.tlb.CellRef<org.ton.block.VmCont>;org.ton.tlb.CellRef<org.ton.block.VmCont>;org.ton.tlb.CellRef<org.ton.block.VmCont>){}[0]

        final val after // org.ton.block/VmCont.WhileCond.after|{}after[0]
            final fun <get-after>(): org.ton.tlb/CellRef<org.ton.block/VmCont> // org.ton.block/VmCont.WhileCond.after.<get-after>|<get-after>(){}[0]
        final val body // org.ton.block/VmCont.WhileCond.body|{}body[0]
            final fun <get-body>(): org.ton.tlb/CellRef<org.ton.block/VmCont> // org.ton.block/VmCont.WhileCond.body.<get-body>|<get-body>(){}[0]
        final val cond // org.ton.block/VmCont.WhileCond.cond|{}cond[0]
            final fun <get-cond>(): org.ton.tlb/CellRef<org.ton.block/VmCont> // org.ton.block/VmCont.WhileCond.cond.<get-cond>|<get-cond>(){}[0]

        final fun component1(): org.ton.tlb/CellRef<org.ton.block/VmCont> // org.ton.block/VmCont.WhileCond.component1|component1(){}[0]
        final fun component2(): org.ton.tlb/CellRef<org.ton.block/VmCont> // org.ton.block/VmCont.WhileCond.component2|component2(){}[0]
        final fun component3(): org.ton.tlb/CellRef<org.ton.block/VmCont> // org.ton.block/VmCont.WhileCond.component3|component3(){}[0]
        final fun copy(org.ton.tlb/CellRef<org.ton.block/VmCont> = ..., org.ton.tlb/CellRef<org.ton.block/VmCont> = ..., org.ton.tlb/CellRef<org.ton.block/VmCont> = ...): org.ton.block/VmCont.WhileCond // org.ton.block/VmCont.WhileCond.copy|copy(org.ton.tlb.CellRef<org.ton.block.VmCont>;org.ton.tlb.CellRef<org.ton.block.VmCont>;org.ton.tlb.CellRef<org.ton.block.VmCont>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/VmCont.WhileCond.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // org.ton.block/VmCont.WhileCond.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // org.ton.block/VmCont.WhileCond.toString|toString(){}[0]
    }

    final object Companion : org.ton.tlb.providers/TlbCombinatorProvider<org.ton.block/VmCont> { // org.ton.block/VmCont.Companion|null[0]
        final fun createCell(org.ton.block/VmCont): org.ton.cell/Cell // org.ton.block/VmCont.Companion.createCell|createCell(org.ton.block.VmCont){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/VmCont // org.ton.block/VmCont.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/VmCont // org.ton.block/VmCont.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/VmCont // org.ton.block/VmCont.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmCont) // org.ton.block/VmCont.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmCont){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmCont, org.ton.kotlin.cell/CellContext) // org.ton.block/VmCont.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmCont;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCombinator(): org.ton.tlb/TlbCombinator<org.ton.block/VmCont> // org.ton.block/VmCont.Companion.tlbCombinator|tlbCombinator(){}[0]
    }
}

sealed interface org.ton.block/VmStackList : kotlin.collections/Iterable<org.ton.block/VmStackValue> { // org.ton.block/VmStackList|null[0]
    final class Cons : org.ton.block/VmStackList { // org.ton.block/VmStackList.Cons|null[0]
        constructor <init>(org.ton.block/VmStackList, org.ton.block/VmStackValue) // org.ton.block/VmStackList.Cons.<init>|<init>(org.ton.block.VmStackList;org.ton.block.VmStackValue){}[0]

        final val rest // org.ton.block/VmStackList.Cons.rest|{}rest[0]
            final fun <get-rest>(): org.ton.block/VmStackList // org.ton.block/VmStackList.Cons.rest.<get-rest>|<get-rest>(){}[0]
        final val tos // org.ton.block/VmStackList.Cons.tos|{}tos[0]
            final fun <get-tos>(): org.ton.block/VmStackValue // org.ton.block/VmStackList.Cons.tos.<get-tos>|<get-tos>(){}[0]

        final fun component1(): org.ton.block/VmStackList // org.ton.block/VmStackList.Cons.component1|component1(){}[0]
        final fun component2(): org.ton.block/VmStackValue // org.ton.block/VmStackList.Cons.component2|component2(){}[0]
        final fun copy(org.ton.block/VmStackList = ..., org.ton.block/VmStackValue = ...): org.ton.block/VmStackList.Cons // org.ton.block/VmStackList.Cons.copy|copy(org.ton.block.VmStackList;org.ton.block.VmStackValue){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/VmStackList.Cons.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // org.ton.block/VmStackList.Cons.hashCode|hashCode(){}[0]
        final fun iterator(): kotlin.collections/Iterator<org.ton.block/VmStackValue> // org.ton.block/VmStackList.Cons.iterator|iterator(){}[0]
        final fun toString(): kotlin/String // org.ton.block/VmStackList.Cons.toString|toString(){}[0]
    }

    final object Companion { // org.ton.block/VmStackList.Companion|null[0]
        final fun of(kotlin.collections/Iterable<org.ton.block/VmStackValue>): org.ton.block/VmStackList // org.ton.block/VmStackList.Companion.of|of(kotlin.collections.Iterable<org.ton.block.VmStackValue>){}[0]
        final fun of(kotlin/Array<out org.ton.block/VmStackValue>...): org.ton.block/VmStackList // org.ton.block/VmStackList.Companion.of|of(kotlin.Array<out|org.ton.block.VmStackValue>...){}[0]
        final fun tlbCodec(kotlin/Int): org.ton.tlb/TlbCodec<org.ton.block/VmStackList> // org.ton.block/VmStackList.Companion.tlbCodec|tlbCodec(kotlin.Int){}[0]
    }

    final object Nil : org.ton.block/VmStackList { // org.ton.block/VmStackList.Nil|null[0]
        final fun iterator(): kotlin.collections/Iterator<org.ton.block/VmStackValue> // org.ton.block/VmStackList.Nil.iterator|iterator(){}[0]
        final fun toString(): kotlin/String // org.ton.block/VmStackList.Nil.toString|toString(){}[0]
    }
}

sealed interface org.ton.block/VmStackNumber : org.ton.block/VmStackValue { // org.ton.block/VmStackNumber|null[0]
    abstract fun div(org.ton.block/VmStackNumber): org.ton.block/VmStackNumber // org.ton.block/VmStackNumber.div|div(org.ton.block.VmStackNumber){}[0]
    abstract fun minus(org.ton.block/VmStackNumber): org.ton.block/VmStackNumber // org.ton.block/VmStackNumber.minus|minus(org.ton.block.VmStackNumber){}[0]
    abstract fun plus(org.ton.block/VmStackNumber): org.ton.block/VmStackNumber // org.ton.block/VmStackNumber.plus|plus(org.ton.block.VmStackNumber){}[0]
    abstract fun times(org.ton.block/VmStackNumber): org.ton.block/VmStackNumber // org.ton.block/VmStackNumber.times|times(org.ton.block.VmStackNumber){}[0]
    abstract fun toBigInt(): org.ton.bigint/BigInt // org.ton.block/VmStackNumber.toBigInt|toBigInt(){}[0]
    abstract fun toBoolean(): kotlin/Boolean // org.ton.block/VmStackNumber.toBoolean|toBoolean(){}[0]
    abstract fun toInt(): kotlin/Int // org.ton.block/VmStackNumber.toInt|toInt(){}[0]
    abstract fun toLong(): kotlin/Long // org.ton.block/VmStackNumber.toLong|toLong(){}[0]
}

sealed interface org.ton.block/VmStackSlice : org.ton.block/VmStackValue { // org.ton.block/VmStackSlice|null[0]
    abstract val cell // org.ton.block/VmStackSlice.cell|{}cell[0]
        abstract fun <get-cell>(): org.ton.cell/Cell // org.ton.block/VmStackSlice.cell.<get-cell>|<get-cell>(){}[0]
    abstract val endBits // org.ton.block/VmStackSlice.endBits|{}endBits[0]
        abstract fun <get-endBits>(): kotlin/Int // org.ton.block/VmStackSlice.endBits.<get-endBits>|<get-endBits>(){}[0]
    abstract val endRef // org.ton.block/VmStackSlice.endRef|{}endRef[0]
        abstract fun <get-endRef>(): kotlin/Int // org.ton.block/VmStackSlice.endRef.<get-endRef>|<get-endRef>(){}[0]
    abstract val stBits // org.ton.block/VmStackSlice.stBits|{}stBits[0]
        abstract fun <get-stBits>(): kotlin/Int // org.ton.block/VmStackSlice.stBits.<get-stBits>|<get-stBits>(){}[0]
    abstract val stRef // org.ton.block/VmStackSlice.stRef|{}stRef[0]
        abstract fun <get-stRef>(): kotlin/Int // org.ton.block/VmStackSlice.stRef.<get-stRef>|<get-stRef>(){}[0]

    open fun toCellSlice(): org.ton.cell/CellSlice // org.ton.block/VmStackSlice.toCellSlice|toCellSlice(){}[0]
}

sealed interface org.ton.block/VmStackValue { // org.ton.block/VmStackValue|null[0]
    final object Companion : org.ton.tlb.providers/TlbCombinatorProvider<org.ton.block/VmStackValue> { // org.ton.block/VmStackValue.Companion|null[0]
        final fun createCell(org.ton.block/VmStackValue): org.ton.cell/Cell // org.ton.block/VmStackValue.Companion.createCell|createCell(org.ton.block.VmStackValue){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/VmStackValue // org.ton.block/VmStackValue.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/VmStackValue // org.ton.block/VmStackValue.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/VmStackValue // org.ton.block/VmStackValue.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun of(): org.ton.block/VmStackNull // org.ton.block/VmStackValue.Companion.of|of(){}[0]
        final fun of(kotlin/Boolean): org.ton.block/VmStackTinyInt // org.ton.block/VmStackValue.Companion.of|of(kotlin.Boolean){}[0]
        final fun of(kotlin/Int): org.ton.block/VmStackTinyInt // org.ton.block/VmStackValue.Companion.of|of(kotlin.Int){}[0]
        final fun of(kotlin/Long): org.ton.block/VmStackTinyInt // org.ton.block/VmStackValue.Companion.of|of(kotlin.Long){}[0]
        final fun of(org.ton.bigint/BigInt): org.ton.block/VmStackInt // org.ton.block/VmStackValue.Companion.of|of(org.ton.bigint.BigInt){}[0]
        final fun of(org.ton.block/VmCont): org.ton.block/VmStackCont // org.ton.block/VmStackValue.Companion.of|of(org.ton.block.VmCont){}[0]
        final fun of(org.ton.block/VmTuple): org.ton.block/VmStackTuple // org.ton.block/VmStackValue.Companion.of|of(org.ton.block.VmTuple){}[0]
        final fun of(org.ton.cell/Cell): org.ton.block/VmStackCell // org.ton.block/VmStackValue.Companion.of|of(org.ton.cell.Cell){}[0]
        final fun of(org.ton.cell/CellBuilder): org.ton.block/VmStackBuilder // org.ton.block/VmStackValue.Companion.of|of(org.ton.cell.CellBuilder){}[0]
        final fun of(org.ton.cell/CellSlice): org.ton.block/VmCellSlice // org.ton.block/VmStackValue.Companion.of|of(org.ton.cell.CellSlice){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmStackValue) // org.ton.block/VmStackValue.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmStackValue){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmStackValue, org.ton.kotlin.cell/CellContext) // org.ton.block/VmStackValue.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmStackValue;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCombinator(): org.ton.tlb/TlbCombinator<org.ton.block/VmStackValue> // org.ton.block/VmStackValue.Companion.tlbCombinator|tlbCombinator(){}[0]
    }
}

sealed interface org.ton.block/VmTuple { // org.ton.block/VmTuple|null[0]
    abstract fun depth(): kotlin/Int // org.ton.block/VmTuple.depth|depth(){}[0]

    final object Companion { // org.ton.block/VmTuple.Companion|null[0]
        final fun tlbCodec(kotlin/Int): org.ton.tlb/TlbCodec<org.ton.block/VmTuple> // org.ton.block/VmTuple.Companion.tlbCodec|tlbCodec(kotlin.Int){}[0]
    }
}

sealed interface org.ton.block/VmTupleRef { // org.ton.block/VmTupleRef|null[0]
    abstract fun depth(): kotlin/Int // org.ton.block/VmTupleRef.depth|depth(){}[0]

    final object Companion { // org.ton.block/VmTupleRef.Companion|null[0]
        final fun of(): org.ton.block/VmTupleRef // org.ton.block/VmTupleRef.Companion.of|of(){}[0]
        final fun of(org.ton.block/VmStackValue): org.ton.block/VmTupleRef // org.ton.block/VmTupleRef.Companion.of|of(org.ton.block.VmStackValue){}[0]
        final fun of(org.ton.block/VmTuple): org.ton.block/VmTupleRef // org.ton.block/VmTupleRef.Companion.of|of(org.ton.block.VmTuple){}[0]
        final fun tlbCodec(kotlin/Int): org.ton.tlb/TlbCodec<org.ton.block/VmTupleRef> // org.ton.block/VmTupleRef.Companion.tlbCodec|tlbCodec(kotlin.Int){}[0]
    }
}

sealed interface org.ton.kotlin.transaction.phase/BouncePhase { // org.ton.kotlin.transaction.phase/BouncePhase|null[0]
    abstract val forwardFees // org.ton.kotlin.transaction.phase/BouncePhase.forwardFees|{}forwardFees[0]
        abstract fun <get-forwardFees>(): org.ton.block/Coins // org.ton.kotlin.transaction.phase/BouncePhase.forwardFees.<get-forwardFees>|<get-forwardFees>(){}[0]

    final class Executed : org.ton.kotlin.transaction.phase/BouncePhase { // org.ton.kotlin.transaction.phase/BouncePhase.Executed|null[0]
        constructor <init>(org.ton.block/StorageUsedShort = ..., org.ton.block/Coins = ..., org.ton.block/Coins = ...) // org.ton.kotlin.transaction.phase/BouncePhase.Executed.<init>|<init>(org.ton.block.StorageUsedShort;org.ton.block.Coins;org.ton.block.Coins){}[0]

        final val forwardFees // org.ton.kotlin.transaction.phase/BouncePhase.Executed.forwardFees|{}forwardFees[0]
            final fun <get-forwardFees>(): org.ton.block/Coins // org.ton.kotlin.transaction.phase/BouncePhase.Executed.forwardFees.<get-forwardFees>|<get-forwardFees>(){}[0]
        final val forwardFeesCollected // org.ton.kotlin.transaction.phase/BouncePhase.Executed.forwardFeesCollected|{}forwardFeesCollected[0]
            final fun <get-forwardFeesCollected>(): org.ton.block/Coins // org.ton.kotlin.transaction.phase/BouncePhase.Executed.forwardFeesCollected.<get-forwardFeesCollected>|<get-forwardFeesCollected>(){}[0]
        final val msgSize // org.ton.kotlin.transaction.phase/BouncePhase.Executed.msgSize|{}msgSize[0]
            final fun <get-msgSize>(): org.ton.block/StorageUsedShort // org.ton.kotlin.transaction.phase/BouncePhase.Executed.msgSize.<get-msgSize>|<get-msgSize>(){}[0]

        final fun component1(): org.ton.block/StorageUsedShort // org.ton.kotlin.transaction.phase/BouncePhase.Executed.component1|component1(){}[0]
        final fun component2(): org.ton.block/Coins // org.ton.kotlin.transaction.phase/BouncePhase.Executed.component2|component2(){}[0]
        final fun component3(): org.ton.block/Coins // org.ton.kotlin.transaction.phase/BouncePhase.Executed.component3|component3(){}[0]
        final fun copy(org.ton.block/StorageUsedShort = ..., org.ton.block/Coins = ..., org.ton.block/Coins = ...): org.ton.kotlin.transaction.phase/BouncePhase.Executed // org.ton.kotlin.transaction.phase/BouncePhase.Executed.copy|copy(org.ton.block.StorageUsedShort;org.ton.block.Coins;org.ton.block.Coins){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.kotlin.transaction.phase/BouncePhase.Executed.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // org.ton.kotlin.transaction.phase/BouncePhase.Executed.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // org.ton.kotlin.transaction.phase/BouncePhase.Executed.toString|toString(){}[0]
    }

    final class NoFunds : org.ton.kotlin.transaction.phase/BouncePhase { // org.ton.kotlin.transaction.phase/BouncePhase.NoFunds|null[0]
        constructor <init>(org.ton.block/StorageUsedShort, org.ton.block/Coins) // org.ton.kotlin.transaction.phase/BouncePhase.NoFunds.<init>|<init>(org.ton.block.StorageUsedShort;org.ton.block.Coins){}[0]

        final val forwardFees // org.ton.kotlin.transaction.phase/BouncePhase.NoFunds.forwardFees|{}forwardFees[0]
            final fun <get-forwardFees>(): org.ton.block/Coins // org.ton.kotlin.transaction.phase/BouncePhase.NoFunds.forwardFees.<get-forwardFees>|<get-forwardFees>(){}[0]
        final val msgSize // org.ton.kotlin.transaction.phase/BouncePhase.NoFunds.msgSize|{}msgSize[0]
            final fun <get-msgSize>(): org.ton.block/StorageUsedShort // org.ton.kotlin.transaction.phase/BouncePhase.NoFunds.msgSize.<get-msgSize>|<get-msgSize>(){}[0]

        final fun component1(): org.ton.block/StorageUsedShort // org.ton.kotlin.transaction.phase/BouncePhase.NoFunds.component1|component1(){}[0]
        final fun component2(): org.ton.block/Coins // org.ton.kotlin.transaction.phase/BouncePhase.NoFunds.component2|component2(){}[0]
        final fun copy(org.ton.block/StorageUsedShort = ..., org.ton.block/Coins = ...): org.ton.kotlin.transaction.phase/BouncePhase.NoFunds // org.ton.kotlin.transaction.phase/BouncePhase.NoFunds.copy|copy(org.ton.block.StorageUsedShort;org.ton.block.Coins){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.kotlin.transaction.phase/BouncePhase.NoFunds.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // org.ton.kotlin.transaction.phase/BouncePhase.NoFunds.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // org.ton.kotlin.transaction.phase/BouncePhase.NoFunds.toString|toString(){}[0]
    }

    final object Companion : org.ton.tlb/TlbCodec<org.ton.kotlin.transaction.phase/BouncePhase> { // org.ton.kotlin.transaction.phase/BouncePhase.Companion|null[0]
        final fun createCell(org.ton.kotlin.transaction.phase/BouncePhase): org.ton.cell/Cell // org.ton.kotlin.transaction.phase/BouncePhase.Companion.createCell|createCell(org.ton.kotlin.transaction.phase.BouncePhase){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.kotlin.transaction.phase/BouncePhase // org.ton.kotlin.transaction.phase/BouncePhase.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.kotlin.transaction.phase/BouncePhase // org.ton.kotlin.transaction.phase/BouncePhase.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.kotlin.transaction.phase/BouncePhase // org.ton.kotlin.transaction.phase/BouncePhase.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.kotlin.transaction.phase/BouncePhase) // org.ton.kotlin.transaction.phase/BouncePhase.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.kotlin.transaction.phase.BouncePhase){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.kotlin.transaction.phase/BouncePhase, org.ton.kotlin.cell/CellContext) // org.ton.kotlin.transaction.phase/BouncePhase.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.kotlin.transaction.phase.BouncePhase;org.ton.kotlin.cell.CellContext){}[0]
    }
}

sealed interface org.ton.kotlin.transaction.phase/ComputePhase { // org.ton.kotlin.transaction.phase/ComputePhase|null[0]
    abstract val skipReason // org.ton.kotlin.transaction.phase/ComputePhase.skipReason|{}skipReason[0]
        abstract fun <get-skipReason>(): org.ton.kotlin.transaction.phase/ComputePhase.Skipped? // org.ton.kotlin.transaction.phase/ComputePhase.skipReason.<get-skipReason>|<get-skipReason>(){}[0]

    final enum class Skipped : kotlin/Enum<org.ton.kotlin.transaction.phase/ComputePhase.Skipped>, org.ton.kotlin.transaction.phase/ComputePhase { // org.ton.kotlin.transaction.phase/ComputePhase.Skipped|null[0]
        enum entry BadState // org.ton.kotlin.transaction.phase/ComputePhase.Skipped.BadState|null[0]
        enum entry NoGas // org.ton.kotlin.transaction.phase/ComputePhase.Skipped.NoGas|null[0]
        enum entry NoState // org.ton.kotlin.transaction.phase/ComputePhase.Skipped.NoState|null[0]
        enum entry Suspended // org.ton.kotlin.transaction.phase/ComputePhase.Skipped.Suspended|null[0]

        final val entries // org.ton.kotlin.transaction.phase/ComputePhase.Skipped.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<org.ton.kotlin.transaction.phase/ComputePhase.Skipped> // org.ton.kotlin.transaction.phase/ComputePhase.Skipped.entries.<get-entries>|<get-entries>#static(){}[0]
        final val skipReason // org.ton.kotlin.transaction.phase/ComputePhase.Skipped.skipReason|{}skipReason[0]
            final fun <get-skipReason>(): org.ton.kotlin.transaction.phase/ComputePhase.Skipped? // org.ton.kotlin.transaction.phase/ComputePhase.Skipped.skipReason.<get-skipReason>|<get-skipReason>(){}[0]

        final fun valueOf(kotlin/String): org.ton.kotlin.transaction.phase/ComputePhase.Skipped // org.ton.kotlin.transaction.phase/ComputePhase.Skipped.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<org.ton.kotlin.transaction.phase/ComputePhase.Skipped> // org.ton.kotlin.transaction.phase/ComputePhase.Skipped.values|values#static(){}[0]
    }

    final class Executed : org.ton.kotlin.transaction.phase/ComputePhase { // org.ton.kotlin.transaction.phase/ComputePhase.Executed|null[0]
        constructor <init>(kotlin/Boolean, kotlin/Boolean, kotlin/Boolean, org.ton.block/Coins, kotlin/Long, kotlin/Long, kotlin/Int?, kotlin/Byte, kotlin/Int, kotlin/Int?, kotlin/Int, kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString) // org.ton.kotlin.transaction.phase/ComputePhase.Executed.<init>|<init>(kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;org.ton.block.Coins;kotlin.Long;kotlin.Long;kotlin.Int?;kotlin.Byte;kotlin.Int;kotlin.Int?;kotlin.Int;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]

        final val exitArg // org.ton.kotlin.transaction.phase/ComputePhase.Executed.exitArg|{}exitArg[0]
            final fun <get-exitArg>(): kotlin/Int? // org.ton.kotlin.transaction.phase/ComputePhase.Executed.exitArg.<get-exitArg>|<get-exitArg>(){}[0]
        final val exitCode // org.ton.kotlin.transaction.phase/ComputePhase.Executed.exitCode|{}exitCode[0]
            final fun <get-exitCode>(): kotlin/Int // org.ton.kotlin.transaction.phase/ComputePhase.Executed.exitCode.<get-exitCode>|<get-exitCode>(){}[0]
        final val gasCredit // org.ton.kotlin.transaction.phase/ComputePhase.Executed.gasCredit|{}gasCredit[0]
            final fun <get-gasCredit>(): kotlin/Int? // org.ton.kotlin.transaction.phase/ComputePhase.Executed.gasCredit.<get-gasCredit>|<get-gasCredit>(){}[0]
        final val gasFees // org.ton.kotlin.transaction.phase/ComputePhase.Executed.gasFees|{}gasFees[0]
            final fun <get-gasFees>(): org.ton.block/Coins // org.ton.kotlin.transaction.phase/ComputePhase.Executed.gasFees.<get-gasFees>|<get-gasFees>(){}[0]
        final val gasLimit // org.ton.kotlin.transaction.phase/ComputePhase.Executed.gasLimit|{}gasLimit[0]
            final fun <get-gasLimit>(): kotlin/Long // org.ton.kotlin.transaction.phase/ComputePhase.Executed.gasLimit.<get-gasLimit>|<get-gasLimit>(){}[0]
        final val gasUsed // org.ton.kotlin.transaction.phase/ComputePhase.Executed.gasUsed|{}gasUsed[0]
            final fun <get-gasUsed>(): kotlin/Long // org.ton.kotlin.transaction.phase/ComputePhase.Executed.gasUsed.<get-gasUsed>|<get-gasUsed>(){}[0]
        final val isAccountActivated // org.ton.kotlin.transaction.phase/ComputePhase.Executed.isAccountActivated|{}isAccountActivated[0]
            final fun <get-isAccountActivated>(): kotlin/Boolean // org.ton.kotlin.transaction.phase/ComputePhase.Executed.isAccountActivated.<get-isAccountActivated>|<get-isAccountActivated>(){}[0]
        final val isMsgStateUsed // org.ton.kotlin.transaction.phase/ComputePhase.Executed.isMsgStateUsed|{}isMsgStateUsed[0]
            final fun <get-isMsgStateUsed>(): kotlin/Boolean // org.ton.kotlin.transaction.phase/ComputePhase.Executed.isMsgStateUsed.<get-isMsgStateUsed>|<get-isMsgStateUsed>(){}[0]
        final val isSuccess // org.ton.kotlin.transaction.phase/ComputePhase.Executed.isSuccess|{}isSuccess[0]
            final fun <get-isSuccess>(): kotlin/Boolean // org.ton.kotlin.transaction.phase/ComputePhase.Executed.isSuccess.<get-isSuccess>|<get-isSuccess>(){}[0]
        final val mode // org.ton.kotlin.transaction.phase/ComputePhase.Executed.mode|{}mode[0]
            final fun <get-mode>(): kotlin/Byte // org.ton.kotlin.transaction.phase/ComputePhase.Executed.mode.<get-mode>|<get-mode>(){}[0]
        final val skipReason // org.ton.kotlin.transaction.phase/ComputePhase.Executed.skipReason|{}skipReason[0]
            final fun <get-skipReason>(): org.ton.kotlin.transaction.phase/ComputePhase.Skipped? // org.ton.kotlin.transaction.phase/ComputePhase.Executed.skipReason.<get-skipReason>|<get-skipReason>(){}[0]
        final val vmFinalStateHash // org.ton.kotlin.transaction.phase/ComputePhase.Executed.vmFinalStateHash|{}vmFinalStateHash[0]
            final fun <get-vmFinalStateHash>(): kotlinx.io.bytestring/ByteString // org.ton.kotlin.transaction.phase/ComputePhase.Executed.vmFinalStateHash.<get-vmFinalStateHash>|<get-vmFinalStateHash>(){}[0]
        final val vmInitStateHash // org.ton.kotlin.transaction.phase/ComputePhase.Executed.vmInitStateHash|{}vmInitStateHash[0]
            final fun <get-vmInitStateHash>(): kotlinx.io.bytestring/ByteString // org.ton.kotlin.transaction.phase/ComputePhase.Executed.vmInitStateHash.<get-vmInitStateHash>|<get-vmInitStateHash>(){}[0]
        final val vmSteps // org.ton.kotlin.transaction.phase/ComputePhase.Executed.vmSteps|{}vmSteps[0]
            final fun <get-vmSteps>(): kotlin/Int // org.ton.kotlin.transaction.phase/ComputePhase.Executed.vmSteps.<get-vmSteps>|<get-vmSteps>(){}[0]

        final fun component1(): kotlin/Boolean // org.ton.kotlin.transaction.phase/ComputePhase.Executed.component1|component1(){}[0]
        final fun component10(): kotlin/Int? // org.ton.kotlin.transaction.phase/ComputePhase.Executed.component10|component10(){}[0]
        final fun component11(): kotlin/Int // org.ton.kotlin.transaction.phase/ComputePhase.Executed.component11|component11(){}[0]
        final fun component12(): kotlinx.io.bytestring/ByteString // org.ton.kotlin.transaction.phase/ComputePhase.Executed.component12|component12(){}[0]
        final fun component13(): kotlinx.io.bytestring/ByteString // org.ton.kotlin.transaction.phase/ComputePhase.Executed.component13|component13(){}[0]
        final fun component2(): kotlin/Boolean // org.ton.kotlin.transaction.phase/ComputePhase.Executed.component2|component2(){}[0]
        final fun component3(): kotlin/Boolean // org.ton.kotlin.transaction.phase/ComputePhase.Executed.component3|component3(){}[0]
        final fun component4(): org.ton.block/Coins // org.ton.kotlin.transaction.phase/ComputePhase.Executed.component4|component4(){}[0]
        final fun component5(): kotlin/Long // org.ton.kotlin.transaction.phase/ComputePhase.Executed.component5|component5(){}[0]
        final fun component6(): kotlin/Long // org.ton.kotlin.transaction.phase/ComputePhase.Executed.component6|component6(){}[0]
        final fun component7(): kotlin/Int? // org.ton.kotlin.transaction.phase/ComputePhase.Executed.component7|component7(){}[0]
        final fun component8(): kotlin/Byte // org.ton.kotlin.transaction.phase/ComputePhase.Executed.component8|component8(){}[0]
        final fun component9(): kotlin/Int // org.ton.kotlin.transaction.phase/ComputePhase.Executed.component9|component9(){}[0]
        final fun copy(kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., org.ton.block/Coins = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Int? = ..., kotlin/Byte = ..., kotlin/Int = ..., kotlin/Int? = ..., kotlin/Int = ..., kotlinx.io.bytestring/ByteString = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.kotlin.transaction.phase/ComputePhase.Executed // org.ton.kotlin.transaction.phase/ComputePhase.Executed.copy|copy(kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;org.ton.block.Coins;kotlin.Long;kotlin.Long;kotlin.Int?;kotlin.Byte;kotlin.Int;kotlin.Int?;kotlin.Int;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.kotlin.transaction.phase/ComputePhase.Executed.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // org.ton.kotlin.transaction.phase/ComputePhase.Executed.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // org.ton.kotlin.transaction.phase/ComputePhase.Executed.toString|toString(){}[0]
    }

    final object Companion : org.ton.tlb/TlbCodec<org.ton.kotlin.transaction.phase/ComputePhase> { // org.ton.kotlin.transaction.phase/ComputePhase.Companion|null[0]
        final fun createCell(org.ton.kotlin.transaction.phase/ComputePhase): org.ton.cell/Cell // org.ton.kotlin.transaction.phase/ComputePhase.Companion.createCell|createCell(org.ton.kotlin.transaction.phase.ComputePhase){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.kotlin.transaction.phase/ComputePhase // org.ton.kotlin.transaction.phase/ComputePhase.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.kotlin.transaction.phase/ComputePhase // org.ton.kotlin.transaction.phase/ComputePhase.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.kotlin.transaction.phase/ComputePhase // org.ton.kotlin.transaction.phase/ComputePhase.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.kotlin.transaction.phase/ComputePhase) // org.ton.kotlin.transaction.phase/ComputePhase.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.kotlin.transaction.phase.ComputePhase){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.kotlin.transaction.phase/ComputePhase, org.ton.kotlin.cell/CellContext) // org.ton.kotlin.transaction.phase/ComputePhase.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.kotlin.transaction.phase.ComputePhase;org.ton.kotlin.cell.CellContext){}[0]
    }
}

sealed interface org.ton.kotlin.transaction/TransactionInfo { // org.ton.kotlin.transaction/TransactionInfo|null[0]
    final class MergeInstall : org.ton.kotlin.transaction/TransactionInfo { // org.ton.kotlin.transaction/TransactionInfo.MergeInstall|null[0]
        constructor <init>(org.ton.block/SplitMergeInfo, org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction>, org.ton.kotlin.transaction.phase/StoragePhase?, org.ton.kotlin.transaction.phase/CreditPhase?, org.ton.kotlin.transaction.phase/ComputePhase, org.ton.kotlin.transaction.phase/ActionPhase?, kotlin/Boolean, kotlin/Boolean) // org.ton.kotlin.transaction/TransactionInfo.MergeInstall.<init>|<init>(org.ton.block.SplitMergeInfo;org.ton.tlb.CellRef<org.ton.kotlin.transaction.Transaction>;org.ton.kotlin.transaction.phase.StoragePhase?;org.ton.kotlin.transaction.phase.CreditPhase?;org.ton.kotlin.transaction.phase.ComputePhase;org.ton.kotlin.transaction.phase.ActionPhase?;kotlin.Boolean;kotlin.Boolean){}[0]

        final val actionPhase // org.ton.kotlin.transaction/TransactionInfo.MergeInstall.actionPhase|{}actionPhase[0]
            final fun <get-actionPhase>(): org.ton.kotlin.transaction.phase/ActionPhase? // org.ton.kotlin.transaction/TransactionInfo.MergeInstall.actionPhase.<get-actionPhase>|<get-actionPhase>(){}[0]
        final val computePhase // org.ton.kotlin.transaction/TransactionInfo.MergeInstall.computePhase|{}computePhase[0]
            final fun <get-computePhase>(): org.ton.kotlin.transaction.phase/ComputePhase // org.ton.kotlin.transaction/TransactionInfo.MergeInstall.computePhase.<get-computePhase>|<get-computePhase>(){}[0]
        final val creditPhase // org.ton.kotlin.transaction/TransactionInfo.MergeInstall.creditPhase|{}creditPhase[0]
            final fun <get-creditPhase>(): org.ton.kotlin.transaction.phase/CreditPhase? // org.ton.kotlin.transaction/TransactionInfo.MergeInstall.creditPhase.<get-creditPhase>|<get-creditPhase>(){}[0]
        final val isAborted // org.ton.kotlin.transaction/TransactionInfo.MergeInstall.isAborted|{}isAborted[0]
            final fun <get-isAborted>(): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.MergeInstall.isAborted.<get-isAborted>|<get-isAborted>(){}[0]
        final val isDestroyed // org.ton.kotlin.transaction/TransactionInfo.MergeInstall.isDestroyed|{}isDestroyed[0]
            final fun <get-isDestroyed>(): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.MergeInstall.isDestroyed.<get-isDestroyed>|<get-isDestroyed>(){}[0]
        final val prepareTransaction // org.ton.kotlin.transaction/TransactionInfo.MergeInstall.prepareTransaction|{}prepareTransaction[0]
            final fun <get-prepareTransaction>(): org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction> // org.ton.kotlin.transaction/TransactionInfo.MergeInstall.prepareTransaction.<get-prepareTransaction>|<get-prepareTransaction>(){}[0]
        final val splitInfo // org.ton.kotlin.transaction/TransactionInfo.MergeInstall.splitInfo|{}splitInfo[0]
            final fun <get-splitInfo>(): org.ton.block/SplitMergeInfo // org.ton.kotlin.transaction/TransactionInfo.MergeInstall.splitInfo.<get-splitInfo>|<get-splitInfo>(){}[0]
        final val storagePhase // org.ton.kotlin.transaction/TransactionInfo.MergeInstall.storagePhase|{}storagePhase[0]
            final fun <get-storagePhase>(): org.ton.kotlin.transaction.phase/StoragePhase? // org.ton.kotlin.transaction/TransactionInfo.MergeInstall.storagePhase.<get-storagePhase>|<get-storagePhase>(){}[0]

        final fun component1(): org.ton.block/SplitMergeInfo // org.ton.kotlin.transaction/TransactionInfo.MergeInstall.component1|component1(){}[0]
        final fun component2(): org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction> // org.ton.kotlin.transaction/TransactionInfo.MergeInstall.component2|component2(){}[0]
        final fun component3(): org.ton.kotlin.transaction.phase/StoragePhase? // org.ton.kotlin.transaction/TransactionInfo.MergeInstall.component3|component3(){}[0]
        final fun component4(): org.ton.kotlin.transaction.phase/CreditPhase? // org.ton.kotlin.transaction/TransactionInfo.MergeInstall.component4|component4(){}[0]
        final fun component5(): org.ton.kotlin.transaction.phase/ComputePhase // org.ton.kotlin.transaction/TransactionInfo.MergeInstall.component5|component5(){}[0]
        final fun component6(): org.ton.kotlin.transaction.phase/ActionPhase? // org.ton.kotlin.transaction/TransactionInfo.MergeInstall.component6|component6(){}[0]
        final fun component7(): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.MergeInstall.component7|component7(){}[0]
        final fun component8(): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.MergeInstall.component8|component8(){}[0]
        final fun copy(org.ton.block/SplitMergeInfo = ..., org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction> = ..., org.ton.kotlin.transaction.phase/StoragePhase? = ..., org.ton.kotlin.transaction.phase/CreditPhase? = ..., org.ton.kotlin.transaction.phase/ComputePhase = ..., org.ton.kotlin.transaction.phase/ActionPhase? = ..., kotlin/Boolean = ..., kotlin/Boolean = ...): org.ton.kotlin.transaction/TransactionInfo.MergeInstall // org.ton.kotlin.transaction/TransactionInfo.MergeInstall.copy|copy(org.ton.block.SplitMergeInfo;org.ton.tlb.CellRef<org.ton.kotlin.transaction.Transaction>;org.ton.kotlin.transaction.phase.StoragePhase?;org.ton.kotlin.transaction.phase.CreditPhase?;org.ton.kotlin.transaction.phase.ComputePhase;org.ton.kotlin.transaction.phase.ActionPhase?;kotlin.Boolean;kotlin.Boolean){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.MergeInstall.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // org.ton.kotlin.transaction/TransactionInfo.MergeInstall.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // org.ton.kotlin.transaction/TransactionInfo.MergeInstall.toString|toString(){}[0]
    }

    final class MergePrepare : org.ton.kotlin.transaction/TransactionInfo { // org.ton.kotlin.transaction/TransactionInfo.MergePrepare|null[0]
        constructor <init>(org.ton.block/SplitMergeInfo, org.ton.kotlin.transaction.phase/StoragePhase, kotlin/Boolean) // org.ton.kotlin.transaction/TransactionInfo.MergePrepare.<init>|<init>(org.ton.block.SplitMergeInfo;org.ton.kotlin.transaction.phase.StoragePhase;kotlin.Boolean){}[0]

        final val isAborted // org.ton.kotlin.transaction/TransactionInfo.MergePrepare.isAborted|{}isAborted[0]
            final fun <get-isAborted>(): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.MergePrepare.isAborted.<get-isAborted>|<get-isAborted>(){}[0]
        final val splitInfo // org.ton.kotlin.transaction/TransactionInfo.MergePrepare.splitInfo|{}splitInfo[0]
            final fun <get-splitInfo>(): org.ton.block/SplitMergeInfo // org.ton.kotlin.transaction/TransactionInfo.MergePrepare.splitInfo.<get-splitInfo>|<get-splitInfo>(){}[0]
        final val storagePhase // org.ton.kotlin.transaction/TransactionInfo.MergePrepare.storagePhase|{}storagePhase[0]
            final fun <get-storagePhase>(): org.ton.kotlin.transaction.phase/StoragePhase // org.ton.kotlin.transaction/TransactionInfo.MergePrepare.storagePhase.<get-storagePhase>|<get-storagePhase>(){}[0]

        final fun component1(): org.ton.block/SplitMergeInfo // org.ton.kotlin.transaction/TransactionInfo.MergePrepare.component1|component1(){}[0]
        final fun component2(): org.ton.kotlin.transaction.phase/StoragePhase // org.ton.kotlin.transaction/TransactionInfo.MergePrepare.component2|component2(){}[0]
        final fun component3(): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.MergePrepare.component3|component3(){}[0]
        final fun copy(org.ton.block/SplitMergeInfo = ..., org.ton.kotlin.transaction.phase/StoragePhase = ..., kotlin/Boolean = ...): org.ton.kotlin.transaction/TransactionInfo.MergePrepare // org.ton.kotlin.transaction/TransactionInfo.MergePrepare.copy|copy(org.ton.block.SplitMergeInfo;org.ton.kotlin.transaction.phase.StoragePhase;kotlin.Boolean){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.MergePrepare.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // org.ton.kotlin.transaction/TransactionInfo.MergePrepare.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // org.ton.kotlin.transaction/TransactionInfo.MergePrepare.toString|toString(){}[0]
    }

    final class Ordinary : org.ton.kotlin.transaction/TransactionInfo { // org.ton.kotlin.transaction/TransactionInfo.Ordinary|null[0]
        constructor <init>(kotlin/Boolean, org.ton.kotlin.transaction.phase/StoragePhase?, org.ton.kotlin.transaction.phase/CreditPhase?, org.ton.kotlin.transaction.phase/ComputePhase, org.ton.kotlin.transaction.phase/ActionPhase?, kotlin/Boolean, org.ton.kotlin.transaction.phase/BouncePhase?, kotlin/Boolean) // org.ton.kotlin.transaction/TransactionInfo.Ordinary.<init>|<init>(kotlin.Boolean;org.ton.kotlin.transaction.phase.StoragePhase?;org.ton.kotlin.transaction.phase.CreditPhase?;org.ton.kotlin.transaction.phase.ComputePhase;org.ton.kotlin.transaction.phase.ActionPhase?;kotlin.Boolean;org.ton.kotlin.transaction.phase.BouncePhase?;kotlin.Boolean){}[0]

        final val actionPhase // org.ton.kotlin.transaction/TransactionInfo.Ordinary.actionPhase|{}actionPhase[0]
            final fun <get-actionPhase>(): org.ton.kotlin.transaction.phase/ActionPhase? // org.ton.kotlin.transaction/TransactionInfo.Ordinary.actionPhase.<get-actionPhase>|<get-actionPhase>(){}[0]
        final val bouncePhase // org.ton.kotlin.transaction/TransactionInfo.Ordinary.bouncePhase|{}bouncePhase[0]
            final fun <get-bouncePhase>(): org.ton.kotlin.transaction.phase/BouncePhase? // org.ton.kotlin.transaction/TransactionInfo.Ordinary.bouncePhase.<get-bouncePhase>|<get-bouncePhase>(){}[0]
        final val computePhase // org.ton.kotlin.transaction/TransactionInfo.Ordinary.computePhase|{}computePhase[0]
            final fun <get-computePhase>(): org.ton.kotlin.transaction.phase/ComputePhase // org.ton.kotlin.transaction/TransactionInfo.Ordinary.computePhase.<get-computePhase>|<get-computePhase>(){}[0]
        final val creditPhase // org.ton.kotlin.transaction/TransactionInfo.Ordinary.creditPhase|{}creditPhase[0]
            final fun <get-creditPhase>(): org.ton.kotlin.transaction.phase/CreditPhase? // org.ton.kotlin.transaction/TransactionInfo.Ordinary.creditPhase.<get-creditPhase>|<get-creditPhase>(){}[0]
        final val isAborted // org.ton.kotlin.transaction/TransactionInfo.Ordinary.isAborted|{}isAborted[0]
            final fun <get-isAborted>(): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.Ordinary.isAborted.<get-isAborted>|<get-isAborted>(){}[0]
        final val isCreditFirst // org.ton.kotlin.transaction/TransactionInfo.Ordinary.isCreditFirst|{}isCreditFirst[0]
            final fun <get-isCreditFirst>(): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.Ordinary.isCreditFirst.<get-isCreditFirst>|<get-isCreditFirst>(){}[0]
        final val isDestroyed // org.ton.kotlin.transaction/TransactionInfo.Ordinary.isDestroyed|{}isDestroyed[0]
            final fun <get-isDestroyed>(): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.Ordinary.isDestroyed.<get-isDestroyed>|<get-isDestroyed>(){}[0]
        final val storagePhase // org.ton.kotlin.transaction/TransactionInfo.Ordinary.storagePhase|{}storagePhase[0]
            final fun <get-storagePhase>(): org.ton.kotlin.transaction.phase/StoragePhase? // org.ton.kotlin.transaction/TransactionInfo.Ordinary.storagePhase.<get-storagePhase>|<get-storagePhase>(){}[0]

        final fun component1(): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.Ordinary.component1|component1(){}[0]
        final fun component2(): org.ton.kotlin.transaction.phase/StoragePhase? // org.ton.kotlin.transaction/TransactionInfo.Ordinary.component2|component2(){}[0]
        final fun component3(): org.ton.kotlin.transaction.phase/CreditPhase? // org.ton.kotlin.transaction/TransactionInfo.Ordinary.component3|component3(){}[0]
        final fun component4(): org.ton.kotlin.transaction.phase/ComputePhase // org.ton.kotlin.transaction/TransactionInfo.Ordinary.component4|component4(){}[0]
        final fun component5(): org.ton.kotlin.transaction.phase/ActionPhase? // org.ton.kotlin.transaction/TransactionInfo.Ordinary.component5|component5(){}[0]
        final fun component6(): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.Ordinary.component6|component6(){}[0]
        final fun component7(): org.ton.kotlin.transaction.phase/BouncePhase? // org.ton.kotlin.transaction/TransactionInfo.Ordinary.component7|component7(){}[0]
        final fun component8(): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.Ordinary.component8|component8(){}[0]
        final fun copy(kotlin/Boolean = ..., org.ton.kotlin.transaction.phase/StoragePhase? = ..., org.ton.kotlin.transaction.phase/CreditPhase? = ..., org.ton.kotlin.transaction.phase/ComputePhase = ..., org.ton.kotlin.transaction.phase/ActionPhase? = ..., kotlin/Boolean = ..., org.ton.kotlin.transaction.phase/BouncePhase? = ..., kotlin/Boolean = ...): org.ton.kotlin.transaction/TransactionInfo.Ordinary // org.ton.kotlin.transaction/TransactionInfo.Ordinary.copy|copy(kotlin.Boolean;org.ton.kotlin.transaction.phase.StoragePhase?;org.ton.kotlin.transaction.phase.CreditPhase?;org.ton.kotlin.transaction.phase.ComputePhase;org.ton.kotlin.transaction.phase.ActionPhase?;kotlin.Boolean;org.ton.kotlin.transaction.phase.BouncePhase?;kotlin.Boolean){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.Ordinary.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // org.ton.kotlin.transaction/TransactionInfo.Ordinary.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // org.ton.kotlin.transaction/TransactionInfo.Ordinary.toString|toString(){}[0]
    }

    final class SplitInstall : org.ton.kotlin.transaction/TransactionInfo { // org.ton.kotlin.transaction/TransactionInfo.SplitInstall|null[0]
        constructor <init>(org.ton.block/SplitMergeInfo, org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction>, kotlin/Boolean) // org.ton.kotlin.transaction/TransactionInfo.SplitInstall.<init>|<init>(org.ton.block.SplitMergeInfo;org.ton.tlb.CellRef<org.ton.kotlin.transaction.Transaction>;kotlin.Boolean){}[0]

        final val isInstalled // org.ton.kotlin.transaction/TransactionInfo.SplitInstall.isInstalled|{}isInstalled[0]
            final fun <get-isInstalled>(): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.SplitInstall.isInstalled.<get-isInstalled>|<get-isInstalled>(){}[0]
        final val prepareTransaction // org.ton.kotlin.transaction/TransactionInfo.SplitInstall.prepareTransaction|{}prepareTransaction[0]
            final fun <get-prepareTransaction>(): org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction> // org.ton.kotlin.transaction/TransactionInfo.SplitInstall.prepareTransaction.<get-prepareTransaction>|<get-prepareTransaction>(){}[0]
        final val splitInfo // org.ton.kotlin.transaction/TransactionInfo.SplitInstall.splitInfo|{}splitInfo[0]
            final fun <get-splitInfo>(): org.ton.block/SplitMergeInfo // org.ton.kotlin.transaction/TransactionInfo.SplitInstall.splitInfo.<get-splitInfo>|<get-splitInfo>(){}[0]

        final fun component1(): org.ton.block/SplitMergeInfo // org.ton.kotlin.transaction/TransactionInfo.SplitInstall.component1|component1(){}[0]
        final fun component2(): org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction> // org.ton.kotlin.transaction/TransactionInfo.SplitInstall.component2|component2(){}[0]
        final fun component3(): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.SplitInstall.component3|component3(){}[0]
        final fun copy(org.ton.block/SplitMergeInfo = ..., org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction> = ..., kotlin/Boolean = ...): org.ton.kotlin.transaction/TransactionInfo.SplitInstall // org.ton.kotlin.transaction/TransactionInfo.SplitInstall.copy|copy(org.ton.block.SplitMergeInfo;org.ton.tlb.CellRef<org.ton.kotlin.transaction.Transaction>;kotlin.Boolean){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.SplitInstall.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // org.ton.kotlin.transaction/TransactionInfo.SplitInstall.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // org.ton.kotlin.transaction/TransactionInfo.SplitInstall.toString|toString(){}[0]
    }

    final class SplitPrepare : org.ton.kotlin.transaction/TransactionInfo { // org.ton.kotlin.transaction/TransactionInfo.SplitPrepare|null[0]
        constructor <init>(org.ton.block/SplitMergeInfo, org.ton.kotlin.transaction.phase/StoragePhase?, org.ton.kotlin.transaction.phase/ComputePhase, org.ton.kotlin.transaction.phase/ActionPhase?, kotlin/Boolean, kotlin/Boolean) // org.ton.kotlin.transaction/TransactionInfo.SplitPrepare.<init>|<init>(org.ton.block.SplitMergeInfo;org.ton.kotlin.transaction.phase.StoragePhase?;org.ton.kotlin.transaction.phase.ComputePhase;org.ton.kotlin.transaction.phase.ActionPhase?;kotlin.Boolean;kotlin.Boolean){}[0]

        final val actionPhase // org.ton.kotlin.transaction/TransactionInfo.SplitPrepare.actionPhase|{}actionPhase[0]
            final fun <get-actionPhase>(): org.ton.kotlin.transaction.phase/ActionPhase? // org.ton.kotlin.transaction/TransactionInfo.SplitPrepare.actionPhase.<get-actionPhase>|<get-actionPhase>(){}[0]
        final val computePhase // org.ton.kotlin.transaction/TransactionInfo.SplitPrepare.computePhase|{}computePhase[0]
            final fun <get-computePhase>(): org.ton.kotlin.transaction.phase/ComputePhase // org.ton.kotlin.transaction/TransactionInfo.SplitPrepare.computePhase.<get-computePhase>|<get-computePhase>(){}[0]
        final val isAborted // org.ton.kotlin.transaction/TransactionInfo.SplitPrepare.isAborted|{}isAborted[0]
            final fun <get-isAborted>(): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.SplitPrepare.isAborted.<get-isAborted>|<get-isAborted>(){}[0]
        final val isDestroyed // org.ton.kotlin.transaction/TransactionInfo.SplitPrepare.isDestroyed|{}isDestroyed[0]
            final fun <get-isDestroyed>(): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.SplitPrepare.isDestroyed.<get-isDestroyed>|<get-isDestroyed>(){}[0]
        final val splitInfo // org.ton.kotlin.transaction/TransactionInfo.SplitPrepare.splitInfo|{}splitInfo[0]
            final fun <get-splitInfo>(): org.ton.block/SplitMergeInfo // org.ton.kotlin.transaction/TransactionInfo.SplitPrepare.splitInfo.<get-splitInfo>|<get-splitInfo>(){}[0]
        final val storagePhase // org.ton.kotlin.transaction/TransactionInfo.SplitPrepare.storagePhase|{}storagePhase[0]
            final fun <get-storagePhase>(): org.ton.kotlin.transaction.phase/StoragePhase? // org.ton.kotlin.transaction/TransactionInfo.SplitPrepare.storagePhase.<get-storagePhase>|<get-storagePhase>(){}[0]

        final fun component1(): org.ton.block/SplitMergeInfo // org.ton.kotlin.transaction/TransactionInfo.SplitPrepare.component1|component1(){}[0]
        final fun component2(): org.ton.kotlin.transaction.phase/StoragePhase? // org.ton.kotlin.transaction/TransactionInfo.SplitPrepare.component2|component2(){}[0]
        final fun component3(): org.ton.kotlin.transaction.phase/ComputePhase // org.ton.kotlin.transaction/TransactionInfo.SplitPrepare.component3|component3(){}[0]
        final fun component4(): org.ton.kotlin.transaction.phase/ActionPhase? // org.ton.kotlin.transaction/TransactionInfo.SplitPrepare.component4|component4(){}[0]
        final fun component5(): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.SplitPrepare.component5|component5(){}[0]
        final fun component6(): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.SplitPrepare.component6|component6(){}[0]
        final fun copy(org.ton.block/SplitMergeInfo = ..., org.ton.kotlin.transaction.phase/StoragePhase? = ..., org.ton.kotlin.transaction.phase/ComputePhase = ..., org.ton.kotlin.transaction.phase/ActionPhase? = ..., kotlin/Boolean = ..., kotlin/Boolean = ...): org.ton.kotlin.transaction/TransactionInfo.SplitPrepare // org.ton.kotlin.transaction/TransactionInfo.SplitPrepare.copy|copy(org.ton.block.SplitMergeInfo;org.ton.kotlin.transaction.phase.StoragePhase?;org.ton.kotlin.transaction.phase.ComputePhase;org.ton.kotlin.transaction.phase.ActionPhase?;kotlin.Boolean;kotlin.Boolean){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.SplitPrepare.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // org.ton.kotlin.transaction/TransactionInfo.SplitPrepare.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // org.ton.kotlin.transaction/TransactionInfo.SplitPrepare.toString|toString(){}[0]
    }

    final class Storage : org.ton.kotlin.transaction/TransactionInfo { // org.ton.kotlin.transaction/TransactionInfo.Storage|null[0]
        constructor <init>(org.ton.kotlin.transaction.phase/StoragePhase) // org.ton.kotlin.transaction/TransactionInfo.Storage.<init>|<init>(org.ton.kotlin.transaction.phase.StoragePhase){}[0]

        final val storagePhase // org.ton.kotlin.transaction/TransactionInfo.Storage.storagePhase|{}storagePhase[0]
            final fun <get-storagePhase>(): org.ton.kotlin.transaction.phase/StoragePhase // org.ton.kotlin.transaction/TransactionInfo.Storage.storagePhase.<get-storagePhase>|<get-storagePhase>(){}[0]

        final fun component1(): org.ton.kotlin.transaction.phase/StoragePhase // org.ton.kotlin.transaction/TransactionInfo.Storage.component1|component1(){}[0]
        final fun copy(org.ton.kotlin.transaction.phase/StoragePhase = ...): org.ton.kotlin.transaction/TransactionInfo.Storage // org.ton.kotlin.transaction/TransactionInfo.Storage.copy|copy(org.ton.kotlin.transaction.phase.StoragePhase){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.Storage.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // org.ton.kotlin.transaction/TransactionInfo.Storage.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // org.ton.kotlin.transaction/TransactionInfo.Storage.toString|toString(){}[0]
    }

    final class TickTock : org.ton.kotlin.transaction/TransactionInfo { // org.ton.kotlin.transaction/TransactionInfo.TickTock|null[0]
        constructor <init>(kotlin/Boolean, org.ton.kotlin.transaction.phase/StoragePhase, org.ton.kotlin.transaction.phase/ComputePhase, org.ton.kotlin.transaction.phase/ActionPhase?, kotlin/Boolean, kotlin/Boolean) // org.ton.kotlin.transaction/TransactionInfo.TickTock.<init>|<init>(kotlin.Boolean;org.ton.kotlin.transaction.phase.StoragePhase;org.ton.kotlin.transaction.phase.ComputePhase;org.ton.kotlin.transaction.phase.ActionPhase?;kotlin.Boolean;kotlin.Boolean){}[0]

        final val actionPhase // org.ton.kotlin.transaction/TransactionInfo.TickTock.actionPhase|{}actionPhase[0]
            final fun <get-actionPhase>(): org.ton.kotlin.transaction.phase/ActionPhase? // org.ton.kotlin.transaction/TransactionInfo.TickTock.actionPhase.<get-actionPhase>|<get-actionPhase>(){}[0]
        final val computePhase // org.ton.kotlin.transaction/TransactionInfo.TickTock.computePhase|{}computePhase[0]
            final fun <get-computePhase>(): org.ton.kotlin.transaction.phase/ComputePhase // org.ton.kotlin.transaction/TransactionInfo.TickTock.computePhase.<get-computePhase>|<get-computePhase>(){}[0]
        final val isAborted // org.ton.kotlin.transaction/TransactionInfo.TickTock.isAborted|{}isAborted[0]
            final fun <get-isAborted>(): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.TickTock.isAborted.<get-isAborted>|<get-isAborted>(){}[0]
        final val isDestroyed // org.ton.kotlin.transaction/TransactionInfo.TickTock.isDestroyed|{}isDestroyed[0]
            final fun <get-isDestroyed>(): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.TickTock.isDestroyed.<get-isDestroyed>|<get-isDestroyed>(){}[0]
        final val isTick // org.ton.kotlin.transaction/TransactionInfo.TickTock.isTick|{}isTick[0]
            final fun <get-isTick>(): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.TickTock.isTick.<get-isTick>|<get-isTick>(){}[0]
        final val isTock // org.ton.kotlin.transaction/TransactionInfo.TickTock.isTock|{}isTock[0]
            final fun <get-isTock>(): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.TickTock.isTock.<get-isTock>|<get-isTock>(){}[0]
        final val storagePhase // org.ton.kotlin.transaction/TransactionInfo.TickTock.storagePhase|{}storagePhase[0]
            final fun <get-storagePhase>(): org.ton.kotlin.transaction.phase/StoragePhase // org.ton.kotlin.transaction/TransactionInfo.TickTock.storagePhase.<get-storagePhase>|<get-storagePhase>(){}[0]

        final fun component1(): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.TickTock.component1|component1(){}[0]
        final fun component2(): org.ton.kotlin.transaction.phase/StoragePhase // org.ton.kotlin.transaction/TransactionInfo.TickTock.component2|component2(){}[0]
        final fun component3(): org.ton.kotlin.transaction.phase/ComputePhase // org.ton.kotlin.transaction/TransactionInfo.TickTock.component3|component3(){}[0]
        final fun component4(): org.ton.kotlin.transaction.phase/ActionPhase? // org.ton.kotlin.transaction/TransactionInfo.TickTock.component4|component4(){}[0]
        final fun component5(): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.TickTock.component5|component5(){}[0]
        final fun component6(): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.TickTock.component6|component6(){}[0]
        final fun copy(kotlin/Boolean = ..., org.ton.kotlin.transaction.phase/StoragePhase = ..., org.ton.kotlin.transaction.phase/ComputePhase = ..., org.ton.kotlin.transaction.phase/ActionPhase? = ..., kotlin/Boolean = ..., kotlin/Boolean = ...): org.ton.kotlin.transaction/TransactionInfo.TickTock // org.ton.kotlin.transaction/TransactionInfo.TickTock.copy|copy(kotlin.Boolean;org.ton.kotlin.transaction.phase.StoragePhase;org.ton.kotlin.transaction.phase.ComputePhase;org.ton.kotlin.transaction.phase.ActionPhase?;kotlin.Boolean;kotlin.Boolean){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.kotlin.transaction/TransactionInfo.TickTock.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // org.ton.kotlin.transaction/TransactionInfo.TickTock.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // org.ton.kotlin.transaction/TransactionInfo.TickTock.toString|toString(){}[0]
    }

    final object Companion : org.ton.tlb/TlbCodec<org.ton.kotlin.transaction/TransactionInfo> { // org.ton.kotlin.transaction/TransactionInfo.Companion|null[0]
        final fun createCell(org.ton.kotlin.transaction/TransactionInfo): org.ton.cell/Cell // org.ton.kotlin.transaction/TransactionInfo.Companion.createCell|createCell(org.ton.kotlin.transaction.TransactionInfo){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.kotlin.transaction/TransactionInfo // org.ton.kotlin.transaction/TransactionInfo.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.kotlin.transaction/TransactionInfo // org.ton.kotlin.transaction/TransactionInfo.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.kotlin.transaction/TransactionInfo // org.ton.kotlin.transaction/TransactionInfo.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.kotlin.transaction/TransactionInfo) // org.ton.kotlin.transaction/TransactionInfo.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.kotlin.transaction.TransactionInfo){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.kotlin.transaction/TransactionInfo, org.ton.kotlin.cell/CellContext) // org.ton.kotlin.transaction/TransactionInfo.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.kotlin.transaction.TransactionInfo;org.ton.kotlin.cell.CellContext){}[0]
    }
}

final class <#A: kotlin/Any?> org.ton.block/BinTreeFork : org.ton.block/BinTree<#A> { // org.ton.block/BinTreeFork|null[0]
    constructor <init>(org.ton.tlb/CellRef<org.ton.block/BinTree<#A>>, org.ton.tlb/CellRef<org.ton.block/BinTree<#A>>) // org.ton.block/BinTreeFork.<init>|<init>(org.ton.tlb.CellRef<org.ton.block.BinTree<1:0>>;org.ton.tlb.CellRef<org.ton.block.BinTree<1:0>>){}[0]

    final val left // org.ton.block/BinTreeFork.left|{}left[0]
        final fun <get-left>(): org.ton.tlb/CellRef<org.ton.block/BinTree<#A>> // org.ton.block/BinTreeFork.left.<get-left>|<get-left>(){}[0]
    final val right // org.ton.block/BinTreeFork.right|{}right[0]
        final fun <get-right>(): org.ton.tlb/CellRef<org.ton.block/BinTree<#A>> // org.ton.block/BinTreeFork.right.<get-right>|<get-right>(){}[0]

    final fun component1(): org.ton.tlb/CellRef<org.ton.block/BinTree<#A>> // org.ton.block/BinTreeFork.component1|component1(){}[0]
    final fun component2(): org.ton.tlb/CellRef<org.ton.block/BinTree<#A>> // org.ton.block/BinTreeFork.component2|component2(){}[0]
    final fun copy(org.ton.tlb/CellRef<org.ton.block/BinTree<#A>> = ..., org.ton.tlb/CellRef<org.ton.block/BinTree<#A>> = ...): org.ton.block/BinTreeFork<#A> // org.ton.block/BinTreeFork.copy|copy(org.ton.tlb.CellRef<org.ton.block.BinTree<1:0>>;org.ton.tlb.CellRef<org.ton.block.BinTree<1:0>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/BinTreeFork.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/BinTreeFork.hashCode|hashCode(){}[0]
    final fun nodes(): kotlin.sequences/Sequence<#A> // org.ton.block/BinTreeFork.nodes|nodes(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/BinTreeFork.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/BinTreeFork.toString|toString(){}[0]

    final object Companion { // org.ton.block/BinTreeFork.Companion|null[0]
        final fun <#A2: kotlin/Any?> tlbCodec(org.ton.tlb/TlbCodec<#A2>): org.ton.tlb/TlbConstructor<org.ton.block/BinTreeFork<#A2>> // org.ton.block/BinTreeFork.Companion.tlbCodec|tlbCodec(org.ton.tlb.TlbCodec<0:0>){0§<kotlin.Any?>}[0]
    }
}

final class <#A: kotlin/Any?> org.ton.block/BinTreeLeaf : org.ton.block/BinTree<#A> { // org.ton.block/BinTreeLeaf|null[0]
    constructor <init>(#A) // org.ton.block/BinTreeLeaf.<init>|<init>(1:0){}[0]

    final val leaf // org.ton.block/BinTreeLeaf.leaf|{}leaf[0]
        final fun <get-leaf>(): #A // org.ton.block/BinTreeLeaf.leaf.<get-leaf>|<get-leaf>(){}[0]

    final fun component1(): #A // org.ton.block/BinTreeLeaf.component1|component1(){}[0]
    final fun copy(#A = ...): org.ton.block/BinTreeLeaf<#A> // org.ton.block/BinTreeLeaf.copy|copy(1:0){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/BinTreeLeaf.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/BinTreeLeaf.hashCode|hashCode(){}[0]
    final fun nodes(): kotlin.sequences/Sequence<#A> // org.ton.block/BinTreeLeaf.nodes|nodes(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/BinTreeLeaf.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/BinTreeLeaf.toString|toString(){}[0]

    final object Companion { // org.ton.block/BinTreeLeaf.Companion|null[0]
        final fun <#A2: kotlin/Any?> tlbCodec(org.ton.tlb/TlbCodec<#A2>): org.ton.tlb/TlbConstructor<org.ton.block/BinTreeLeaf<#A2>> // org.ton.block/BinTreeLeaf.Companion.tlbCodec|tlbCodec(org.ton.tlb.TlbCodec<0:0>){0§<kotlin.Any?>}[0]
        final inline fun <#A2: reified kotlin/Any?> invoke(org.ton.tlb/TlbCodec<#A2>): org.ton.tlb/TlbConstructor<org.ton.block/BinTreeLeaf<#A2>> // org.ton.block/BinTreeLeaf.Companion.invoke|invoke(org.ton.tlb.TlbCodec<0:0>){0§<kotlin.Any?>}[0]
    }
}

final class <#A: kotlin/Any?> org.ton.block/Just : org.ton.block/Maybe<#A> { // org.ton.block/Just|null[0]
    constructor <init>(#A) // org.ton.block/Just.<init>|<init>(1:0){}[0]

    final val value // org.ton.block/Just.value|{}value[0]
        final fun <get-value>(): #A // org.ton.block/Just.value.<get-value>|<get-value>(){}[0]

    final fun component1(): #A // org.ton.block/Just.component1|component1(){}[0]
    final fun copy(#A = ...): org.ton.block/Just<#A> // org.ton.block/Just.copy|copy(1:0){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/Just.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/Just.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/Just.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/Just.toString|toString(){}[0]
}

final class <#A: kotlin/Any?> org.ton.block/MerkleProof { // org.ton.block/MerkleProof|null[0]
    constructor <init>(org.ton.bitstring/BitString, kotlin/Int, org.ton.tlb/CellRef<#A>) // org.ton.block/MerkleProof.<init>|<init>(org.ton.bitstring.BitString;kotlin.Int;org.ton.tlb.CellRef<1:0>){}[0]

    final val depth // org.ton.block/MerkleProof.depth|{}depth[0]
        final fun <get-depth>(): kotlin/Int // org.ton.block/MerkleProof.depth.<get-depth>|<get-depth>(){}[0]
    final val virtualHash // org.ton.block/MerkleProof.virtualHash|{}virtualHash[0]
        final fun <get-virtualHash>(): org.ton.bitstring/BitString // org.ton.block/MerkleProof.virtualHash.<get-virtualHash>|<get-virtualHash>(){}[0]
    final val virtualRoot // org.ton.block/MerkleProof.virtualRoot|{}virtualRoot[0]
        final fun <get-virtualRoot>(): org.ton.tlb/CellRef<#A> // org.ton.block/MerkleProof.virtualRoot.<get-virtualRoot>|<get-virtualRoot>(){}[0]

    final fun component1(): org.ton.bitstring/BitString // org.ton.block/MerkleProof.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.block/MerkleProof.component2|component2(){}[0]
    final fun component3(): org.ton.tlb/CellRef<#A> // org.ton.block/MerkleProof.component3|component3(){}[0]
    final fun copy(org.ton.bitstring/BitString = ..., kotlin/Int = ..., org.ton.tlb/CellRef<#A> = ...): org.ton.block/MerkleProof<#A> // org.ton.block/MerkleProof.copy|copy(org.ton.bitstring.BitString;kotlin.Int;org.ton.tlb.CellRef<1:0>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/MerkleProof.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/MerkleProof.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/MerkleProof.toString|toString(){}[0]

    final object Companion { // org.ton.block/MerkleProof.Companion|null[0]
        final fun virtualize(org.ton.cell/Cell, kotlin/Int = ...): org.ton.cell/Cell // org.ton.block/MerkleProof.Companion.virtualize|virtualize(org.ton.cell.Cell;kotlin.Int){}[0]
    }
}

final class <#A: kotlin/Any?> org.ton.block/MerkleUpdate : org.ton.tlb/TlbObject { // org.ton.block/MerkleUpdate|null[0]
    constructor <init>(org.ton.bitstring/BitString, org.ton.bitstring/BitString, kotlin/UShort, kotlin/UShort, org.ton.tlb/CellRef<#A>, org.ton.tlb/CellRef<#A>) // org.ton.block/MerkleUpdate.<init>|<init>(org.ton.bitstring.BitString;org.ton.bitstring.BitString;kotlin.UShort;kotlin.UShort;org.ton.tlb.CellRef<1:0>;org.ton.tlb.CellRef<1:0>){}[0]

    final val new // org.ton.block/MerkleUpdate.new|{}new[0]
        final fun <get-new>(): org.ton.tlb/CellRef<#A> // org.ton.block/MerkleUpdate.new.<get-new>|<get-new>(){}[0]
    final val newDepth // org.ton.block/MerkleUpdate.newDepth|{}newDepth[0]
        final fun <get-newDepth>(): kotlin/UShort // org.ton.block/MerkleUpdate.newDepth.<get-newDepth>|<get-newDepth>(){}[0]
    final val newHash // org.ton.block/MerkleUpdate.newHash|{}newHash[0]
        final fun <get-newHash>(): org.ton.bitstring/BitString // org.ton.block/MerkleUpdate.newHash.<get-newHash>|<get-newHash>(){}[0]
    final val old // org.ton.block/MerkleUpdate.old|{}old[0]
        final fun <get-old>(): org.ton.tlb/CellRef<#A> // org.ton.block/MerkleUpdate.old.<get-old>|<get-old>(){}[0]
    final val oldDepth // org.ton.block/MerkleUpdate.oldDepth|{}oldDepth[0]
        final fun <get-oldDepth>(): kotlin/UShort // org.ton.block/MerkleUpdate.oldDepth.<get-oldDepth>|<get-oldDepth>(){}[0]
    final val oldHash // org.ton.block/MerkleUpdate.oldHash|{}oldHash[0]
        final fun <get-oldHash>(): org.ton.bitstring/BitString // org.ton.block/MerkleUpdate.oldHash.<get-oldHash>|<get-oldHash>(){}[0]

    final fun component1(): org.ton.bitstring/BitString // org.ton.block/MerkleUpdate.component1|component1(){}[0]
    final fun component2(): org.ton.bitstring/BitString // org.ton.block/MerkleUpdate.component2|component2(){}[0]
    final fun component3(): kotlin/UShort // org.ton.block/MerkleUpdate.component3|component3(){}[0]
    final fun component4(): kotlin/UShort // org.ton.block/MerkleUpdate.component4|component4(){}[0]
    final fun component5(): org.ton.tlb/CellRef<#A> // org.ton.block/MerkleUpdate.component5|component5(){}[0]
    final fun component6(): org.ton.tlb/CellRef<#A> // org.ton.block/MerkleUpdate.component6|component6(){}[0]
    final fun copy(org.ton.bitstring/BitString = ..., org.ton.bitstring/BitString = ..., kotlin/UShort = ..., kotlin/UShort = ..., org.ton.tlb/CellRef<#A> = ..., org.ton.tlb/CellRef<#A> = ...): org.ton.block/MerkleUpdate<#A> // org.ton.block/MerkleUpdate.copy|copy(org.ton.bitstring.BitString;org.ton.bitstring.BitString;kotlin.UShort;kotlin.UShort;org.ton.tlb.CellRef<1:0>;org.ton.tlb.CellRef<1:0>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/MerkleUpdate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/MerkleUpdate.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/MerkleUpdate.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/MerkleUpdate.toString|toString(){}[0]

    final object Companion { // org.ton.block/MerkleUpdate.Companion|null[0]
        final fun <#A2: kotlin/Any?> tlbCodec(org.ton.tlb/TlbCodec<#A2>): org.ton.tlb/TlbCodec<org.ton.block/MerkleUpdate<#A2>> // org.ton.block/MerkleUpdate.Companion.tlbCodec|tlbCodec(org.ton.tlb.TlbCodec<0:0>){0§<kotlin.Any?>}[0]
    }
}

final class <#A: kotlin/Any?> org.ton.block/Message : org.ton.tlb/TlbObject { // org.ton.block/Message|null[0]
    constructor <init>(org.ton.block/CommonMsgInfo, org.ton.block/Maybe<org.ton.block/Either<org.ton.block/StateInit, org.ton.tlb/CellRef<org.ton.block/StateInit>>>, org.ton.block/Either<#A, org.ton.tlb/CellRef<#A>>) // org.ton.block/Message.<init>|<init>(org.ton.block.CommonMsgInfo;org.ton.block.Maybe<org.ton.block.Either<org.ton.block.StateInit,org.ton.tlb.CellRef<org.ton.block.StateInit>>>;org.ton.block.Either<1:0,org.ton.tlb.CellRef<1:0>>){}[0]
    constructor <init>(org.ton.block/CommonMsgInfo, org.ton.block/StateInit?, #A, org.ton.tlb/TlbCodec<#A>, org.ton.kotlin.message/MessageLayout) // org.ton.block/Message.<init>|<init>(org.ton.block.CommonMsgInfo;org.ton.block.StateInit?;1:0;org.ton.tlb.TlbCodec<1:0>;org.ton.kotlin.message.MessageLayout){}[0]

    final val body // org.ton.block/Message.body|{}body[0]
        final fun <get-body>(): org.ton.block/Either<#A, org.ton.tlb/CellRef<#A>> // org.ton.block/Message.body.<get-body>|<get-body>(){}[0]
    final val info // org.ton.block/Message.info|{}info[0]
        final fun <get-info>(): org.ton.block/CommonMsgInfo // org.ton.block/Message.info.<get-info>|<get-info>(){}[0]
    final val init // org.ton.block/Message.init|{}init[0]
        final fun <get-init>(): org.ton.block/Maybe<org.ton.block/Either<org.ton.block/StateInit, org.ton.tlb/CellRef<org.ton.block/StateInit>>> // org.ton.block/Message.init.<get-init>|<get-init>(){}[0]

    final fun component1(): org.ton.block/CommonMsgInfo // org.ton.block/Message.component1|component1(){}[0]
    final fun component2(): org.ton.block/Maybe<org.ton.block/Either<org.ton.block/StateInit, org.ton.tlb/CellRef<org.ton.block/StateInit>>> // org.ton.block/Message.component2|component2(){}[0]
    final fun component3(): org.ton.block/Either<#A, org.ton.tlb/CellRef<#A>> // org.ton.block/Message.component3|component3(){}[0]
    final fun copy(org.ton.block/CommonMsgInfo = ..., org.ton.block/Maybe<org.ton.block/Either<org.ton.block/StateInit, org.ton.tlb/CellRef<org.ton.block/StateInit>>> = ..., org.ton.block/Either<#A, org.ton.tlb/CellRef<#A>> = ...): org.ton.block/Message<#A> // org.ton.block/Message.copy|copy(org.ton.block.CommonMsgInfo;org.ton.block.Maybe<org.ton.block.Either<org.ton.block.StateInit,org.ton.tlb.CellRef<org.ton.block.StateInit>>>;org.ton.block.Either<1:0,org.ton.tlb.CellRef<1:0>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/Message.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/Message.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/Message.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/Message.toString|toString(){}[0]

    final object Companion { // org.ton.block/Message.Companion|null[0]
        final val Any // org.ton.block/Message.Companion.Any|{}Any[0]
            final fun <get-Any>(): org.ton.tlb/TlbConstructor<org.ton.block/Message<org.ton.cell/Cell>> // org.ton.block/Message.Companion.Any.<get-Any>|<get-Any>(){}[0]

        final fun <#A2: kotlin/Any> tlbCodec(org.ton.tlb/TlbCodec<#A2>): org.ton.tlb/TlbConstructor<org.ton.block/Message<#A2>> // org.ton.block/Message.Companion.tlbCodec|tlbCodec(org.ton.tlb.TlbCodec<0:0>){0§<kotlin.Any>}[0]
    }
}

final class <#A: kotlin/Any?> org.ton.block/MessageRelaxed : org.ton.tlb/TlbObject { // org.ton.block/MessageRelaxed|null[0]
    constructor <init>(org.ton.block/CommonMsgInfoRelaxed, org.ton.block/Maybe<org.ton.block/Either<org.ton.block/StateInit, org.ton.tlb/CellRef<org.ton.block/StateInit>>>, org.ton.block/Either<#A, org.ton.tlb/CellRef<#A>>) // org.ton.block/MessageRelaxed.<init>|<init>(org.ton.block.CommonMsgInfoRelaxed;org.ton.block.Maybe<org.ton.block.Either<org.ton.block.StateInit,org.ton.tlb.CellRef<org.ton.block.StateInit>>>;org.ton.block.Either<1:0,org.ton.tlb.CellRef<1:0>>){}[0]
    constructor <init>(org.ton.block/CommonMsgInfoRelaxed, org.ton.block/StateInit?, #A, org.ton.tlb/TlbCodec<#A>, org.ton.kotlin.message/MessageLayout) // org.ton.block/MessageRelaxed.<init>|<init>(org.ton.block.CommonMsgInfoRelaxed;org.ton.block.StateInit?;1:0;org.ton.tlb.TlbCodec<1:0>;org.ton.kotlin.message.MessageLayout){}[0]

    final val body // org.ton.block/MessageRelaxed.body|{}body[0]
        final fun <get-body>(): org.ton.block/Either<#A, org.ton.tlb/CellRef<#A>> // org.ton.block/MessageRelaxed.body.<get-body>|<get-body>(){}[0]
    final val info // org.ton.block/MessageRelaxed.info|{}info[0]
        final fun <get-info>(): org.ton.block/CommonMsgInfoRelaxed // org.ton.block/MessageRelaxed.info.<get-info>|<get-info>(){}[0]
    final val init // org.ton.block/MessageRelaxed.init|{}init[0]
        final fun <get-init>(): org.ton.block/Maybe<org.ton.block/Either<org.ton.block/StateInit, org.ton.tlb/CellRef<org.ton.block/StateInit>>> // org.ton.block/MessageRelaxed.init.<get-init>|<get-init>(){}[0]

    final fun component1(): org.ton.block/CommonMsgInfoRelaxed // org.ton.block/MessageRelaxed.component1|component1(){}[0]
    final fun component2(): org.ton.block/Maybe<org.ton.block/Either<org.ton.block/StateInit, org.ton.tlb/CellRef<org.ton.block/StateInit>>> // org.ton.block/MessageRelaxed.component2|component2(){}[0]
    final fun component3(): org.ton.block/Either<#A, org.ton.tlb/CellRef<#A>> // org.ton.block/MessageRelaxed.component3|component3(){}[0]
    final fun copy(org.ton.block/CommonMsgInfoRelaxed = ..., org.ton.block/Maybe<org.ton.block/Either<org.ton.block/StateInit, org.ton.tlb/CellRef<org.ton.block/StateInit>>> = ..., org.ton.block/Either<#A, org.ton.tlb/CellRef<#A>> = ...): org.ton.block/MessageRelaxed<#A> // org.ton.block/MessageRelaxed.copy|copy(org.ton.block.CommonMsgInfoRelaxed;org.ton.block.Maybe<org.ton.block.Either<org.ton.block.StateInit,org.ton.tlb.CellRef<org.ton.block.StateInit>>>;org.ton.block.Either<1:0,org.ton.tlb.CellRef<1:0>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/MessageRelaxed.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/MessageRelaxed.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/MessageRelaxed.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/MessageRelaxed.toString|toString(){}[0]

    final object Companion { // org.ton.block/MessageRelaxed.Companion|null[0]
        final fun <#A2: kotlin/Any> tlbCodec(org.ton.tlb/TlbCodec<#A2>): org.ton.tlb/TlbConstructor<org.ton.block/MessageRelaxed<#A2>> // org.ton.block/MessageRelaxed.Companion.tlbCodec|tlbCodec(org.ton.tlb.TlbCodec<0:0>){0§<kotlin.Any>}[0]
    }
}

final class <#A: kotlin/Any?> org.ton.block/Nothing : org.ton.block/Maybe<#A> { // org.ton.block/Nothing|null[0]
    constructor <init>() // org.ton.block/Nothing.<init>|<init>(){}[0]

    final val value // org.ton.block/Nothing.value|{}value[0]
        final fun <get-value>(): #A? // org.ton.block/Nothing.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/Nothing.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/Nothing.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/Nothing.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/Nothing.toString|toString(){}[0]
}

final class org.ton.block.config/StoragePrices { // org.ton.block.config/StoragePrices|null[0]
    constructor <init>(kotlin/Long, kotlin/Long, kotlin/Long, kotlin/Long, kotlin/Long) // org.ton.block.config/StoragePrices.<init>|<init>(kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long){}[0]

    final val bitPrice // org.ton.block.config/StoragePrices.bitPrice|{}bitPrice[0]
        final fun <get-bitPrice>(): kotlin/Long // org.ton.block.config/StoragePrices.bitPrice.<get-bitPrice>|<get-bitPrice>(){}[0]
    final val cellPrice // org.ton.block.config/StoragePrices.cellPrice|{}cellPrice[0]
        final fun <get-cellPrice>(): kotlin/Long // org.ton.block.config/StoragePrices.cellPrice.<get-cellPrice>|<get-cellPrice>(){}[0]
    final val mcBitPrice // org.ton.block.config/StoragePrices.mcBitPrice|{}mcBitPrice[0]
        final fun <get-mcBitPrice>(): kotlin/Long // org.ton.block.config/StoragePrices.mcBitPrice.<get-mcBitPrice>|<get-mcBitPrice>(){}[0]
    final val mcCellPrice // org.ton.block.config/StoragePrices.mcCellPrice|{}mcCellPrice[0]
        final fun <get-mcCellPrice>(): kotlin/Long // org.ton.block.config/StoragePrices.mcCellPrice.<get-mcCellPrice>|<get-mcCellPrice>(){}[0]
    final val validSince // org.ton.block.config/StoragePrices.validSince|{}validSince[0]
        final fun <get-validSince>(): kotlin/Long // org.ton.block.config/StoragePrices.validSince.<get-validSince>|<get-validSince>(){}[0]

    final fun component1(): kotlin/Long // org.ton.block.config/StoragePrices.component1|component1(){}[0]
    final fun component2(): kotlin/Long // org.ton.block.config/StoragePrices.component2|component2(){}[0]
    final fun component3(): kotlin/Long // org.ton.block.config/StoragePrices.component3|component3(){}[0]
    final fun component4(): kotlin/Long // org.ton.block.config/StoragePrices.component4|component4(){}[0]
    final fun component5(): kotlin/Long // org.ton.block.config/StoragePrices.component5|component5(){}[0]
    final fun computeStorageFee(kotlin/Boolean, kotlin/Long, org.ton.block/StorageUsedShort): org.ton.block/Coins // org.ton.block.config/StoragePrices.computeStorageFee|computeStorageFee(kotlin.Boolean;kotlin.Long;org.ton.block.StorageUsedShort){}[0]
    final fun copy(kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ...): org.ton.block.config/StoragePrices // org.ton.block.config/StoragePrices.copy|copy(kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block.config/StoragePrices.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block.config/StoragePrices.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block.config/StoragePrices.toString|toString(){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.block.config/StoragePrices> { // org.ton.block.config/StoragePrices.Companion|null[0]
        final fun createCell(org.ton.block.config/StoragePrices): org.ton.cell/Cell // org.ton.block.config/StoragePrices.Companion.createCell|createCell(org.ton.block.config.StoragePrices){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block.config/StoragePrices // org.ton.block.config/StoragePrices.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block.config/StoragePrices // org.ton.block.config/StoragePrices.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block.config/StoragePrices // org.ton.block.config/StoragePrices.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block.config/StoragePrices) // org.ton.block.config/StoragePrices.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.config.StoragePrices){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block.config/StoragePrices, org.ton.kotlin.cell/CellContext) // org.ton.block.config/StoragePrices.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.config.StoragePrices;org.ton.kotlin.cell.CellContext){}[0]
    }
}

final class org.ton.block/AccountActive : org.ton.block/AccountState { // org.ton.block/AccountActive|null[0]
    constructor <init>(org.ton.block/StateInit) // org.ton.block/AccountActive.<init>|<init>(org.ton.block.StateInit){}[0]

    final val status // org.ton.block/AccountActive.status|{}status[0]
        final fun <get-status>(): org.ton.block/AccountStatus // org.ton.block/AccountActive.status.<get-status>|<get-status>(){}[0]
    final val value // org.ton.block/AccountActive.value|{}value[0]
        final fun <get-value>(): org.ton.block/StateInit // org.ton.block/AccountActive.value.<get-value>|<get-value>(){}[0]

    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/AccountActive.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/AccountActive.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/AccountActive> { // org.ton.block/AccountActive.Companion|null[0]
        final fun createCell(org.ton.block/AccountActive): org.ton.cell/Cell // org.ton.block/AccountActive.Companion.createCell|createCell(org.ton.block.AccountActive){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/AccountActive // org.ton.block/AccountActive.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/AccountActive // org.ton.block/AccountActive.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/AccountActive // org.ton.block/AccountActive.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/AccountActive) // org.ton.block/AccountActive.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.AccountActive){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/AccountActive, org.ton.kotlin.cell/CellContext) // org.ton.block/AccountActive.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.AccountActive;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/AccountActive> // org.ton.block/AccountActive.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/AccountBlock : org.ton.tlb/TlbObject { // org.ton.block/AccountBlock|null[0]
    constructor <init>(org.ton.bitstring/BitString, org.ton.hashmap/HashmapAug<org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction>, org.ton.block/CurrencyCollection>, org.ton.tlb/CellRef<org.ton.block/HashUpdate>) // org.ton.block/AccountBlock.<init>|<init>(org.ton.bitstring.BitString;org.ton.hashmap.HashmapAug<org.ton.tlb.CellRef<org.ton.kotlin.transaction.Transaction>,org.ton.block.CurrencyCollection>;org.ton.tlb.CellRef<org.ton.block.HashUpdate>){}[0]

    final val accountAddr // org.ton.block/AccountBlock.accountAddr|{}accountAddr[0]
        final fun <get-accountAddr>(): org.ton.bitstring/BitString // org.ton.block/AccountBlock.accountAddr.<get-accountAddr>|<get-accountAddr>(){}[0]
    final val stateUpdate // org.ton.block/AccountBlock.stateUpdate|{}stateUpdate[0]
        final fun <get-stateUpdate>(): org.ton.tlb/CellRef<org.ton.block/HashUpdate> // org.ton.block/AccountBlock.stateUpdate.<get-stateUpdate>|<get-stateUpdate>(){}[0]
    final val transactions // org.ton.block/AccountBlock.transactions|{}transactions[0]
        final fun <get-transactions>(): org.ton.hashmap/HashmapAug<org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction>, org.ton.block/CurrencyCollection> // org.ton.block/AccountBlock.transactions.<get-transactions>|<get-transactions>(){}[0]

    final fun component1(): org.ton.bitstring/BitString // org.ton.block/AccountBlock.component1|component1(){}[0]
    final fun component2(): org.ton.hashmap/HashmapAug<org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction>, org.ton.block/CurrencyCollection> // org.ton.block/AccountBlock.component2|component2(){}[0]
    final fun component3(): org.ton.tlb/CellRef<org.ton.block/HashUpdate> // org.ton.block/AccountBlock.component3|component3(){}[0]
    final fun copy(org.ton.bitstring/BitString = ..., org.ton.hashmap/HashmapAug<org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction>, org.ton.block/CurrencyCollection> = ..., org.ton.tlb/CellRef<org.ton.block/HashUpdate> = ...): org.ton.block/AccountBlock // org.ton.block/AccountBlock.copy|copy(org.ton.bitstring.BitString;org.ton.hashmap.HashmapAug<org.ton.tlb.CellRef<org.ton.kotlin.transaction.Transaction>,org.ton.block.CurrencyCollection>;org.ton.tlb.CellRef<org.ton.block.HashUpdate>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/AccountBlock.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/AccountBlock.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/AccountBlock.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/AccountBlock.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbCombinatorProvider<org.ton.block/AccountBlock> { // org.ton.block/AccountBlock.Companion|null[0]
        final fun createCell(org.ton.block/AccountBlock): org.ton.cell/Cell // org.ton.block/AccountBlock.Companion.createCell|createCell(org.ton.block.AccountBlock){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/AccountBlock // org.ton.block/AccountBlock.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/AccountBlock // org.ton.block/AccountBlock.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/AccountBlock // org.ton.block/AccountBlock.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/AccountBlock) // org.ton.block/AccountBlock.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.AccountBlock){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/AccountBlock, org.ton.kotlin.cell/CellContext) // org.ton.block/AccountBlock.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.AccountBlock;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCombinator(): org.ton.tlb/TlbCombinator<org.ton.block/AccountBlock> // org.ton.block/AccountBlock.Companion.tlbCombinator|tlbCombinator(){}[0]
    }
}

final class org.ton.block/AccountFrozen : org.ton.block/AccountState { // org.ton.block/AccountFrozen|null[0]
    constructor <init>(org.ton.bitstring/BitString) // org.ton.block/AccountFrozen.<init>|<init>(org.ton.bitstring.BitString){}[0]

    final val stateHash // org.ton.block/AccountFrozen.stateHash|{}stateHash[0]
        final fun <get-stateHash>(): org.ton.bitstring/BitString // org.ton.block/AccountFrozen.stateHash.<get-stateHash>|<get-stateHash>(){}[0]
    final val status // org.ton.block/AccountFrozen.status|{}status[0]
        final fun <get-status>(): org.ton.block/AccountStatus // org.ton.block/AccountFrozen.status.<get-status>|<get-status>(){}[0]

    final fun component1(): org.ton.bitstring/BitString // org.ton.block/AccountFrozen.component1|component1(){}[0]
    final fun copy(org.ton.bitstring/BitString = ...): org.ton.block/AccountFrozen // org.ton.block/AccountFrozen.copy|copy(org.ton.bitstring.BitString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/AccountFrozen.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/AccountFrozen.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/AccountFrozen.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/AccountFrozen.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/AccountFrozen> { // org.ton.block/AccountFrozen.Companion|null[0]
        final fun createCell(org.ton.block/AccountFrozen): org.ton.cell/Cell // org.ton.block/AccountFrozen.Companion.createCell|createCell(org.ton.block.AccountFrozen){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/AccountFrozen // org.ton.block/AccountFrozen.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/AccountFrozen // org.ton.block/AccountFrozen.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/AccountFrozen // org.ton.block/AccountFrozen.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/AccountFrozen) // org.ton.block/AccountFrozen.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.AccountFrozen){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/AccountFrozen, org.ton.kotlin.cell/CellContext) // org.ton.block/AccountFrozen.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.AccountFrozen;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/AccountFrozen> // org.ton.block/AccountFrozen.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/AccountStorage : org.ton.tlb/TlbObject { // org.ton.block/AccountStorage|null[0]
    constructor <init>(kotlin/ULong, org.ton.block/CurrencyCollection, org.ton.block/AccountState) // org.ton.block/AccountStorage.<init>|<init>(kotlin.ULong;org.ton.block.CurrencyCollection;org.ton.block.AccountState){}[0]

    final val balance // org.ton.block/AccountStorage.balance|{}balance[0]
        final fun <get-balance>(): org.ton.block/CurrencyCollection // org.ton.block/AccountStorage.balance.<get-balance>|<get-balance>(){}[0]
    final val lastTransLt // org.ton.block/AccountStorage.lastTransLt|{}lastTransLt[0]
        final fun <get-lastTransLt>(): kotlin/ULong // org.ton.block/AccountStorage.lastTransLt.<get-lastTransLt>|<get-lastTransLt>(){}[0]
    final val state // org.ton.block/AccountStorage.state|{}state[0]
        final fun <get-state>(): org.ton.block/AccountState // org.ton.block/AccountStorage.state.<get-state>|<get-state>(){}[0]

    final fun component1(): kotlin/ULong // org.ton.block/AccountStorage.component1|component1(){}[0]
    final fun component2(): org.ton.block/CurrencyCollection // org.ton.block/AccountStorage.component2|component2(){}[0]
    final fun component3(): org.ton.block/AccountState // org.ton.block/AccountStorage.component3|component3(){}[0]
    final fun copy(kotlin/ULong = ..., org.ton.block/CurrencyCollection = ..., org.ton.block/AccountState = ...): org.ton.block/AccountStorage // org.ton.block/AccountStorage.copy|copy(kotlin.ULong;org.ton.block.CurrencyCollection;org.ton.block.AccountState){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/AccountStorage.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/AccountStorage.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/AccountStorage.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/AccountStorage.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/AccountStorage> { // org.ton.block/AccountStorage.Companion|null[0]
        final fun createCell(org.ton.block/AccountStorage): org.ton.cell/Cell // org.ton.block/AccountStorage.Companion.createCell|createCell(org.ton.block.AccountStorage){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/AccountStorage // org.ton.block/AccountStorage.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/AccountStorage // org.ton.block/AccountStorage.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/AccountStorage // org.ton.block/AccountStorage.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/AccountStorage) // org.ton.block/AccountStorage.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.AccountStorage){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/AccountStorage, org.ton.kotlin.cell/CellContext) // org.ton.block/AccountStorage.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.AccountStorage;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/AccountStorage> // org.ton.block/AccountStorage.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/ActionChangeLibrary : org.ton.block/OutAction { // org.ton.block/ActionChangeLibrary|null[0]
    constructor <init>(kotlin/Int, org.ton.block/LibRef) // org.ton.block/ActionChangeLibrary.<init>|<init>(kotlin.Int;org.ton.block.LibRef){}[0]

    final val libref // org.ton.block/ActionChangeLibrary.libref|{}libref[0]
        final fun <get-libref>(): org.ton.block/LibRef // org.ton.block/ActionChangeLibrary.libref.<get-libref>|<get-libref>(){}[0]
    final val mode // org.ton.block/ActionChangeLibrary.mode|{}mode[0]
        final fun <get-mode>(): kotlin/Int // org.ton.block/ActionChangeLibrary.mode.<get-mode>|<get-mode>(){}[0]

    final fun component1(): kotlin/Int // org.ton.block/ActionChangeLibrary.component1|component1(){}[0]
    final fun component2(): org.ton.block/LibRef // org.ton.block/ActionChangeLibrary.component2|component2(){}[0]
    final fun copy(kotlin/Int = ..., org.ton.block/LibRef = ...): org.ton.block/ActionChangeLibrary // org.ton.block/ActionChangeLibrary.copy|copy(kotlin.Int;org.ton.block.LibRef){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/ActionChangeLibrary.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/ActionChangeLibrary.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/ActionChangeLibrary.toString|toString(){}[0]
}

final class org.ton.block/ActionReserveCurrency : org.ton.block/OutAction { // org.ton.block/ActionReserveCurrency|null[0]
    constructor <init>(kotlin/Int, org.ton.block/CurrencyCollection) // org.ton.block/ActionReserveCurrency.<init>|<init>(kotlin.Int;org.ton.block.CurrencyCollection){}[0]

    final val currency // org.ton.block/ActionReserveCurrency.currency|{}currency[0]
        final fun <get-currency>(): org.ton.block/CurrencyCollection // org.ton.block/ActionReserveCurrency.currency.<get-currency>|<get-currency>(){}[0]
    final val mode // org.ton.block/ActionReserveCurrency.mode|{}mode[0]
        final fun <get-mode>(): kotlin/Int // org.ton.block/ActionReserveCurrency.mode.<get-mode>|<get-mode>(){}[0]

    final fun component1(): kotlin/Int // org.ton.block/ActionReserveCurrency.component1|component1(){}[0]
    final fun component2(): org.ton.block/CurrencyCollection // org.ton.block/ActionReserveCurrency.component2|component2(){}[0]
    final fun copy(kotlin/Int = ..., org.ton.block/CurrencyCollection = ...): org.ton.block/ActionReserveCurrency // org.ton.block/ActionReserveCurrency.copy|copy(kotlin.Int;org.ton.block.CurrencyCollection){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/ActionReserveCurrency.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/ActionReserveCurrency.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/ActionReserveCurrency.toString|toString(){}[0]
}

final class org.ton.block/ActionSendMsg : org.ton.block/OutAction { // org.ton.block/ActionSendMsg|null[0]
    constructor <init>(kotlin/Int, org.ton.block/MessageRelaxed<org.ton.cell/Cell>) // org.ton.block/ActionSendMsg.<init>|<init>(kotlin.Int;org.ton.block.MessageRelaxed<org.ton.cell.Cell>){}[0]

    final val mode // org.ton.block/ActionSendMsg.mode|{}mode[0]
        final fun <get-mode>(): kotlin/Int // org.ton.block/ActionSendMsg.mode.<get-mode>|<get-mode>(){}[0]
    final val outMsg // org.ton.block/ActionSendMsg.outMsg|{}outMsg[0]
        final fun <get-outMsg>(): org.ton.block/MessageRelaxed<org.ton.cell/Cell> // org.ton.block/ActionSendMsg.outMsg.<get-outMsg>|<get-outMsg>(){}[0]

    final fun component1(): kotlin/Int // org.ton.block/ActionSendMsg.component1|component1(){}[0]
    final fun component2(): org.ton.block/MessageRelaxed<org.ton.cell/Cell> // org.ton.block/ActionSendMsg.component2|component2(){}[0]
    final fun copy(kotlin/Int = ..., org.ton.block/MessageRelaxed<org.ton.cell/Cell> = ...): org.ton.block/ActionSendMsg // org.ton.block/ActionSendMsg.copy|copy(kotlin.Int;org.ton.block.MessageRelaxed<org.ton.cell.Cell>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/ActionSendMsg.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/ActionSendMsg.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/ActionSendMsg.toString|toString(){}[0]
}

final class org.ton.block/ActionSetCode : org.ton.block/OutAction { // org.ton.block/ActionSetCode|null[0]
    constructor <init>(org.ton.cell/Cell) // org.ton.block/ActionSetCode.<init>|<init>(org.ton.cell.Cell){}[0]

    final val newCode // org.ton.block/ActionSetCode.newCode|{}newCode[0]
        final fun <get-newCode>(): org.ton.cell/Cell // org.ton.block/ActionSetCode.newCode.<get-newCode>|<get-newCode>(){}[0]

    final fun component1(): org.ton.cell/Cell // org.ton.block/ActionSetCode.component1|component1(){}[0]
    final fun copy(org.ton.cell/Cell = ...): org.ton.block/ActionSetCode // org.ton.block/ActionSetCode.copy|copy(org.ton.cell.Cell){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/ActionSetCode.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/ActionSetCode.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/ActionSetCode.toString|toString(){}[0]
}

final class org.ton.block/AddrExtern : org.ton.block/MsgAddressExt { // org.ton.block/AddrExtern|null[0]
    constructor <init>(kotlin/ByteArray) // org.ton.block/AddrExtern.<init>|<init>(kotlin.ByteArray){}[0]
    constructor <init>(kotlin/Int, org.ton.bitstring/BitString) // org.ton.block/AddrExtern.<init>|<init>(kotlin.Int;org.ton.bitstring.BitString){}[0]
    constructor <init>(org.ton.bitstring/BitString) // org.ton.block/AddrExtern.<init>|<init>(org.ton.bitstring.BitString){}[0]

    final val cellSize // org.ton.block/AddrExtern.cellSize|{}cellSize[0]
        final fun <get-cellSize>(): org.ton.kotlin.cell/CellSize // org.ton.block/AddrExtern.cellSize.<get-cellSize>|<get-cellSize>(){}[0]
    final val externalAddress // org.ton.block/AddrExtern.externalAddress|{}externalAddress[0]
        final fun <get-externalAddress>(): org.ton.bitstring/BitString // org.ton.block/AddrExtern.externalAddress.<get-externalAddress>|<get-externalAddress>(){}[0]
    final val len // org.ton.block/AddrExtern.len|{}len[0]
        final fun <get-len>(): kotlin/Int // org.ton.block/AddrExtern.len.<get-len>|<get-len>(){}[0]

    final fun component1(): kotlin/Int // org.ton.block/AddrExtern.component1|component1(){}[0]
    final fun component2(): org.ton.bitstring/BitString // org.ton.block/AddrExtern.component2|component2(){}[0]
    final fun copy(kotlin/Int = ..., org.ton.bitstring/BitString = ...): org.ton.block/AddrExtern // org.ton.block/AddrExtern.copy|copy(kotlin.Int;org.ton.bitstring.BitString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/AddrExtern.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/AddrExtern.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/AddrExtern.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/AddrExtern.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/AddrExtern> { // org.ton.block/AddrExtern.Companion|null[0]
        final fun createCell(org.ton.block/AddrExtern): org.ton.cell/Cell // org.ton.block/AddrExtern.Companion.createCell|createCell(org.ton.block.AddrExtern){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/AddrExtern // org.ton.block/AddrExtern.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/AddrExtern // org.ton.block/AddrExtern.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/AddrExtern // org.ton.block/AddrExtern.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/AddrExtern) // org.ton.block/AddrExtern.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.AddrExtern){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/AddrExtern, org.ton.kotlin.cell/CellContext) // org.ton.block/AddrExtern.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.AddrExtern;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/AddrExtern> // org.ton.block/AddrExtern.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/AddrStd : org.ton.block/MsgAddressInt { // org.ton.block/AddrStd|null[0]
    constructor <init>() // org.ton.block/AddrStd.<init>|<init>(){}[0]
    constructor <init>(kotlin/Int, kotlin/ByteArray) // org.ton.block/AddrStd.<init>|<init>(kotlin.Int;kotlin.ByteArray){}[0]
    constructor <init>(kotlin/Int, kotlinx.io.bytestring/ByteString) // org.ton.block/AddrStd.<init>|<init>(kotlin.Int;kotlinx.io.bytestring.ByteString){}[0]
    constructor <init>(kotlin/Int, org.ton.bitstring/BitString) // org.ton.block/AddrStd.<init>|<init>(kotlin.Int;org.ton.bitstring.BitString){}[0]
    constructor <init>(org.ton.block/Anycast?, kotlin/Int, kotlin/ByteArray) // org.ton.block/AddrStd.<init>|<init>(org.ton.block.Anycast?;kotlin.Int;kotlin.ByteArray){}[0]
    constructor <init>(org.ton.block/Anycast?, kotlin/Int, kotlinx.io.bytestring/ByteString) // org.ton.block/AddrStd.<init>|<init>(org.ton.block.Anycast?;kotlin.Int;kotlinx.io.bytestring.ByteString){}[0]
    constructor <init>(org.ton.block/Anycast?, kotlin/Int, org.ton.bitstring/BitString) // org.ton.block/AddrStd.<init>|<init>(org.ton.block.Anycast?;kotlin.Int;org.ton.bitstring.BitString){}[0]
    constructor <init>(org.ton.block/Maybe<org.ton.block/Anycast>, kotlin/Int, org.ton.bitstring/BitString) // org.ton.block/AddrStd.<init>|<init>(org.ton.block.Maybe<org.ton.block.Anycast>;kotlin.Int;org.ton.bitstring.BitString){}[0]

    final val address // org.ton.block/AddrStd.address|{}address[0]
        final fun <get-address>(): org.ton.bitstring/BitString // org.ton.block/AddrStd.address.<get-address>|<get-address>(){}[0]
    final val anycast // org.ton.block/AddrStd.anycast|{}anycast[0]
        final fun <get-anycast>(): org.ton.block/Maybe<org.ton.block/Anycast> // org.ton.block/AddrStd.anycast.<get-anycast>|<get-anycast>(){}[0]
    final val cellSize // org.ton.block/AddrStd.cellSize|{}cellSize[0]
        final fun <get-cellSize>(): org.ton.kotlin.cell/CellSize // org.ton.block/AddrStd.cellSize.<get-cellSize>|<get-cellSize>(){}[0]
    final val workchainId // org.ton.block/AddrStd.workchainId|{}workchainId[0]
        final fun <get-workchainId>(): kotlin/Int // org.ton.block/AddrStd.workchainId.<get-workchainId>|<get-workchainId>(){}[0]

    final fun component1(): org.ton.block/Maybe<org.ton.block/Anycast> // org.ton.block/AddrStd.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.block/AddrStd.component2|component2(){}[0]
    final fun component3(): org.ton.bitstring/BitString // org.ton.block/AddrStd.component3|component3(){}[0]
    final fun copy(org.ton.block/Maybe<org.ton.block/Anycast> = ..., kotlin/Int = ..., org.ton.bitstring/BitString = ...): org.ton.block/AddrStd // org.ton.block/AddrStd.copy|copy(org.ton.block.Maybe<org.ton.block.Anycast>;kotlin.Int;org.ton.bitstring.BitString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/AddrStd.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/AddrStd.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/AddrStd.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toAddrStd(): org.ton.block/AddrStd // org.ton.block/AddrStd.toAddrStd|toAddrStd(){}[0]
    final fun toString(): kotlin/String // org.ton.block/AddrStd.toString|toString(){}[0]
    final fun toString(kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ...): kotlin/String // org.ton.block/AddrStd.toString|toString(kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.block/AddrStd> { // org.ton.block/AddrStd.Companion|null[0]
        final const val BITS_MIN // org.ton.block/AddrStd.Companion.BITS_MIN|{}BITS_MIN[0]
            final fun <get-BITS_MIN>(): kotlin/Int // org.ton.block/AddrStd.Companion.BITS_MIN.<get-BITS_MIN>|<get-BITS_MIN>(){}[0]

        final val CELL_SIZE_MIN // org.ton.block/AddrStd.Companion.CELL_SIZE_MIN|{}CELL_SIZE_MIN[0]
            final fun <get-CELL_SIZE_MIN>(): org.ton.kotlin.cell/CellSize // org.ton.block/AddrStd.Companion.CELL_SIZE_MIN.<get-CELL_SIZE_MIN>|<get-CELL_SIZE_MIN>(){}[0]

        final fun createCell(org.ton.block/AddrStd): org.ton.cell/Cell // org.ton.block/AddrStd.Companion.createCell|createCell(org.ton.block.AddrStd){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/AddrStd // org.ton.block/AddrStd.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/AddrStd // org.ton.block/AddrStd.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/AddrStd // org.ton.block/AddrStd.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun parse(kotlin/String): org.ton.block/AddrStd // org.ton.block/AddrStd.Companion.parse|parse(kotlin.String){}[0]
        final fun parseRaw(kotlin/String): org.ton.block/AddrStd // org.ton.block/AddrStd.Companion.parseRaw|parseRaw(kotlin.String){}[0]
        final fun parseUserFriendly(kotlin/String): org.ton.block/AddrStd // org.ton.block/AddrStd.Companion.parseUserFriendly|parseUserFriendly(kotlin.String){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/AddrStd) // org.ton.block/AddrStd.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.AddrStd){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/AddrStd, org.ton.kotlin.cell/CellContext) // org.ton.block/AddrStd.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.AddrStd;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCodec(): org.ton.tlb/TlbConstructor<org.ton.block/AddrStd> // org.ton.block/AddrStd.Companion.tlbCodec|tlbCodec(){}[0]
        final fun toString(org.ton.block/AddrStd, kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ...): kotlin/String // org.ton.block/AddrStd.Companion.toString|toString(org.ton.block.AddrStd;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean){}[0]
    }
}

final class org.ton.block/AddrVar : org.ton.block/MsgAddressInt { // org.ton.block/AddrVar|null[0]
    constructor <init>(kotlin/Int, kotlin/ByteArray) // org.ton.block/AddrVar.<init>|<init>(kotlin.Int;kotlin.ByteArray){}[0]
    constructor <init>(kotlin/Int, org.ton.bitstring/BitString) // org.ton.block/AddrVar.<init>|<init>(kotlin.Int;org.ton.bitstring.BitString){}[0]
    constructor <init>(org.ton.block/Anycast?, kotlin/Int, kotlin/ByteArray) // org.ton.block/AddrVar.<init>|<init>(org.ton.block.Anycast?;kotlin.Int;kotlin.ByteArray){}[0]
    constructor <init>(org.ton.block/Anycast?, kotlin/Int, org.ton.bitstring/BitString) // org.ton.block/AddrVar.<init>|<init>(org.ton.block.Anycast?;kotlin.Int;org.ton.bitstring.BitString){}[0]
    constructor <init>(org.ton.block/Maybe<org.ton.block/Anycast>, kotlin/Int, kotlin/Int, org.ton.bitstring/BitString) // org.ton.block/AddrVar.<init>|<init>(org.ton.block.Maybe<org.ton.block.Anycast>;kotlin.Int;kotlin.Int;org.ton.bitstring.BitString){}[0]

    final val addrLen // org.ton.block/AddrVar.addrLen|{}addrLen[0]
        final fun <get-addrLen>(): kotlin/Int // org.ton.block/AddrVar.addrLen.<get-addrLen>|<get-addrLen>(){}[0]
    final val address // org.ton.block/AddrVar.address|{}address[0]
        final fun <get-address>(): org.ton.bitstring/BitString // org.ton.block/AddrVar.address.<get-address>|<get-address>(){}[0]
    final val anycast // org.ton.block/AddrVar.anycast|{}anycast[0]
        final fun <get-anycast>(): org.ton.block/Maybe<org.ton.block/Anycast> // org.ton.block/AddrVar.anycast.<get-anycast>|<get-anycast>(){}[0]
    final val cellSize // org.ton.block/AddrVar.cellSize|{}cellSize[0]
        final fun <get-cellSize>(): org.ton.kotlin.cell/CellSize // org.ton.block/AddrVar.cellSize.<get-cellSize>|<get-cellSize>(){}[0]
    final val workchainId // org.ton.block/AddrVar.workchainId|{}workchainId[0]
        final fun <get-workchainId>(): kotlin/Int // org.ton.block/AddrVar.workchainId.<get-workchainId>|<get-workchainId>(){}[0]

    final fun component1(): org.ton.block/Maybe<org.ton.block/Anycast> // org.ton.block/AddrVar.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.block/AddrVar.component2|component2(){}[0]
    final fun component3(): kotlin/Int // org.ton.block/AddrVar.component3|component3(){}[0]
    final fun component4(): org.ton.bitstring/BitString // org.ton.block/AddrVar.component4|component4(){}[0]
    final fun copy(org.ton.block/Maybe<org.ton.block/Anycast> = ..., kotlin/Int = ..., kotlin/Int = ..., org.ton.bitstring/BitString = ...): org.ton.block/AddrVar // org.ton.block/AddrVar.copy|copy(org.ton.block.Maybe<org.ton.block.Anycast>;kotlin.Int;kotlin.Int;org.ton.bitstring.BitString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/AddrVar.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/AddrVar.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/AddrVar.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toAddrStd(): org.ton.block/AddrStd // org.ton.block/AddrVar.toAddrStd|toAddrStd(){}[0]
    final fun toString(): kotlin/String // org.ton.block/AddrVar.toString|toString(){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.block/AddrVar> { // org.ton.block/AddrVar.Companion|null[0]
        final fun createCell(org.ton.block/AddrVar): org.ton.cell/Cell // org.ton.block/AddrVar.Companion.createCell|createCell(org.ton.block.AddrVar){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/AddrVar // org.ton.block/AddrVar.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/AddrVar // org.ton.block/AddrVar.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/AddrVar // org.ton.block/AddrVar.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/AddrVar) // org.ton.block/AddrVar.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.AddrVar){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/AddrVar, org.ton.kotlin.cell/CellContext) // org.ton.block/AddrVar.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.AddrVar;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCodec(): org.ton.tlb/TlbConstructor<org.ton.block/AddrVar> // org.ton.block/AddrVar.Companion.tlbCodec|tlbCodec(){}[0]
    }
}

final class org.ton.block/Anycast : org.ton.kotlin.cell/CellSizeable, org.ton.tlb/TlbObject { // org.ton.block/Anycast|null[0]
    constructor <init>(kotlin/Int, org.ton.bitstring/BitString) // org.ton.block/Anycast.<init>|<init>(kotlin.Int;org.ton.bitstring.BitString){}[0]
    constructor <init>(org.ton.bitstring/BitString) // org.ton.block/Anycast.<init>|<init>(org.ton.bitstring.BitString){}[0]

    final val cellSize // org.ton.block/Anycast.cellSize|{}cellSize[0]
        final fun <get-cellSize>(): org.ton.kotlin.cell/CellSize // org.ton.block/Anycast.cellSize.<get-cellSize>|<get-cellSize>(){}[0]
    final val depth // org.ton.block/Anycast.depth|{}depth[0]
        final fun <get-depth>(): kotlin/Int // org.ton.block/Anycast.depth.<get-depth>|<get-depth>(){}[0]
    final val rewritePfx // org.ton.block/Anycast.rewritePfx|{}rewritePfx[0]
        final fun <get-rewritePfx>(): org.ton.bitstring/BitString // org.ton.block/Anycast.rewritePfx.<get-rewritePfx>|<get-rewritePfx>(){}[0]

    final fun component1(): kotlin/Int // org.ton.block/Anycast.component1|component1(){}[0]
    final fun component2(): org.ton.bitstring/BitString // org.ton.block/Anycast.component2|component2(){}[0]
    final fun copy(kotlin/Int = ..., org.ton.bitstring/BitString = ...): org.ton.block/Anycast // org.ton.block/Anycast.copy|copy(kotlin.Int;org.ton.bitstring.BitString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/Anycast.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/Anycast.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/Anycast.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/Anycast.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/Anycast> { // org.ton.block/Anycast.Companion|null[0]
        final fun createCell(org.ton.block/Anycast): org.ton.cell/Cell // org.ton.block/Anycast.Companion.createCell|createCell(org.ton.block.Anycast){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/Anycast // org.ton.block/Anycast.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/Anycast // org.ton.block/Anycast.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/Anycast // org.ton.block/Anycast.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/Anycast) // org.ton.block/Anycast.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.Anycast){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/Anycast, org.ton.kotlin.cell/CellContext) // org.ton.block/Anycast.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.Anycast;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/Anycast> // org.ton.block/Anycast.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/BlkMasterInfo : org.ton.tlb/TlbObject { // org.ton.block/BlkMasterInfo|null[0]
    constructor <init>(org.ton.block/ExtBlkRef) // org.ton.block/BlkMasterInfo.<init>|<init>(org.ton.block.ExtBlkRef){}[0]

    final val master // org.ton.block/BlkMasterInfo.master|{}master[0]
        final fun <get-master>(): org.ton.block/ExtBlkRef // org.ton.block/BlkMasterInfo.master.<get-master>|<get-master>(){}[0]

    final fun component1(): org.ton.block/ExtBlkRef // org.ton.block/BlkMasterInfo.component1|component1(){}[0]
    final fun copy(org.ton.block/ExtBlkRef = ...): org.ton.block/BlkMasterInfo // org.ton.block/BlkMasterInfo.copy|copy(org.ton.block.ExtBlkRef){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/BlkMasterInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/BlkMasterInfo.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/BlkMasterInfo.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/BlkMasterInfo.toString|toString(){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.block/BlkMasterInfo> { // org.ton.block/BlkMasterInfo.Companion|null[0]
        final fun createCell(org.ton.block/BlkMasterInfo): org.ton.cell/Cell // org.ton.block/BlkMasterInfo.Companion.createCell|createCell(org.ton.block.BlkMasterInfo){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/BlkMasterInfo // org.ton.block/BlkMasterInfo.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/BlkMasterInfo // org.ton.block/BlkMasterInfo.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/BlkMasterInfo // org.ton.block/BlkMasterInfo.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/BlkMasterInfo) // org.ton.block/BlkMasterInfo.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.BlkMasterInfo){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/BlkMasterInfo, org.ton.kotlin.cell/CellContext) // org.ton.block/BlkMasterInfo.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.BlkMasterInfo;org.ton.kotlin.cell.CellContext){}[0]
    }
}

final class org.ton.block/Block : org.ton.tlb/TlbObject { // org.ton.block/Block|null[0]
    constructor <init>(kotlin/Int, org.ton.tlb/CellRef<org.ton.block/BlockInfo>, org.ton.tlb/CellRef<org.ton.block/ValueFlow>, org.ton.tlb/CellRef<org.ton.block/MerkleUpdate<org.ton.block/ShardState>>, org.ton.tlb/CellRef<org.ton.block/BlockExtra>) // org.ton.block/Block.<init>|<init>(kotlin.Int;org.ton.tlb.CellRef<org.ton.block.BlockInfo>;org.ton.tlb.CellRef<org.ton.block.ValueFlow>;org.ton.tlb.CellRef<org.ton.block.MerkleUpdate<org.ton.block.ShardState>>;org.ton.tlb.CellRef<org.ton.block.BlockExtra>){}[0]

    final val extra // org.ton.block/Block.extra|{}extra[0]
        final fun <get-extra>(): org.ton.tlb/CellRef<org.ton.block/BlockExtra> // org.ton.block/Block.extra.<get-extra>|<get-extra>(){}[0]
    final val globalId // org.ton.block/Block.globalId|{}globalId[0]
        final fun <get-globalId>(): kotlin/Int // org.ton.block/Block.globalId.<get-globalId>|<get-globalId>(){}[0]
    final val info // org.ton.block/Block.info|{}info[0]
        final fun <get-info>(): org.ton.tlb/CellRef<org.ton.block/BlockInfo> // org.ton.block/Block.info.<get-info>|<get-info>(){}[0]
    final val stateUpdate // org.ton.block/Block.stateUpdate|{}stateUpdate[0]
        final fun <get-stateUpdate>(): org.ton.tlb/CellRef<org.ton.block/MerkleUpdate<org.ton.block/ShardState>> // org.ton.block/Block.stateUpdate.<get-stateUpdate>|<get-stateUpdate>(){}[0]
    final val valueFlow // org.ton.block/Block.valueFlow|{}valueFlow[0]
        final fun <get-valueFlow>(): org.ton.tlb/CellRef<org.ton.block/ValueFlow> // org.ton.block/Block.valueFlow.<get-valueFlow>|<get-valueFlow>(){}[0]

    final fun component1(): kotlin/Int // org.ton.block/Block.component1|component1(){}[0]
    final fun component2(): org.ton.tlb/CellRef<org.ton.block/BlockInfo> // org.ton.block/Block.component2|component2(){}[0]
    final fun component3(): org.ton.tlb/CellRef<org.ton.block/ValueFlow> // org.ton.block/Block.component3|component3(){}[0]
    final fun component4(): org.ton.tlb/CellRef<org.ton.block/MerkleUpdate<org.ton.block/ShardState>> // org.ton.block/Block.component4|component4(){}[0]
    final fun component5(): org.ton.tlb/CellRef<org.ton.block/BlockExtra> // org.ton.block/Block.component5|component5(){}[0]
    final fun copy(kotlin/Int = ..., org.ton.tlb/CellRef<org.ton.block/BlockInfo> = ..., org.ton.tlb/CellRef<org.ton.block/ValueFlow> = ..., org.ton.tlb/CellRef<org.ton.block/MerkleUpdate<org.ton.block/ShardState>> = ..., org.ton.tlb/CellRef<org.ton.block/BlockExtra> = ...): org.ton.block/Block // org.ton.block/Block.copy|copy(kotlin.Int;org.ton.tlb.CellRef<org.ton.block.BlockInfo>;org.ton.tlb.CellRef<org.ton.block.ValueFlow>;org.ton.tlb.CellRef<org.ton.block.MerkleUpdate<org.ton.block.ShardState>>;org.ton.tlb.CellRef<org.ton.block.BlockExtra>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/Block.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/Block.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/Block.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/Block.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbCombinatorProvider<org.ton.block/Block> { // org.ton.block/Block.Companion|null[0]
        final fun createCell(org.ton.block/Block): org.ton.cell/Cell // org.ton.block/Block.Companion.createCell|createCell(org.ton.block.Block){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/Block // org.ton.block/Block.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/Block // org.ton.block/Block.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/Block // org.ton.block/Block.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/Block) // org.ton.block/Block.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.Block){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/Block, org.ton.kotlin.cell/CellContext) // org.ton.block/Block.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.Block;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCombinator(): org.ton.tlb/TlbCombinator<org.ton.block/Block> // org.ton.block/Block.Companion.tlbCombinator|tlbCombinator(){}[0]
    }
}

final class org.ton.block/BlockCreateStatsExt : org.ton.block/BlockCreateStats { // org.ton.block/BlockCreateStatsExt|null[0]
    constructor <init>(org.ton.hashmap/HashmapAugE<org.ton.block/CreatorStats, kotlin/UInt>) // org.ton.block/BlockCreateStatsExt.<init>|<init>(org.ton.hashmap.HashmapAugE<org.ton.block.CreatorStats,kotlin.UInt>){}[0]

    final val counters // org.ton.block/BlockCreateStatsExt.counters|{}counters[0]
        final fun <get-counters>(): org.ton.hashmap/HashmapAugE<org.ton.block/CreatorStats, kotlin/UInt> // org.ton.block/BlockCreateStatsExt.counters.<get-counters>|<get-counters>(){}[0]

    final fun component1(): org.ton.hashmap/HashmapAugE<org.ton.block/CreatorStats, kotlin/UInt> // org.ton.block/BlockCreateStatsExt.component1|component1(){}[0]
    final fun copy(org.ton.hashmap/HashmapAugE<org.ton.block/CreatorStats, kotlin/UInt> = ...): org.ton.block/BlockCreateStatsExt // org.ton.block/BlockCreateStatsExt.copy|copy(org.ton.hashmap.HashmapAugE<org.ton.block.CreatorStats,kotlin.UInt>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/BlockCreateStatsExt.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/BlockCreateStatsExt.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/BlockCreateStatsExt.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/BlockCreateStatsExt.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/BlockCreateStatsExt> { // org.ton.block/BlockCreateStatsExt.Companion|null[0]
        final fun createCell(org.ton.block/BlockCreateStatsExt): org.ton.cell/Cell // org.ton.block/BlockCreateStatsExt.Companion.createCell|createCell(org.ton.block.BlockCreateStatsExt){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/BlockCreateStatsExt // org.ton.block/BlockCreateStatsExt.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/BlockCreateStatsExt // org.ton.block/BlockCreateStatsExt.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/BlockCreateStatsExt // org.ton.block/BlockCreateStatsExt.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/BlockCreateStatsExt) // org.ton.block/BlockCreateStatsExt.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.BlockCreateStatsExt){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/BlockCreateStatsExt, org.ton.kotlin.cell/CellContext) // org.ton.block/BlockCreateStatsExt.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.BlockCreateStatsExt;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/BlockCreateStatsExt> // org.ton.block/BlockCreateStatsExt.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/BlockCreateStatsRegular : org.ton.block/BlockCreateStats { // org.ton.block/BlockCreateStatsRegular|null[0]
    constructor <init>(org.ton.hashmap/HashMapE<org.ton.block/CreatorStats>) // org.ton.block/BlockCreateStatsRegular.<init>|<init>(org.ton.hashmap.HashMapE<org.ton.block.CreatorStats>){}[0]

    final val counters // org.ton.block/BlockCreateStatsRegular.counters|{}counters[0]
        final fun <get-counters>(): org.ton.hashmap/HashMapE<org.ton.block/CreatorStats> // org.ton.block/BlockCreateStatsRegular.counters.<get-counters>|<get-counters>(){}[0]

    final fun component1(): org.ton.hashmap/HashMapE<org.ton.block/CreatorStats> // org.ton.block/BlockCreateStatsRegular.component1|component1(){}[0]
    final fun copy(org.ton.hashmap/HashMapE<org.ton.block/CreatorStats> = ...): org.ton.block/BlockCreateStatsRegular // org.ton.block/BlockCreateStatsRegular.copy|copy(org.ton.hashmap.HashMapE<org.ton.block.CreatorStats>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/BlockCreateStatsRegular.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/BlockCreateStatsRegular.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/BlockCreateStatsRegular.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/BlockCreateStatsRegular.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/BlockCreateStatsRegular> { // org.ton.block/BlockCreateStatsRegular.Companion|null[0]
        final fun createCell(org.ton.block/BlockCreateStatsRegular): org.ton.cell/Cell // org.ton.block/BlockCreateStatsRegular.Companion.createCell|createCell(org.ton.block.BlockCreateStatsRegular){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/BlockCreateStatsRegular // org.ton.block/BlockCreateStatsRegular.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/BlockCreateStatsRegular // org.ton.block/BlockCreateStatsRegular.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/BlockCreateStatsRegular // org.ton.block/BlockCreateStatsRegular.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/BlockCreateStatsRegular) // org.ton.block/BlockCreateStatsRegular.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.BlockCreateStatsRegular){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/BlockCreateStatsRegular, org.ton.kotlin.cell/CellContext) // org.ton.block/BlockCreateStatsRegular.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.BlockCreateStatsRegular;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/BlockCreateStatsRegular> // org.ton.block/BlockCreateStatsRegular.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/BlockExtra : org.ton.tlb/TlbObject { // org.ton.block/BlockExtra|null[0]
    constructor <init>(org.ton.tlb/CellRef<org.ton.hashmap/HashmapAugE<org.ton.block/InMsg, org.ton.block/ImportFees>>, org.ton.tlb/CellRef<org.ton.hashmap/HashmapAugE<org.ton.block/OutMsg, org.ton.block/CurrencyCollection>>, org.ton.tlb/CellRef<org.ton.hashmap/HashmapAugE<org.ton.block/AccountBlock, org.ton.block/CurrencyCollection>>, org.ton.bitstring/BitString, org.ton.bitstring/BitString, org.ton.block/Maybe<org.ton.tlb/CellRef<org.ton.block/McBlockExtra>>) // org.ton.block/BlockExtra.<init>|<init>(org.ton.tlb.CellRef<org.ton.hashmap.HashmapAugE<org.ton.block.InMsg,org.ton.block.ImportFees>>;org.ton.tlb.CellRef<org.ton.hashmap.HashmapAugE<org.ton.block.OutMsg,org.ton.block.CurrencyCollection>>;org.ton.tlb.CellRef<org.ton.hashmap.HashmapAugE<org.ton.block.AccountBlock,org.ton.block.CurrencyCollection>>;org.ton.bitstring.BitString;org.ton.bitstring.BitString;org.ton.block.Maybe<org.ton.tlb.CellRef<org.ton.block.McBlockExtra>>){}[0]

    final val accountBlocks // org.ton.block/BlockExtra.accountBlocks|{}accountBlocks[0]
        final fun <get-accountBlocks>(): org.ton.tlb/CellRef<org.ton.hashmap/HashmapAugE<org.ton.block/AccountBlock, org.ton.block/CurrencyCollection>> // org.ton.block/BlockExtra.accountBlocks.<get-accountBlocks>|<get-accountBlocks>(){}[0]
    final val createdBy // org.ton.block/BlockExtra.createdBy|{}createdBy[0]
        final fun <get-createdBy>(): org.ton.bitstring/BitString // org.ton.block/BlockExtra.createdBy.<get-createdBy>|<get-createdBy>(){}[0]
    final val custom // org.ton.block/BlockExtra.custom|{}custom[0]
        final fun <get-custom>(): org.ton.block/Maybe<org.ton.tlb/CellRef<org.ton.block/McBlockExtra>> // org.ton.block/BlockExtra.custom.<get-custom>|<get-custom>(){}[0]
    final val inMsgDescr // org.ton.block/BlockExtra.inMsgDescr|{}inMsgDescr[0]
        final fun <get-inMsgDescr>(): org.ton.tlb/CellRef<org.ton.hashmap/HashmapAugE<org.ton.block/InMsg, org.ton.block/ImportFees>> // org.ton.block/BlockExtra.inMsgDescr.<get-inMsgDescr>|<get-inMsgDescr>(){}[0]
    final val outMsgDescr // org.ton.block/BlockExtra.outMsgDescr|{}outMsgDescr[0]
        final fun <get-outMsgDescr>(): org.ton.tlb/CellRef<org.ton.hashmap/HashmapAugE<org.ton.block/OutMsg, org.ton.block/CurrencyCollection>> // org.ton.block/BlockExtra.outMsgDescr.<get-outMsgDescr>|<get-outMsgDescr>(){}[0]
    final val randSeed // org.ton.block/BlockExtra.randSeed|{}randSeed[0]
        final fun <get-randSeed>(): org.ton.bitstring/BitString // org.ton.block/BlockExtra.randSeed.<get-randSeed>|<get-randSeed>(){}[0]

    final fun component1(): org.ton.tlb/CellRef<org.ton.hashmap/HashmapAugE<org.ton.block/InMsg, org.ton.block/ImportFees>> // org.ton.block/BlockExtra.component1|component1(){}[0]
    final fun component2(): org.ton.tlb/CellRef<org.ton.hashmap/HashmapAugE<org.ton.block/OutMsg, org.ton.block/CurrencyCollection>> // org.ton.block/BlockExtra.component2|component2(){}[0]
    final fun component3(): org.ton.tlb/CellRef<org.ton.hashmap/HashmapAugE<org.ton.block/AccountBlock, org.ton.block/CurrencyCollection>> // org.ton.block/BlockExtra.component3|component3(){}[0]
    final fun component4(): org.ton.bitstring/BitString // org.ton.block/BlockExtra.component4|component4(){}[0]
    final fun component5(): org.ton.bitstring/BitString // org.ton.block/BlockExtra.component5|component5(){}[0]
    final fun component6(): org.ton.block/Maybe<org.ton.tlb/CellRef<org.ton.block/McBlockExtra>> // org.ton.block/BlockExtra.component6|component6(){}[0]
    final fun copy(org.ton.tlb/CellRef<org.ton.hashmap/HashmapAugE<org.ton.block/InMsg, org.ton.block/ImportFees>> = ..., org.ton.tlb/CellRef<org.ton.hashmap/HashmapAugE<org.ton.block/OutMsg, org.ton.block/CurrencyCollection>> = ..., org.ton.tlb/CellRef<org.ton.hashmap/HashmapAugE<org.ton.block/AccountBlock, org.ton.block/CurrencyCollection>> = ..., org.ton.bitstring/BitString = ..., org.ton.bitstring/BitString = ..., org.ton.block/Maybe<org.ton.tlb/CellRef<org.ton.block/McBlockExtra>> = ...): org.ton.block/BlockExtra // org.ton.block/BlockExtra.copy|copy(org.ton.tlb.CellRef<org.ton.hashmap.HashmapAugE<org.ton.block.InMsg,org.ton.block.ImportFees>>;org.ton.tlb.CellRef<org.ton.hashmap.HashmapAugE<org.ton.block.OutMsg,org.ton.block.CurrencyCollection>>;org.ton.tlb.CellRef<org.ton.hashmap.HashmapAugE<org.ton.block.AccountBlock,org.ton.block.CurrencyCollection>>;org.ton.bitstring.BitString;org.ton.bitstring.BitString;org.ton.block.Maybe<org.ton.tlb.CellRef<org.ton.block.McBlockExtra>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/BlockExtra.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/BlockExtra.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/BlockExtra.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/BlockExtra.toString|toString(){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.block/BlockExtra> { // org.ton.block/BlockExtra.Companion|null[0]
        final fun createCell(org.ton.block/BlockExtra): org.ton.cell/Cell // org.ton.block/BlockExtra.Companion.createCell|createCell(org.ton.block.BlockExtra){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/BlockExtra // org.ton.block/BlockExtra.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/BlockExtra // org.ton.block/BlockExtra.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/BlockExtra // org.ton.block/BlockExtra.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/BlockExtra) // org.ton.block/BlockExtra.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.BlockExtra){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/BlockExtra, org.ton.kotlin.cell/CellContext) // org.ton.block/BlockExtra.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.BlockExtra;org.ton.kotlin.cell.CellContext){}[0]
    }
}

final class org.ton.block/BlockInfo : org.ton.tlb/TlbObject { // org.ton.block/BlockInfo|null[0]
    constructor <init>(kotlin/UInt, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean, kotlin/Int, kotlin/Int, kotlin/Int, org.ton.block/ShardIdent, kotlin/UInt, kotlin/ULong, kotlin/ULong, kotlin/UInt, kotlin/UInt, kotlin/UInt, kotlin/UInt, org.ton.block/GlobalVersion?, org.ton.tlb/CellRef<org.ton.block/BlkMasterInfo>?, org.ton.tlb/CellRef<org.ton.block/BlkPrevInfo>, org.ton.tlb/CellRef<org.ton.block/BlkPrevInfo>?) // org.ton.block/BlockInfo.<init>|<init>(kotlin.UInt;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Int;kotlin.Int;kotlin.Int;org.ton.block.ShardIdent;kotlin.UInt;kotlin.ULong;kotlin.ULong;kotlin.UInt;kotlin.UInt;kotlin.UInt;kotlin.UInt;org.ton.block.GlobalVersion?;org.ton.tlb.CellRef<org.ton.block.BlkMasterInfo>?;org.ton.tlb.CellRef<org.ton.block.BlkPrevInfo>;org.ton.tlb.CellRef<org.ton.block.BlkPrevInfo>?){}[0]

    final val afterMerge // org.ton.block/BlockInfo.afterMerge|{}afterMerge[0]
        final fun <get-afterMerge>(): kotlin/Boolean // org.ton.block/BlockInfo.afterMerge.<get-afterMerge>|<get-afterMerge>(){}[0]
    final val afterSplit // org.ton.block/BlockInfo.afterSplit|{}afterSplit[0]
        final fun <get-afterSplit>(): kotlin/Boolean // org.ton.block/BlockInfo.afterSplit.<get-afterSplit>|<get-afterSplit>(){}[0]
    final val beforeSplit // org.ton.block/BlockInfo.beforeSplit|{}beforeSplit[0]
        final fun <get-beforeSplit>(): kotlin/Boolean // org.ton.block/BlockInfo.beforeSplit.<get-beforeSplit>|<get-beforeSplit>(){}[0]
    final val endLt // org.ton.block/BlockInfo.endLt|{}endLt[0]
        final fun <get-endLt>(): kotlin/ULong // org.ton.block/BlockInfo.endLt.<get-endLt>|<get-endLt>(){}[0]
    final val flags // org.ton.block/BlockInfo.flags|{}flags[0]
        final fun <get-flags>(): kotlin/Int // org.ton.block/BlockInfo.flags.<get-flags>|<get-flags>(){}[0]
    final val genCatchainSeqno // org.ton.block/BlockInfo.genCatchainSeqno|{}genCatchainSeqno[0]
        final fun <get-genCatchainSeqno>(): kotlin/UInt // org.ton.block/BlockInfo.genCatchainSeqno.<get-genCatchainSeqno>|<get-genCatchainSeqno>(){}[0]
    final val genSoftware // org.ton.block/BlockInfo.genSoftware|{}genSoftware[0]
        final fun <get-genSoftware>(): org.ton.block/GlobalVersion? // org.ton.block/BlockInfo.genSoftware.<get-genSoftware>|<get-genSoftware>(){}[0]
    final val genUtime // org.ton.block/BlockInfo.genUtime|{}genUtime[0]
        final fun <get-genUtime>(): kotlin/UInt // org.ton.block/BlockInfo.genUtime.<get-genUtime>|<get-genUtime>(){}[0]
    final val genValidatorListHashShort // org.ton.block/BlockInfo.genValidatorListHashShort|{}genValidatorListHashShort[0]
        final fun <get-genValidatorListHashShort>(): kotlin/UInt // org.ton.block/BlockInfo.genValidatorListHashShort.<get-genValidatorListHashShort>|<get-genValidatorListHashShort>(){}[0]
    final val keyBlock // org.ton.block/BlockInfo.keyBlock|{}keyBlock[0]
        final fun <get-keyBlock>(): kotlin/Boolean // org.ton.block/BlockInfo.keyBlock.<get-keyBlock>|<get-keyBlock>(){}[0]
    final val masterRef // org.ton.block/BlockInfo.masterRef|{}masterRef[0]
        final fun <get-masterRef>(): org.ton.tlb/CellRef<org.ton.block/BlkMasterInfo>? // org.ton.block/BlockInfo.masterRef.<get-masterRef>|<get-masterRef>(){}[0]
    final val minRefMcSeqno // org.ton.block/BlockInfo.minRefMcSeqno|{}minRefMcSeqno[0]
        final fun <get-minRefMcSeqno>(): kotlin/UInt // org.ton.block/BlockInfo.minRefMcSeqno.<get-minRefMcSeqno>|<get-minRefMcSeqno>(){}[0]
    final val notMaster // org.ton.block/BlockInfo.notMaster|{}notMaster[0]
        final fun <get-notMaster>(): kotlin/Boolean // org.ton.block/BlockInfo.notMaster.<get-notMaster>|<get-notMaster>(){}[0]
    final val prevKeyBlockSeqno // org.ton.block/BlockInfo.prevKeyBlockSeqno|{}prevKeyBlockSeqno[0]
        final fun <get-prevKeyBlockSeqno>(): kotlin/UInt // org.ton.block/BlockInfo.prevKeyBlockSeqno.<get-prevKeyBlockSeqno>|<get-prevKeyBlockSeqno>(){}[0]
    final val prevRef // org.ton.block/BlockInfo.prevRef|{}prevRef[0]
        final fun <get-prevRef>(): org.ton.tlb/CellRef<org.ton.block/BlkPrevInfo> // org.ton.block/BlockInfo.prevRef.<get-prevRef>|<get-prevRef>(){}[0]
    final val prevVertRef // org.ton.block/BlockInfo.prevVertRef|{}prevVertRef[0]
        final fun <get-prevVertRef>(): org.ton.tlb/CellRef<org.ton.block/BlkPrevInfo>? // org.ton.block/BlockInfo.prevVertRef.<get-prevVertRef>|<get-prevVertRef>(){}[0]
    final val seqNo // org.ton.block/BlockInfo.seqNo|{}seqNo[0]
        final fun <get-seqNo>(): kotlin/Int // org.ton.block/BlockInfo.seqNo.<get-seqNo>|<get-seqNo>(){}[0]
    final val shard // org.ton.block/BlockInfo.shard|{}shard[0]
        final fun <get-shard>(): org.ton.block/ShardIdent // org.ton.block/BlockInfo.shard.<get-shard>|<get-shard>(){}[0]
    final val startLt // org.ton.block/BlockInfo.startLt|{}startLt[0]
        final fun <get-startLt>(): kotlin/ULong // org.ton.block/BlockInfo.startLt.<get-startLt>|<get-startLt>(){}[0]
    final val version // org.ton.block/BlockInfo.version|{}version[0]
        final fun <get-version>(): kotlin/UInt // org.ton.block/BlockInfo.version.<get-version>|<get-version>(){}[0]
    final val vertSeqNo // org.ton.block/BlockInfo.vertSeqNo|{}vertSeqNo[0]
        final fun <get-vertSeqNo>(): kotlin/Int // org.ton.block/BlockInfo.vertSeqNo.<get-vertSeqNo>|<get-vertSeqNo>(){}[0]
    final val vertSeqnoIncr // org.ton.block/BlockInfo.vertSeqnoIncr|{}vertSeqnoIncr[0]
        final fun <get-vertSeqnoIncr>(): kotlin/Boolean // org.ton.block/BlockInfo.vertSeqnoIncr.<get-vertSeqnoIncr>|<get-vertSeqnoIncr>(){}[0]
    final val wantMerge // org.ton.block/BlockInfo.wantMerge|{}wantMerge[0]
        final fun <get-wantMerge>(): kotlin/Boolean // org.ton.block/BlockInfo.wantMerge.<get-wantMerge>|<get-wantMerge>(){}[0]
    final val wantSplit // org.ton.block/BlockInfo.wantSplit|{}wantSplit[0]
        final fun <get-wantSplit>(): kotlin/Boolean // org.ton.block/BlockInfo.wantSplit.<get-wantSplit>|<get-wantSplit>(){}[0]

    final fun component1(): kotlin/UInt // org.ton.block/BlockInfo.component1|component1(){}[0]
    final fun component10(): kotlin/Int // org.ton.block/BlockInfo.component10|component10(){}[0]
    final fun component11(): kotlin/Int // org.ton.block/BlockInfo.component11|component11(){}[0]
    final fun component12(): kotlin/Int // org.ton.block/BlockInfo.component12|component12(){}[0]
    final fun component13(): org.ton.block/ShardIdent // org.ton.block/BlockInfo.component13|component13(){}[0]
    final fun component14(): kotlin/UInt // org.ton.block/BlockInfo.component14|component14(){}[0]
    final fun component15(): kotlin/ULong // org.ton.block/BlockInfo.component15|component15(){}[0]
    final fun component16(): kotlin/ULong // org.ton.block/BlockInfo.component16|component16(){}[0]
    final fun component17(): kotlin/UInt // org.ton.block/BlockInfo.component17|component17(){}[0]
    final fun component18(): kotlin/UInt // org.ton.block/BlockInfo.component18|component18(){}[0]
    final fun component19(): kotlin/UInt // org.ton.block/BlockInfo.component19|component19(){}[0]
    final fun component2(): kotlin/Boolean // org.ton.block/BlockInfo.component2|component2(){}[0]
    final fun component20(): kotlin/UInt // org.ton.block/BlockInfo.component20|component20(){}[0]
    final fun component21(): org.ton.block/GlobalVersion? // org.ton.block/BlockInfo.component21|component21(){}[0]
    final fun component22(): org.ton.tlb/CellRef<org.ton.block/BlkMasterInfo>? // org.ton.block/BlockInfo.component22|component22(){}[0]
    final fun component23(): org.ton.tlb/CellRef<org.ton.block/BlkPrevInfo> // org.ton.block/BlockInfo.component23|component23(){}[0]
    final fun component24(): org.ton.tlb/CellRef<org.ton.block/BlkPrevInfo>? // org.ton.block/BlockInfo.component24|component24(){}[0]
    final fun component3(): kotlin/Boolean // org.ton.block/BlockInfo.component3|component3(){}[0]
    final fun component4(): kotlin/Boolean // org.ton.block/BlockInfo.component4|component4(){}[0]
    final fun component5(): kotlin/Boolean // org.ton.block/BlockInfo.component5|component5(){}[0]
    final fun component6(): kotlin/Boolean // org.ton.block/BlockInfo.component6|component6(){}[0]
    final fun component7(): kotlin/Boolean // org.ton.block/BlockInfo.component7|component7(){}[0]
    final fun component8(): kotlin/Boolean // org.ton.block/BlockInfo.component8|component8(){}[0]
    final fun component9(): kotlin/Boolean // org.ton.block/BlockInfo.component9|component9(){}[0]
    final fun copy(kotlin/UInt = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., org.ton.block/ShardIdent = ..., kotlin/UInt = ..., kotlin/ULong = ..., kotlin/ULong = ..., kotlin/UInt = ..., kotlin/UInt = ..., kotlin/UInt = ..., kotlin/UInt = ..., org.ton.block/GlobalVersion? = ..., org.ton.tlb/CellRef<org.ton.block/BlkMasterInfo>? = ..., org.ton.tlb/CellRef<org.ton.block/BlkPrevInfo> = ..., org.ton.tlb/CellRef<org.ton.block/BlkPrevInfo>? = ...): org.ton.block/BlockInfo // org.ton.block/BlockInfo.copy|copy(kotlin.UInt;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Int;kotlin.Int;kotlin.Int;org.ton.block.ShardIdent;kotlin.UInt;kotlin.ULong;kotlin.ULong;kotlin.UInt;kotlin.UInt;kotlin.UInt;kotlin.UInt;org.ton.block.GlobalVersion?;org.ton.tlb.CellRef<org.ton.block.BlkMasterInfo>?;org.ton.tlb.CellRef<org.ton.block.BlkPrevInfo>;org.ton.tlb.CellRef<org.ton.block.BlkPrevInfo>?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/BlockInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/BlockInfo.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/BlockInfo.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/BlockInfo.toString|toString(){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.block/BlockInfo> { // org.ton.block/BlockInfo.Companion|null[0]
        final fun createCell(org.ton.block/BlockInfo): org.ton.cell/Cell // org.ton.block/BlockInfo.Companion.createCell|createCell(org.ton.block.BlockInfo){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/BlockInfo // org.ton.block/BlockInfo.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/BlockInfo // org.ton.block/BlockInfo.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/BlockInfo // org.ton.block/BlockInfo.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/BlockInfo) // org.ton.block/BlockInfo.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.BlockInfo){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/BlockInfo, org.ton.kotlin.cell/CellContext) // org.ton.block/BlockInfo.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.BlockInfo;org.ton.kotlin.cell.CellContext){}[0]
    }
}

final class org.ton.block/Certificate { // org.ton.block/Certificate|null[0]
    constructor <init>(org.ton.block/SigPubKey, kotlin/UInt, kotlin/UInt) // org.ton.block/Certificate.<init>|<init>(org.ton.block.SigPubKey;kotlin.UInt;kotlin.UInt){}[0]

    final val temp_key // org.ton.block/Certificate.temp_key|{}temp_key[0]
        final fun <get-temp_key>(): org.ton.block/SigPubKey // org.ton.block/Certificate.temp_key.<get-temp_key>|<get-temp_key>(){}[0]
    final val valid_since // org.ton.block/Certificate.valid_since|{}valid_since[0]
        final fun <get-valid_since>(): kotlin/UInt // org.ton.block/Certificate.valid_since.<get-valid_since>|<get-valid_since>(){}[0]
    final val valid_until // org.ton.block/Certificate.valid_until|{}valid_until[0]
        final fun <get-valid_until>(): kotlin/UInt // org.ton.block/Certificate.valid_until.<get-valid_until>|<get-valid_until>(){}[0]

    final fun component1(): org.ton.block/SigPubKey // org.ton.block/Certificate.component1|component1(){}[0]
    final fun component2(): kotlin/UInt // org.ton.block/Certificate.component2|component2(){}[0]
    final fun component3(): kotlin/UInt // org.ton.block/Certificate.component3|component3(){}[0]
    final fun copy(org.ton.block/SigPubKey = ..., kotlin/UInt = ..., kotlin/UInt = ...): org.ton.block/Certificate // org.ton.block/Certificate.copy|copy(org.ton.block.SigPubKey;kotlin.UInt;kotlin.UInt){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/Certificate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/Certificate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/Certificate.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/Certificate> { // org.ton.block/Certificate.Companion|null[0]
        final fun createCell(org.ton.block/Certificate): org.ton.cell/Cell // org.ton.block/Certificate.Companion.createCell|createCell(org.ton.block.Certificate){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/Certificate // org.ton.block/Certificate.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/Certificate // org.ton.block/Certificate.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/Certificate // org.ton.block/Certificate.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/Certificate) // org.ton.block/Certificate.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.Certificate){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/Certificate, org.ton.kotlin.cell/CellContext) // org.ton.block/Certificate.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.Certificate;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/Certificate> // org.ton.block/Certificate.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/CertificateEnv { // org.ton.block/CertificateEnv|null[0]
    constructor <init>(org.ton.block/Certificate) // org.ton.block/CertificateEnv.<init>|<init>(org.ton.block.Certificate){}[0]

    final val certificate // org.ton.block/CertificateEnv.certificate|{}certificate[0]
        final fun <get-certificate>(): org.ton.block/Certificate // org.ton.block/CertificateEnv.certificate.<get-certificate>|<get-certificate>(){}[0]

    final fun component1(): org.ton.block/Certificate // org.ton.block/CertificateEnv.component1|component1(){}[0]
    final fun copy(org.ton.block/Certificate = ...): org.ton.block/CertificateEnv // org.ton.block/CertificateEnv.copy|copy(org.ton.block.Certificate){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/CertificateEnv.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/CertificateEnv.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/CertificateEnv.toString|toString(){}[0]
}

final class org.ton.block/ChainedSignature : org.ton.block/CryptoSignature { // org.ton.block/ChainedSignature|null[0]
    constructor <init>(org.ton.block/SignedCertificate, org.ton.block/CryptoSignatureSimple) // org.ton.block/ChainedSignature.<init>|<init>(org.ton.block.SignedCertificate;org.ton.block.CryptoSignatureSimple){}[0]

    final val signed_crt // org.ton.block/ChainedSignature.signed_crt|{}signed_crt[0]
        final fun <get-signed_crt>(): org.ton.block/SignedCertificate // org.ton.block/ChainedSignature.signed_crt.<get-signed_crt>|<get-signed_crt>(){}[0]
    final val temp_key_signature // org.ton.block/ChainedSignature.temp_key_signature|{}temp_key_signature[0]
        final fun <get-temp_key_signature>(): org.ton.block/CryptoSignatureSimple // org.ton.block/ChainedSignature.temp_key_signature.<get-temp_key_signature>|<get-temp_key_signature>(){}[0]

    final fun component1(): org.ton.block/SignedCertificate // org.ton.block/ChainedSignature.component1|component1(){}[0]
    final fun component2(): org.ton.block/CryptoSignatureSimple // org.ton.block/ChainedSignature.component2|component2(){}[0]
    final fun copy(org.ton.block/SignedCertificate = ..., org.ton.block/CryptoSignatureSimple = ...): org.ton.block/ChainedSignature // org.ton.block/ChainedSignature.copy|copy(org.ton.block.SignedCertificate;org.ton.block.CryptoSignatureSimple){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/ChainedSignature.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/ChainedSignature.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/ChainedSignature.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/ChainedSignature> { // org.ton.block/ChainedSignature.Companion|null[0]
        final fun createCell(org.ton.block/ChainedSignature): org.ton.cell/Cell // org.ton.block/ChainedSignature.Companion.createCell|createCell(org.ton.block.ChainedSignature){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/ChainedSignature // org.ton.block/ChainedSignature.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/ChainedSignature // org.ton.block/ChainedSignature.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/ChainedSignature // org.ton.block/ChainedSignature.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ChainedSignature) // org.ton.block/ChainedSignature.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ChainedSignature){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ChainedSignature, org.ton.kotlin.cell/CellContext) // org.ton.block/ChainedSignature.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ChainedSignature;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/ChainedSignature> // org.ton.block/ChainedSignature.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/ChunkRef : org.ton.block/TextChunkRef { // org.ton.block/ChunkRef|null[0]
    constructor <init>(org.ton.block/TextChunks) // org.ton.block/ChunkRef.<init>|<init>(org.ton.block.TextChunks){}[0]

    final val ref // org.ton.block/ChunkRef.ref|{}ref[0]
        final fun <get-ref>(): org.ton.block/TextChunks // org.ton.block/ChunkRef.ref.<get-ref>|<get-ref>(){}[0]

    final fun component1(): org.ton.block/TextChunks // org.ton.block/ChunkRef.component1|component1(){}[0]
    final fun copy(org.ton.block/TextChunks = ...): org.ton.block/ChunkRef // org.ton.block/ChunkRef.copy|copy(org.ton.block.TextChunks){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/ChunkRef.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/ChunkRef.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/ChunkRef.toString|toString(){}[0]

    final object Companion { // org.ton.block/ChunkRef.Companion|null[0]
        final fun tlbConstructor(kotlin/Int): org.ton.tlb/TlbConstructor<org.ton.block/ChunkRef> // org.ton.block/ChunkRef.Companion.tlbConstructor|tlbConstructor(kotlin.Int){}[0]
    }
}

final class org.ton.block/Coins : org.ton.tlb/TlbObject { // org.ton.block/Coins|null[0]
    constructor <init>(kotlin/Long) // org.ton.block/Coins.<init>|<init>(kotlin.Long){}[0]
    constructor <init>(org.ton.bigint/BigInt) // org.ton.block/Coins.<init>|<init>(org.ton.bigint.BigInt){}[0]
    constructor <init>(org.ton.block/VarUInteger = ...) // org.ton.block/Coins.<init>|<init>(org.ton.block.VarUInteger){}[0]

    final val amount // org.ton.block/Coins.amount|{}amount[0]
        final fun <get-amount>(): org.ton.block/VarUInteger // org.ton.block/Coins.amount.<get-amount>|<get-amount>(){}[0]

    final fun component1(): org.ton.block/VarUInteger // org.ton.block/Coins.component1|component1(){}[0]
    final fun copy(org.ton.block/VarUInteger = ...): org.ton.block/Coins // org.ton.block/Coins.copy|copy(org.ton.block.VarUInteger){}[0]
    final fun dec(): org.ton.block/Coins // org.ton.block/Coins.dec|dec(){}[0]
    final fun div(org.ton.block/Coins): org.ton.block/Coins // org.ton.block/Coins.div|div(org.ton.block.Coins){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/Coins.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/Coins.hashCode|hashCode(){}[0]
    final fun inc(): org.ton.block/Coins // org.ton.block/Coins.inc|inc(){}[0]
    final fun minus(org.ton.block/Coins): org.ton.block/Coins // org.ton.block/Coins.minus|minus(org.ton.block.Coins){}[0]
    final fun plus(org.ton.block/Coins): org.ton.block/Coins // org.ton.block/Coins.plus|plus(org.ton.block.Coins){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/Coins.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun rem(org.ton.block/Coins): org.ton.block/Coins // org.ton.block/Coins.rem|rem(org.ton.block.Coins){}[0]
    final fun times(org.ton.block/Coins): org.ton.block/Coins // org.ton.block/Coins.times|times(org.ton.block.Coins){}[0]
    final fun toString(): kotlin/String // org.ton.block/Coins.toString|toString(){}[0]
    final fun toString(kotlin/Int): kotlin/String // org.ton.block/Coins.toString|toString(kotlin.Int){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/Coins> { // org.ton.block/Coins.Companion|null[0]
        final val ZERO // org.ton.block/Coins.Companion.ZERO|{}ZERO[0]
            final fun <get-ZERO>(): org.ton.block/Coins // org.ton.block/Coins.Companion.ZERO.<get-ZERO>|<get-ZERO>(){}[0]

        final fun createCell(org.ton.block/Coins): org.ton.cell/Cell // org.ton.block/Coins.Companion.createCell|createCell(org.ton.block.Coins){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/Coins // org.ton.block/Coins.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/Coins // org.ton.block/Coins.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/Coins // org.ton.block/Coins.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun of(kotlin/Double, kotlin/Int = ...): org.ton.block/Coins // org.ton.block/Coins.Companion.of|of(kotlin.Double;kotlin.Int){}[0]
        final fun of(kotlin/Long, kotlin/Int = ...): org.ton.block/Coins // org.ton.block/Coins.Companion.of|of(kotlin.Long;kotlin.Int){}[0]
        final fun ofNano(kotlin/Long): org.ton.block/Coins // org.ton.block/Coins.Companion.ofNano|ofNano(kotlin.Long){}[0]
        final fun ofNano(org.ton.bigint/BigInt): org.ton.block/Coins // org.ton.block/Coins.Companion.ofNano|ofNano(org.ton.bigint.BigInt){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/Coins) // org.ton.block/Coins.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.Coins){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/Coins, org.ton.kotlin.cell/CellContext) // org.ton.block/Coins.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.Coins;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCodec(): org.ton.tlb/TlbCodec<org.ton.block/Coins> // org.ton.block/Coins.Companion.tlbCodec|tlbCodec(){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/Coins> // org.ton.block/Coins.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/ConfigParams : org.ton.tlb/TlbObject { // org.ton.block/ConfigParams|null[0]
    constructor <init>(org.ton.bitstring/BitString, org.ton.tlb/CellRef<org.ton.hashmap/HmEdge<org.ton.cell/Cell>>) // org.ton.block/ConfigParams.<init>|<init>(org.ton.bitstring.BitString;org.ton.tlb.CellRef<org.ton.hashmap.HmEdge<org.ton.cell.Cell>>){}[0]

    final val config // org.ton.block/ConfigParams.config|{}config[0]
        final fun <get-config>(): org.ton.tlb/CellRef<org.ton.hashmap/HmEdge<org.ton.cell/Cell>> // org.ton.block/ConfigParams.config.<get-config>|<get-config>(){}[0]
    final val configAddr // org.ton.block/ConfigParams.configAddr|{}configAddr[0]
        final fun <get-configAddr>(): org.ton.bitstring/BitString // org.ton.block/ConfigParams.configAddr.<get-configAddr>|<get-configAddr>(){}[0]

    final fun component1(): org.ton.bitstring/BitString // org.ton.block/ConfigParams.component1|component1(){}[0]
    final fun component2(): org.ton.tlb/CellRef<org.ton.hashmap/HmEdge<org.ton.cell/Cell>> // org.ton.block/ConfigParams.component2|component2(){}[0]
    final fun copy(org.ton.bitstring/BitString = ..., org.ton.tlb/CellRef<org.ton.hashmap/HmEdge<org.ton.cell/Cell>> = ...): org.ton.block/ConfigParams // org.ton.block/ConfigParams.copy|copy(org.ton.bitstring.BitString;org.ton.tlb.CellRef<org.ton.hashmap.HmEdge<org.ton.cell.Cell>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/ConfigParams.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/ConfigParams.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/ConfigParams.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/ConfigParams.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/ConfigParams> { // org.ton.block/ConfigParams.Companion|null[0]
        final fun createCell(org.ton.block/ConfigParams): org.ton.cell/Cell // org.ton.block/ConfigParams.Companion.createCell|createCell(org.ton.block.ConfigParams){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/ConfigParams // org.ton.block/ConfigParams.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/ConfigParams // org.ton.block/ConfigParams.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/ConfigParams // org.ton.block/ConfigParams.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ConfigParams) // org.ton.block/ConfigParams.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ConfigParams){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ConfigParams, org.ton.kotlin.cell/CellContext) // org.ton.block/ConfigParams.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ConfigParams;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/ConfigParams> // org.ton.block/ConfigParams.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/Counters : org.ton.tlb/TlbObject { // org.ton.block/Counters|null[0]
    constructor <init>(kotlin/UInt, kotlin/ULong, kotlin/ULong, kotlin/ULong) // org.ton.block/Counters.<init>|<init>(kotlin.UInt;kotlin.ULong;kotlin.ULong;kotlin.ULong){}[0]

    final val cnt2048 // org.ton.block/Counters.cnt2048|{}cnt2048[0]
        final fun <get-cnt2048>(): kotlin/ULong // org.ton.block/Counters.cnt2048.<get-cnt2048>|<get-cnt2048>(){}[0]
    final val cnt65536 // org.ton.block/Counters.cnt65536|{}cnt65536[0]
        final fun <get-cnt65536>(): kotlin/ULong // org.ton.block/Counters.cnt65536.<get-cnt65536>|<get-cnt65536>(){}[0]
    final val lastUpdated // org.ton.block/Counters.lastUpdated|{}lastUpdated[0]
        final fun <get-lastUpdated>(): kotlin/UInt // org.ton.block/Counters.lastUpdated.<get-lastUpdated>|<get-lastUpdated>(){}[0]
    final val total // org.ton.block/Counters.total|{}total[0]
        final fun <get-total>(): kotlin/ULong // org.ton.block/Counters.total.<get-total>|<get-total>(){}[0]

    final fun component1(): kotlin/UInt // org.ton.block/Counters.component1|component1(){}[0]
    final fun component2(): kotlin/ULong // org.ton.block/Counters.component2|component2(){}[0]
    final fun component3(): kotlin/ULong // org.ton.block/Counters.component3|component3(){}[0]
    final fun component4(): kotlin/ULong // org.ton.block/Counters.component4|component4(){}[0]
    final fun copy(kotlin/UInt = ..., kotlin/ULong = ..., kotlin/ULong = ..., kotlin/ULong = ...): org.ton.block/Counters // org.ton.block/Counters.copy|copy(kotlin.UInt;kotlin.ULong;kotlin.ULong;kotlin.ULong){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/Counters.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/Counters.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/Counters.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/Counters.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/Counters> { // org.ton.block/Counters.Companion|null[0]
        final fun createCell(org.ton.block/Counters): org.ton.cell/Cell // org.ton.block/Counters.Companion.createCell|createCell(org.ton.block.Counters){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/Counters // org.ton.block/Counters.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/Counters // org.ton.block/Counters.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/Counters // org.ton.block/Counters.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/Counters) // org.ton.block/Counters.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.Counters){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/Counters, org.ton.kotlin.cell/CellContext) // org.ton.block/Counters.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.Counters;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/Counters> // org.ton.block/Counters.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/CreatorStats : org.ton.tlb/TlbObject { // org.ton.block/CreatorStats|null[0]
    constructor <init>(org.ton.block/Counters, org.ton.block/Counters) // org.ton.block/CreatorStats.<init>|<init>(org.ton.block.Counters;org.ton.block.Counters){}[0]

    final val mcBlocks // org.ton.block/CreatorStats.mcBlocks|{}mcBlocks[0]
        final fun <get-mcBlocks>(): org.ton.block/Counters // org.ton.block/CreatorStats.mcBlocks.<get-mcBlocks>|<get-mcBlocks>(){}[0]
    final val shardBlocks // org.ton.block/CreatorStats.shardBlocks|{}shardBlocks[0]
        final fun <get-shardBlocks>(): org.ton.block/Counters // org.ton.block/CreatorStats.shardBlocks.<get-shardBlocks>|<get-shardBlocks>(){}[0]

    final fun component1(): org.ton.block/Counters // org.ton.block/CreatorStats.component1|component1(){}[0]
    final fun component2(): org.ton.block/Counters // org.ton.block/CreatorStats.component2|component2(){}[0]
    final fun copy(org.ton.block/Counters = ..., org.ton.block/Counters = ...): org.ton.block/CreatorStats // org.ton.block/CreatorStats.copy|copy(org.ton.block.Counters;org.ton.block.Counters){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/CreatorStats.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/CreatorStats.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/CreatorStats.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/CreatorStats.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/CreatorStats> { // org.ton.block/CreatorStats.Companion|null[0]
        final fun createCell(org.ton.block/CreatorStats): org.ton.cell/Cell // org.ton.block/CreatorStats.Companion.createCell|createCell(org.ton.block.CreatorStats){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/CreatorStats // org.ton.block/CreatorStats.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/CreatorStats // org.ton.block/CreatorStats.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/CreatorStats // org.ton.block/CreatorStats.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/CreatorStats) // org.ton.block/CreatorStats.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.CreatorStats){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/CreatorStats, org.ton.kotlin.cell/CellContext) // org.ton.block/CreatorStats.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.CreatorStats;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/CreatorStats> // org.ton.block/CreatorStats.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/CryptoSignaturePair { // org.ton.block/CryptoSignaturePair|null[0]
    constructor <init>(org.ton.bitstring/BitString, org.ton.block/CryptoSignature) // org.ton.block/CryptoSignaturePair.<init>|<init>(org.ton.bitstring.BitString;org.ton.block.CryptoSignature){}[0]

    final val node_id_short // org.ton.block/CryptoSignaturePair.node_id_short|{}node_id_short[0]
        final fun <get-node_id_short>(): org.ton.bitstring/BitString // org.ton.block/CryptoSignaturePair.node_id_short.<get-node_id_short>|<get-node_id_short>(){}[0]
    final val sign // org.ton.block/CryptoSignaturePair.sign|{}sign[0]
        final fun <get-sign>(): org.ton.block/CryptoSignature // org.ton.block/CryptoSignaturePair.sign.<get-sign>|<get-sign>(){}[0]

    final fun component1(): org.ton.bitstring/BitString // org.ton.block/CryptoSignaturePair.component1|component1(){}[0]
    final fun component2(): org.ton.block/CryptoSignature // org.ton.block/CryptoSignaturePair.component2|component2(){}[0]
    final fun copy(org.ton.bitstring/BitString = ..., org.ton.block/CryptoSignature = ...): org.ton.block/CryptoSignaturePair // org.ton.block/CryptoSignaturePair.copy|copy(org.ton.bitstring.BitString;org.ton.block.CryptoSignature){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/CryptoSignaturePair.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/CryptoSignaturePair.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/CryptoSignaturePair.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/CryptoSignaturePair> { // org.ton.block/CryptoSignaturePair.Companion|null[0]
        final fun createCell(org.ton.block/CryptoSignaturePair): org.ton.cell/Cell // org.ton.block/CryptoSignaturePair.Companion.createCell|createCell(org.ton.block.CryptoSignaturePair){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/CryptoSignaturePair // org.ton.block/CryptoSignaturePair.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/CryptoSignaturePair // org.ton.block/CryptoSignaturePair.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/CryptoSignaturePair // org.ton.block/CryptoSignaturePair.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/CryptoSignaturePair) // org.ton.block/CryptoSignaturePair.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.CryptoSignaturePair){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/CryptoSignaturePair, org.ton.kotlin.cell/CellContext) // org.ton.block/CryptoSignaturePair.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.CryptoSignaturePair;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/CryptoSignaturePair> // org.ton.block/CryptoSignaturePair.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/CryptoSignatureSimple : org.ton.block/CryptoSignature { // org.ton.block/CryptoSignatureSimple|null[0]
    constructor <init>(org.ton.bitstring/BitString, org.ton.bitstring/BitString) // org.ton.block/CryptoSignatureSimple.<init>|<init>(org.ton.bitstring.BitString;org.ton.bitstring.BitString){}[0]

    final val r // org.ton.block/CryptoSignatureSimple.r|{}r[0]
        final fun <get-r>(): org.ton.bitstring/BitString // org.ton.block/CryptoSignatureSimple.r.<get-r>|<get-r>(){}[0]
    final val s // org.ton.block/CryptoSignatureSimple.s|{}s[0]
        final fun <get-s>(): org.ton.bitstring/BitString // org.ton.block/CryptoSignatureSimple.s.<get-s>|<get-s>(){}[0]

    final fun component1(): org.ton.bitstring/BitString // org.ton.block/CryptoSignatureSimple.component1|component1(){}[0]
    final fun component2(): org.ton.bitstring/BitString // org.ton.block/CryptoSignatureSimple.component2|component2(){}[0]
    final fun copy(org.ton.bitstring/BitString = ..., org.ton.bitstring/BitString = ...): org.ton.block/CryptoSignatureSimple // org.ton.block/CryptoSignatureSimple.copy|copy(org.ton.bitstring.BitString;org.ton.bitstring.BitString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/CryptoSignatureSimple.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/CryptoSignatureSimple.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/CryptoSignatureSimple.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/CryptoSignatureSimple> { // org.ton.block/CryptoSignatureSimple.Companion|null[0]
        final fun createCell(org.ton.block/CryptoSignatureSimple): org.ton.cell/Cell // org.ton.block/CryptoSignatureSimple.Companion.createCell|createCell(org.ton.block.CryptoSignatureSimple){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/CryptoSignatureSimple // org.ton.block/CryptoSignatureSimple.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/CryptoSignatureSimple // org.ton.block/CryptoSignatureSimple.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/CryptoSignatureSimple // org.ton.block/CryptoSignatureSimple.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/CryptoSignatureSimple) // org.ton.block/CryptoSignatureSimple.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.CryptoSignatureSimple){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/CryptoSignatureSimple, org.ton.kotlin.cell/CellContext) // org.ton.block/CryptoSignatureSimple.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.CryptoSignatureSimple;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/CryptoSignatureSimple> // org.ton.block/CryptoSignatureSimple.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/CurrencyCollection : org.ton.tlb/TlbObject { // org.ton.block/CurrencyCollection|null[0]
    constructor <init>() // org.ton.block/CurrencyCollection.<init>|<init>(){}[0]
    constructor <init>(kotlin.collections/Map<kotlin/Int, org.ton.kotlin.currency/VarUInt248>) // org.ton.block/CurrencyCollection.<init>|<init>(kotlin.collections.Map<kotlin.Int,org.ton.kotlin.currency.VarUInt248>){}[0]
    constructor <init>(org.ton.block/Coins = ..., org.ton.block/ExtraCurrencyCollection = ...) // org.ton.block/CurrencyCollection.<init>|<init>(org.ton.block.Coins;org.ton.block.ExtraCurrencyCollection){}[0]
    constructor <init>(org.ton.block/Coins) // org.ton.block/CurrencyCollection.<init>|<init>(org.ton.block.Coins){}[0]
    constructor <init>(org.ton.block/Coins, kotlin.collections/Map<kotlin/Int, org.ton.kotlin.currency/VarUInt248>) // org.ton.block/CurrencyCollection.<init>|<init>(org.ton.block.Coins;kotlin.collections.Map<kotlin.Int,org.ton.kotlin.currency.VarUInt248>){}[0]
    constructor <init>(org.ton.block/Coins, org.ton.kotlin.dict/Dictionary<kotlin/Int, org.ton.kotlin.currency/VarUInt248>) // org.ton.block/CurrencyCollection.<init>|<init>(org.ton.block.Coins;org.ton.kotlin.dict.Dictionary<kotlin.Int,org.ton.kotlin.currency.VarUInt248>){}[0]
    constructor <init>(org.ton.kotlin.dict/Dictionary<kotlin/Int, org.ton.kotlin.currency/VarUInt248>) // org.ton.block/CurrencyCollection.<init>|<init>(org.ton.kotlin.dict.Dictionary<kotlin.Int,org.ton.kotlin.currency.VarUInt248>){}[0]

    final val coins // org.ton.block/CurrencyCollection.coins|{}coins[0]
        final fun <get-coins>(): org.ton.block/Coins // org.ton.block/CurrencyCollection.coins.<get-coins>|<get-coins>(){}[0]
    final val other // org.ton.block/CurrencyCollection.other|{}other[0]
        final fun <get-other>(): org.ton.block/ExtraCurrencyCollection // org.ton.block/CurrencyCollection.other.<get-other>|<get-other>(){}[0]

    final fun component1(): org.ton.block/Coins // org.ton.block/CurrencyCollection.component1|component1(){}[0]
    final fun component2(): org.ton.block/ExtraCurrencyCollection // org.ton.block/CurrencyCollection.component2|component2(){}[0]
    final fun copy(org.ton.block/Coins = ..., org.ton.block/ExtraCurrencyCollection = ...): org.ton.block/CurrencyCollection // org.ton.block/CurrencyCollection.copy|copy(org.ton.block.Coins;org.ton.block.ExtraCurrencyCollection){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/CurrencyCollection.equals|equals(kotlin.Any?){}[0]
    final fun get(kotlin/Int): org.ton.kotlin.currency/VarUInt248? // org.ton.block/CurrencyCollection.get|get(kotlin.Int){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/CurrencyCollection.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/CurrencyCollection.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/CurrencyCollection.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/CurrencyCollection> { // org.ton.block/CurrencyCollection.Companion|null[0]
        final val ZERO // org.ton.block/CurrencyCollection.Companion.ZERO|{}ZERO[0]
            final fun <get-ZERO>(): org.ton.block/CurrencyCollection // org.ton.block/CurrencyCollection.Companion.ZERO.<get-ZERO>|<get-ZERO>(){}[0]

        final fun createCell(org.ton.block/CurrencyCollection): org.ton.cell/Cell // org.ton.block/CurrencyCollection.Companion.createCell|createCell(org.ton.block.CurrencyCollection){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/CurrencyCollection // org.ton.block/CurrencyCollection.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/CurrencyCollection // org.ton.block/CurrencyCollection.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/CurrencyCollection // org.ton.block/CurrencyCollection.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/CurrencyCollection) // org.ton.block/CurrencyCollection.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.CurrencyCollection){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/CurrencyCollection, org.ton.kotlin.cell/CellContext) // org.ton.block/CurrencyCollection.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.CurrencyCollection;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/CurrencyCollection> // org.ton.block/CurrencyCollection.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/DepthBalanceInfo : org.ton.tlb/TlbObject { // org.ton.block/DepthBalanceInfo|null[0]
    constructor <init>(kotlin/Int, org.ton.block/CurrencyCollection) // org.ton.block/DepthBalanceInfo.<init>|<init>(kotlin.Int;org.ton.block.CurrencyCollection){}[0]

    final val balance // org.ton.block/DepthBalanceInfo.balance|{}balance[0]
        final fun <get-balance>(): org.ton.block/CurrencyCollection // org.ton.block/DepthBalanceInfo.balance.<get-balance>|<get-balance>(){}[0]
    final val splitDepth // org.ton.block/DepthBalanceInfo.splitDepth|{}splitDepth[0]
        final fun <get-splitDepth>(): kotlin/Int // org.ton.block/DepthBalanceInfo.splitDepth.<get-splitDepth>|<get-splitDepth>(){}[0]

    final fun component1(): kotlin/Int // org.ton.block/DepthBalanceInfo.component1|component1(){}[0]
    final fun component2(): org.ton.block/CurrencyCollection // org.ton.block/DepthBalanceInfo.component2|component2(){}[0]
    final fun copy(kotlin/Int = ..., org.ton.block/CurrencyCollection = ...): org.ton.block/DepthBalanceInfo // org.ton.block/DepthBalanceInfo.copy|copy(kotlin.Int;org.ton.block.CurrencyCollection){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/DepthBalanceInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/DepthBalanceInfo.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/DepthBalanceInfo.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/DepthBalanceInfo.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/DepthBalanceInfo> { // org.ton.block/DepthBalanceInfo.Companion|null[0]
        final fun createCell(org.ton.block/DepthBalanceInfo): org.ton.cell/Cell // org.ton.block/DepthBalanceInfo.Companion.createCell|createCell(org.ton.block.DepthBalanceInfo){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/DepthBalanceInfo // org.ton.block/DepthBalanceInfo.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/DepthBalanceInfo // org.ton.block/DepthBalanceInfo.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/DepthBalanceInfo // org.ton.block/DepthBalanceInfo.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/DepthBalanceInfo) // org.ton.block/DepthBalanceInfo.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.DepthBalanceInfo){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/DepthBalanceInfo, org.ton.kotlin.cell/CellContext) // org.ton.block/DepthBalanceInfo.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.DepthBalanceInfo;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/DepthBalanceInfo> // org.ton.block/DepthBalanceInfo.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/DnsAdnlAddress : org.ton.block/DnsRecord { // org.ton.block/DnsAdnlAddress|null[0]
    constructor <init>(org.ton.bitstring/BitString, org.ton.bitstring/BitString, org.ton.block/ProtoList?) // org.ton.block/DnsAdnlAddress.<init>|<init>(org.ton.bitstring.BitString;org.ton.bitstring.BitString;org.ton.block.ProtoList?){}[0]

    final val adnl_addr // org.ton.block/DnsAdnlAddress.adnl_addr|{}adnl_addr[0]
        final fun <get-adnl_addr>(): org.ton.bitstring/BitString // org.ton.block/DnsAdnlAddress.adnl_addr.<get-adnl_addr>|<get-adnl_addr>(){}[0]
    final val flags // org.ton.block/DnsAdnlAddress.flags|{}flags[0]
        final fun <get-flags>(): org.ton.bitstring/BitString // org.ton.block/DnsAdnlAddress.flags.<get-flags>|<get-flags>(){}[0]
    final val proto_list // org.ton.block/DnsAdnlAddress.proto_list|{}proto_list[0]
        final fun <get-proto_list>(): org.ton.block/ProtoList? // org.ton.block/DnsAdnlAddress.proto_list.<get-proto_list>|<get-proto_list>(){}[0]

    final fun component1(): org.ton.bitstring/BitString // org.ton.block/DnsAdnlAddress.component1|component1(){}[0]
    final fun component2(): org.ton.bitstring/BitString // org.ton.block/DnsAdnlAddress.component2|component2(){}[0]
    final fun component3(): org.ton.block/ProtoList? // org.ton.block/DnsAdnlAddress.component3|component3(){}[0]
    final fun copy(org.ton.bitstring/BitString = ..., org.ton.bitstring/BitString = ..., org.ton.block/ProtoList? = ...): org.ton.block/DnsAdnlAddress // org.ton.block/DnsAdnlAddress.copy|copy(org.ton.bitstring.BitString;org.ton.bitstring.BitString;org.ton.block.ProtoList?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/DnsAdnlAddress.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/DnsAdnlAddress.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/DnsAdnlAddress.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/DnsAdnlAddress> { // org.ton.block/DnsAdnlAddress.Companion|null[0]
        final fun createCell(org.ton.block/DnsAdnlAddress): org.ton.cell/Cell // org.ton.block/DnsAdnlAddress.Companion.createCell|createCell(org.ton.block.DnsAdnlAddress){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/DnsAdnlAddress // org.ton.block/DnsAdnlAddress.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/DnsAdnlAddress // org.ton.block/DnsAdnlAddress.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/DnsAdnlAddress // org.ton.block/DnsAdnlAddress.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/DnsAdnlAddress) // org.ton.block/DnsAdnlAddress.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.DnsAdnlAddress){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/DnsAdnlAddress, org.ton.kotlin.cell/CellContext) // org.ton.block/DnsAdnlAddress.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.DnsAdnlAddress;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/DnsAdnlAddress> // org.ton.block/DnsAdnlAddress.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/DnsNextResolver : org.ton.block/DnsRecord { // org.ton.block/DnsNextResolver|null[0]
    constructor <init>(org.ton.block/MsgAddressInt) // org.ton.block/DnsNextResolver.<init>|<init>(org.ton.block.MsgAddressInt){}[0]

    final val resolver // org.ton.block/DnsNextResolver.resolver|{}resolver[0]
        final fun <get-resolver>(): org.ton.block/MsgAddressInt // org.ton.block/DnsNextResolver.resolver.<get-resolver>|<get-resolver>(){}[0]

    final fun component1(): org.ton.block/MsgAddressInt // org.ton.block/DnsNextResolver.component1|component1(){}[0]
    final fun copy(org.ton.block/MsgAddressInt = ...): org.ton.block/DnsNextResolver // org.ton.block/DnsNextResolver.copy|copy(org.ton.block.MsgAddressInt){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/DnsNextResolver.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/DnsNextResolver.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/DnsNextResolver.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/DnsNextResolver> { // org.ton.block/DnsNextResolver.Companion|null[0]
        final fun createCell(org.ton.block/DnsNextResolver): org.ton.cell/Cell // org.ton.block/DnsNextResolver.Companion.createCell|createCell(org.ton.block.DnsNextResolver){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/DnsNextResolver // org.ton.block/DnsNextResolver.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/DnsNextResolver // org.ton.block/DnsNextResolver.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/DnsNextResolver // org.ton.block/DnsNextResolver.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/DnsNextResolver) // org.ton.block/DnsNextResolver.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.DnsNextResolver){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/DnsNextResolver, org.ton.kotlin.cell/CellContext) // org.ton.block/DnsNextResolver.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.DnsNextResolver;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/DnsNextResolver> // org.ton.block/DnsNextResolver.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/DnsSmcAddress : org.ton.block/DnsRecord { // org.ton.block/DnsSmcAddress|null[0]
    constructor <init>(org.ton.block/MsgAddressInt, org.ton.bitstring/BitString, org.ton.block/SmcCapList?) // org.ton.block/DnsSmcAddress.<init>|<init>(org.ton.block.MsgAddressInt;org.ton.bitstring.BitString;org.ton.block.SmcCapList?){}[0]

    final val cap_list // org.ton.block/DnsSmcAddress.cap_list|{}cap_list[0]
        final fun <get-cap_list>(): org.ton.block/SmcCapList? // org.ton.block/DnsSmcAddress.cap_list.<get-cap_list>|<get-cap_list>(){}[0]
    final val flags // org.ton.block/DnsSmcAddress.flags|{}flags[0]
        final fun <get-flags>(): org.ton.bitstring/BitString // org.ton.block/DnsSmcAddress.flags.<get-flags>|<get-flags>(){}[0]
    final val smc_address // org.ton.block/DnsSmcAddress.smc_address|{}smc_address[0]
        final fun <get-smc_address>(): org.ton.block/MsgAddressInt // org.ton.block/DnsSmcAddress.smc_address.<get-smc_address>|<get-smc_address>(){}[0]

    final fun component1(): org.ton.block/MsgAddressInt // org.ton.block/DnsSmcAddress.component1|component1(){}[0]
    final fun component2(): org.ton.bitstring/BitString // org.ton.block/DnsSmcAddress.component2|component2(){}[0]
    final fun component3(): org.ton.block/SmcCapList? // org.ton.block/DnsSmcAddress.component3|component3(){}[0]
    final fun copy(org.ton.block/MsgAddressInt = ..., org.ton.bitstring/BitString = ..., org.ton.block/SmcCapList? = ...): org.ton.block/DnsSmcAddress // org.ton.block/DnsSmcAddress.copy|copy(org.ton.block.MsgAddressInt;org.ton.bitstring.BitString;org.ton.block.SmcCapList?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/DnsSmcAddress.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/DnsSmcAddress.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/DnsSmcAddress.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/DnsSmcAddress> { // org.ton.block/DnsSmcAddress.Companion|null[0]
        final fun createCell(org.ton.block/DnsSmcAddress): org.ton.cell/Cell // org.ton.block/DnsSmcAddress.Companion.createCell|createCell(org.ton.block.DnsSmcAddress){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/DnsSmcAddress // org.ton.block/DnsSmcAddress.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/DnsSmcAddress // org.ton.block/DnsSmcAddress.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/DnsSmcAddress // org.ton.block/DnsSmcAddress.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/DnsSmcAddress) // org.ton.block/DnsSmcAddress.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.DnsSmcAddress){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/DnsSmcAddress, org.ton.kotlin.cell/CellContext) // org.ton.block/DnsSmcAddress.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.DnsSmcAddress;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/DnsSmcAddress> // org.ton.block/DnsSmcAddress.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/DnsText : org.ton.block/DnsRecord { // org.ton.block/DnsText|null[0]
    constructor <init>(org.ton.block/Text) // org.ton.block/DnsText.<init>|<init>(org.ton.block.Text){}[0]

    final val value // org.ton.block/DnsText.value|{}value[0]
        final fun <get-value>(): org.ton.block/Text // org.ton.block/DnsText.value.<get-value>|<get-value>(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/DnsText> { // org.ton.block/DnsText.Companion|null[0]
        final fun createCell(org.ton.block/DnsText): org.ton.cell/Cell // org.ton.block/DnsText.Companion.createCell|createCell(org.ton.block.DnsText){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/DnsText // org.ton.block/DnsText.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/DnsText // org.ton.block/DnsText.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/DnsText // org.ton.block/DnsText.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/DnsText) // org.ton.block/DnsText.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.DnsText){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/DnsText, org.ton.kotlin.cell/CellContext) // org.ton.block/DnsText.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.DnsText;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/DnsText> // org.ton.block/DnsText.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/EnqueuedMsg : org.ton.tlb/TlbObject { // org.ton.block/EnqueuedMsg|null[0]
    constructor <init>(kotlin/ULong, org.ton.tlb/CellRef<org.ton.block/MsgEnvelope>) // org.ton.block/EnqueuedMsg.<init>|<init>(kotlin.ULong;org.ton.tlb.CellRef<org.ton.block.MsgEnvelope>){}[0]

    final val enqueuedLt // org.ton.block/EnqueuedMsg.enqueuedLt|{}enqueuedLt[0]
        final fun <get-enqueuedLt>(): kotlin/ULong // org.ton.block/EnqueuedMsg.enqueuedLt.<get-enqueuedLt>|<get-enqueuedLt>(){}[0]
    final val outMsg // org.ton.block/EnqueuedMsg.outMsg|{}outMsg[0]
        final fun <get-outMsg>(): org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> // org.ton.block/EnqueuedMsg.outMsg.<get-outMsg>|<get-outMsg>(){}[0]

    final fun component1(): kotlin/ULong // org.ton.block/EnqueuedMsg.component1|component1(){}[0]
    final fun component2(): org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> // org.ton.block/EnqueuedMsg.component2|component2(){}[0]
    final fun copy(kotlin/ULong = ..., org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> = ...): org.ton.block/EnqueuedMsg // org.ton.block/EnqueuedMsg.copy|copy(kotlin.ULong;org.ton.tlb.CellRef<org.ton.block.MsgEnvelope>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/EnqueuedMsg.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/EnqueuedMsg.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/EnqueuedMsg.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/EnqueuedMsg.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/EnqueuedMsg> { // org.ton.block/EnqueuedMsg.Companion|null[0]
        final fun createCell(org.ton.block/EnqueuedMsg): org.ton.cell/Cell // org.ton.block/EnqueuedMsg.Companion.createCell|createCell(org.ton.block.EnqueuedMsg){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/EnqueuedMsg // org.ton.block/EnqueuedMsg.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/EnqueuedMsg // org.ton.block/EnqueuedMsg.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/EnqueuedMsg // org.ton.block/EnqueuedMsg.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/EnqueuedMsg) // org.ton.block/EnqueuedMsg.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.EnqueuedMsg){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/EnqueuedMsg, org.ton.kotlin.cell/CellContext) // org.ton.block/EnqueuedMsg.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.EnqueuedMsg;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/EnqueuedMsg> // org.ton.block/EnqueuedMsg.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/ExtBlkRef : org.ton.tlb/TlbObject { // org.ton.block/ExtBlkRef|null[0]
    constructor <init>(kotlin/ULong, kotlin/UInt, org.ton.bitstring/BitString, org.ton.bitstring/BitString) // org.ton.block/ExtBlkRef.<init>|<init>(kotlin.ULong;kotlin.UInt;org.ton.bitstring.BitString;org.ton.bitstring.BitString){}[0]

    final val endLt // org.ton.block/ExtBlkRef.endLt|{}endLt[0]
        final fun <get-endLt>(): kotlin/ULong // org.ton.block/ExtBlkRef.endLt.<get-endLt>|<get-endLt>(){}[0]
    final val fileHash // org.ton.block/ExtBlkRef.fileHash|{}fileHash[0]
        final fun <get-fileHash>(): org.ton.bitstring/BitString // org.ton.block/ExtBlkRef.fileHash.<get-fileHash>|<get-fileHash>(){}[0]
    final val rootHash // org.ton.block/ExtBlkRef.rootHash|{}rootHash[0]
        final fun <get-rootHash>(): org.ton.bitstring/BitString // org.ton.block/ExtBlkRef.rootHash.<get-rootHash>|<get-rootHash>(){}[0]
    final val seqNo // org.ton.block/ExtBlkRef.seqNo|{}seqNo[0]
        final fun <get-seqNo>(): kotlin/UInt // org.ton.block/ExtBlkRef.seqNo.<get-seqNo>|<get-seqNo>(){}[0]

    final fun component1(): kotlin/ULong // org.ton.block/ExtBlkRef.component1|component1(){}[0]
    final fun component2(): kotlin/UInt // org.ton.block/ExtBlkRef.component2|component2(){}[0]
    final fun component3(): org.ton.bitstring/BitString // org.ton.block/ExtBlkRef.component3|component3(){}[0]
    final fun component4(): org.ton.bitstring/BitString // org.ton.block/ExtBlkRef.component4|component4(){}[0]
    final fun copy(kotlin/ULong = ..., kotlin/UInt = ..., org.ton.bitstring/BitString = ..., org.ton.bitstring/BitString = ...): org.ton.block/ExtBlkRef // org.ton.block/ExtBlkRef.copy|copy(kotlin.ULong;kotlin.UInt;org.ton.bitstring.BitString;org.ton.bitstring.BitString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/ExtBlkRef.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/ExtBlkRef.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/ExtBlkRef.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/ExtBlkRef.toString|toString(){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.block/ExtBlkRef> { // org.ton.block/ExtBlkRef.Companion|null[0]
        final fun createCell(org.ton.block/ExtBlkRef): org.ton.cell/Cell // org.ton.block/ExtBlkRef.Companion.createCell|createCell(org.ton.block.ExtBlkRef){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/ExtBlkRef // org.ton.block/ExtBlkRef.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/ExtBlkRef // org.ton.block/ExtBlkRef.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/ExtBlkRef // org.ton.block/ExtBlkRef.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ExtBlkRef) // org.ton.block/ExtBlkRef.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ExtBlkRef){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ExtBlkRef, org.ton.kotlin.cell/CellContext) // org.ton.block/ExtBlkRef.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ExtBlkRef;org.ton.kotlin.cell.CellContext){}[0]
    }
}

final class org.ton.block/ExtInMsgInfo : org.ton.block/CommonMsgInfo { // org.ton.block/ExtInMsgInfo|null[0]
    constructor <init>(org.ton.block/AddrExtern?, org.ton.block/MsgAddressInt) // org.ton.block/ExtInMsgInfo.<init>|<init>(org.ton.block.AddrExtern?;org.ton.block.MsgAddressInt){}[0]
    constructor <init>(org.ton.block/MsgAddressExt, org.ton.block/MsgAddressInt, org.ton.block/Coins) // org.ton.block/ExtInMsgInfo.<init>|<init>(org.ton.block.MsgAddressExt;org.ton.block.MsgAddressInt;org.ton.block.Coins){}[0]
    constructor <init>(org.ton.block/MsgAddressInt) // org.ton.block/ExtInMsgInfo.<init>|<init>(org.ton.block.MsgAddressInt){}[0]
    constructor <init>(org.ton.block/MsgAddressInt, org.ton.block/Coins = ...) // org.ton.block/ExtInMsgInfo.<init>|<init>(org.ton.block.MsgAddressInt;org.ton.block.Coins){}[0]

    final val dest // org.ton.block/ExtInMsgInfo.dest|{}dest[0]
        final fun <get-dest>(): org.ton.block/MsgAddressInt // org.ton.block/ExtInMsgInfo.dest.<get-dest>|<get-dest>(){}[0]
    final val importFee // org.ton.block/ExtInMsgInfo.importFee|{}importFee[0]
        final fun <get-importFee>(): org.ton.block/Coins // org.ton.block/ExtInMsgInfo.importFee.<get-importFee>|<get-importFee>(){}[0]
    final val src // org.ton.block/ExtInMsgInfo.src|{}src[0]
        final fun <get-src>(): org.ton.block/MsgAddressExt // org.ton.block/ExtInMsgInfo.src.<get-src>|<get-src>(){}[0]

    final fun component1(): org.ton.block/MsgAddressExt // org.ton.block/ExtInMsgInfo.component1|component1(){}[0]
    final fun component2(): org.ton.block/MsgAddressInt // org.ton.block/ExtInMsgInfo.component2|component2(){}[0]
    final fun component3(): org.ton.block/Coins // org.ton.block/ExtInMsgInfo.component3|component3(){}[0]
    final fun copy(org.ton.block/MsgAddressExt = ..., org.ton.block/MsgAddressInt = ..., org.ton.block/Coins = ...): org.ton.block/ExtInMsgInfo // org.ton.block/ExtInMsgInfo.copy|copy(org.ton.block.MsgAddressExt;org.ton.block.MsgAddressInt;org.ton.block.Coins){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/ExtInMsgInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/ExtInMsgInfo.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/ExtInMsgInfo.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/ExtInMsgInfo.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/ExtInMsgInfo> { // org.ton.block/ExtInMsgInfo.Companion|null[0]
        final fun createCell(org.ton.block/ExtInMsgInfo): org.ton.cell/Cell // org.ton.block/ExtInMsgInfo.Companion.createCell|createCell(org.ton.block.ExtInMsgInfo){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/ExtInMsgInfo // org.ton.block/ExtInMsgInfo.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/ExtInMsgInfo // org.ton.block/ExtInMsgInfo.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/ExtInMsgInfo // org.ton.block/ExtInMsgInfo.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ExtInMsgInfo) // org.ton.block/ExtInMsgInfo.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ExtInMsgInfo){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ExtInMsgInfo, org.ton.kotlin.cell/CellContext) // org.ton.block/ExtInMsgInfo.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ExtInMsgInfo;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/ExtInMsgInfo> // org.ton.block/ExtInMsgInfo.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/ExtOutMsgInfo : org.ton.block/CommonMsgInfo { // org.ton.block/ExtOutMsgInfo|null[0]
    constructor <init>(org.ton.block/MsgAddressInt, org.ton.block/MsgAddressExt, kotlin/ULong, kotlin/UInt) // org.ton.block/ExtOutMsgInfo.<init>|<init>(org.ton.block.MsgAddressInt;org.ton.block.MsgAddressExt;kotlin.ULong;kotlin.UInt){}[0]

    final val createdAt // org.ton.block/ExtOutMsgInfo.createdAt|{}createdAt[0]
        final fun <get-createdAt>(): kotlin/UInt // org.ton.block/ExtOutMsgInfo.createdAt.<get-createdAt>|<get-createdAt>(){}[0]
    final val createdLt // org.ton.block/ExtOutMsgInfo.createdLt|{}createdLt[0]
        final fun <get-createdLt>(): kotlin/ULong // org.ton.block/ExtOutMsgInfo.createdLt.<get-createdLt>|<get-createdLt>(){}[0]
    final val dest // org.ton.block/ExtOutMsgInfo.dest|{}dest[0]
        final fun <get-dest>(): org.ton.block/MsgAddressExt // org.ton.block/ExtOutMsgInfo.dest.<get-dest>|<get-dest>(){}[0]
    final val src // org.ton.block/ExtOutMsgInfo.src|{}src[0]
        final fun <get-src>(): org.ton.block/MsgAddressInt // org.ton.block/ExtOutMsgInfo.src.<get-src>|<get-src>(){}[0]

    final fun component1(): org.ton.block/MsgAddressInt // org.ton.block/ExtOutMsgInfo.component1|component1(){}[0]
    final fun component2(): org.ton.block/MsgAddressExt // org.ton.block/ExtOutMsgInfo.component2|component2(){}[0]
    final fun component3(): kotlin/ULong // org.ton.block/ExtOutMsgInfo.component3|component3(){}[0]
    final fun component4(): kotlin/UInt // org.ton.block/ExtOutMsgInfo.component4|component4(){}[0]
    final fun copy(org.ton.block/MsgAddressInt = ..., org.ton.block/MsgAddressExt = ..., kotlin/ULong = ..., kotlin/UInt = ...): org.ton.block/ExtOutMsgInfo // org.ton.block/ExtOutMsgInfo.copy|copy(org.ton.block.MsgAddressInt;org.ton.block.MsgAddressExt;kotlin.ULong;kotlin.UInt){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/ExtOutMsgInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/ExtOutMsgInfo.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/ExtOutMsgInfo.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/ExtOutMsgInfo.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/ExtOutMsgInfo> { // org.ton.block/ExtOutMsgInfo.Companion|null[0]
        final fun createCell(org.ton.block/ExtOutMsgInfo): org.ton.cell/Cell // org.ton.block/ExtOutMsgInfo.Companion.createCell|createCell(org.ton.block.ExtOutMsgInfo){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/ExtOutMsgInfo // org.ton.block/ExtOutMsgInfo.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/ExtOutMsgInfo // org.ton.block/ExtOutMsgInfo.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/ExtOutMsgInfo // org.ton.block/ExtOutMsgInfo.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ExtOutMsgInfo) // org.ton.block/ExtOutMsgInfo.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ExtOutMsgInfo){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ExtOutMsgInfo, org.ton.kotlin.cell/CellContext) // org.ton.block/ExtOutMsgInfo.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ExtOutMsgInfo;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/ExtOutMsgInfo> // org.ton.block/ExtOutMsgInfo.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/ExtraCurrencyCollection : org.ton.kotlin.dict/Dictionary<kotlin/Int, org.ton.kotlin.currency/VarUInt248> { // org.ton.block/ExtraCurrencyCollection|null[0]
    constructor <init>() // org.ton.block/ExtraCurrencyCollection.<init>|<init>(){}[0]
    constructor <init>(kotlin.collections/Map<kotlin/Int, org.ton.kotlin.currency/VarUInt248>, org.ton.kotlin.cell/CellContext = ...) // org.ton.block/ExtraCurrencyCollection.<init>|<init>(kotlin.collections.Map<kotlin.Int,org.ton.kotlin.currency.VarUInt248>;org.ton.kotlin.cell.CellContext){}[0]
    constructor <init>(org.ton.cell/Cell?) // org.ton.block/ExtraCurrencyCollection.<init>|<init>(org.ton.cell.Cell?){}[0]
    constructor <init>(org.ton.kotlin.dict/Dictionary<kotlin/Int, org.ton.kotlin.currency/VarUInt248>) // org.ton.block/ExtraCurrencyCollection.<init>|<init>(org.ton.kotlin.dict.Dictionary<kotlin.Int,org.ton.kotlin.currency.VarUInt248>){}[0]
    constructor <init>(org.ton.kotlin.dict/RawDictionary) // org.ton.block/ExtraCurrencyCollection.<init>|<init>(org.ton.kotlin.dict.RawDictionary){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/ExtraCurrencyCollection.equals|equals(kotlin.Any?){}[0]
    final fun toString(): kotlin/String // org.ton.block/ExtraCurrencyCollection.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/ExtraCurrencyCollection> { // org.ton.block/ExtraCurrencyCollection.Companion|null[0]
        final val EMPTY // org.ton.block/ExtraCurrencyCollection.Companion.EMPTY|{}EMPTY[0]
            final fun <get-EMPTY>(): org.ton.block/ExtraCurrencyCollection // org.ton.block/ExtraCurrencyCollection.Companion.EMPTY.<get-EMPTY>|<get-EMPTY>(){}[0]

        final fun createCell(org.ton.block/ExtraCurrencyCollection): org.ton.cell/Cell // org.ton.block/ExtraCurrencyCollection.Companion.createCell|createCell(org.ton.block.ExtraCurrencyCollection){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/ExtraCurrencyCollection // org.ton.block/ExtraCurrencyCollection.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/ExtraCurrencyCollection // org.ton.block/ExtraCurrencyCollection.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/ExtraCurrencyCollection // org.ton.block/ExtraCurrencyCollection.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ExtraCurrencyCollection) // org.ton.block/ExtraCurrencyCollection.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ExtraCurrencyCollection){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ExtraCurrencyCollection, org.ton.kotlin.cell/CellContext) // org.ton.block/ExtraCurrencyCollection.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ExtraCurrencyCollection;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/ExtraCurrencyCollection> // org.ton.block/ExtraCurrencyCollection.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/GlobalVersion : org.ton.tlb/TlbObject { // org.ton.block/GlobalVersion|null[0]
    constructor <init>(kotlin/UInt, kotlin/ULong) // org.ton.block/GlobalVersion.<init>|<init>(kotlin.UInt;kotlin.ULong){}[0]

    final val capabilities // org.ton.block/GlobalVersion.capabilities|{}capabilities[0]
        final fun <get-capabilities>(): kotlin/ULong // org.ton.block/GlobalVersion.capabilities.<get-capabilities>|<get-capabilities>(){}[0]
    final val version // org.ton.block/GlobalVersion.version|{}version[0]
        final fun <get-version>(): kotlin/UInt // org.ton.block/GlobalVersion.version.<get-version>|<get-version>(){}[0]

    final fun component1(): kotlin/UInt // org.ton.block/GlobalVersion.component1|component1(){}[0]
    final fun component2(): kotlin/ULong // org.ton.block/GlobalVersion.component2|component2(){}[0]
    final fun copy(kotlin/UInt = ..., kotlin/ULong = ...): org.ton.block/GlobalVersion // org.ton.block/GlobalVersion.copy|copy(kotlin.UInt;kotlin.ULong){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/GlobalVersion.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/GlobalVersion.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/GlobalVersion.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/GlobalVersion.toString|toString(){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.block/GlobalVersion> { // org.ton.block/GlobalVersion.Companion|null[0]
        final fun createCell(org.ton.block/GlobalVersion): org.ton.cell/Cell // org.ton.block/GlobalVersion.Companion.createCell|createCell(org.ton.block.GlobalVersion){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/GlobalVersion // org.ton.block/GlobalVersion.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/GlobalVersion // org.ton.block/GlobalVersion.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/GlobalVersion // org.ton.block/GlobalVersion.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/GlobalVersion) // org.ton.block/GlobalVersion.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.GlobalVersion){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/GlobalVersion, org.ton.kotlin.cell/CellContext) // org.ton.block/GlobalVersion.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.GlobalVersion;org.ton.kotlin.cell.CellContext){}[0]
    }
}

final class org.ton.block/HashUpdate : org.ton.tlb/TlbObject { // org.ton.block/HashUpdate|null[0]
    constructor <init>(org.ton.bitstring/BitString, org.ton.bitstring/BitString) // org.ton.block/HashUpdate.<init>|<init>(org.ton.bitstring.BitString;org.ton.bitstring.BitString){}[0]

    final val newHash // org.ton.block/HashUpdate.newHash|{}newHash[0]
        final fun <get-newHash>(): org.ton.bitstring/BitString // org.ton.block/HashUpdate.newHash.<get-newHash>|<get-newHash>(){}[0]
    final val oldHash // org.ton.block/HashUpdate.oldHash|{}oldHash[0]
        final fun <get-oldHash>(): org.ton.bitstring/BitString // org.ton.block/HashUpdate.oldHash.<get-oldHash>|<get-oldHash>(){}[0]

    final fun component1(): org.ton.bitstring/BitString // org.ton.block/HashUpdate.component1|component1(){}[0]
    final fun component2(): org.ton.bitstring/BitString // org.ton.block/HashUpdate.component2|component2(){}[0]
    final fun copy(org.ton.bitstring/BitString = ..., org.ton.bitstring/BitString = ...): org.ton.block/HashUpdate // org.ton.block/HashUpdate.copy|copy(org.ton.bitstring.BitString;org.ton.bitstring.BitString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/HashUpdate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/HashUpdate.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/HashUpdate.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/HashUpdate.toString|toString(){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.block/HashUpdate> { // org.ton.block/HashUpdate.Companion|null[0]
        final fun createCell(org.ton.block/HashUpdate): org.ton.cell/Cell // org.ton.block/HashUpdate.Companion.createCell|createCell(org.ton.block.HashUpdate){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/HashUpdate // org.ton.block/HashUpdate.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/HashUpdate // org.ton.block/HashUpdate.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/HashUpdate // org.ton.block/HashUpdate.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/HashUpdate) // org.ton.block/HashUpdate.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.HashUpdate){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/HashUpdate, org.ton.kotlin.cell/CellContext) // org.ton.block/HashUpdate.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.HashUpdate;org.ton.kotlin.cell.CellContext){}[0]
    }
}

final class org.ton.block/IhrPendingSince { // org.ton.block/IhrPendingSince|null[0]
    constructor <init>(kotlin/ULong) // org.ton.block/IhrPendingSince.<init>|<init>(kotlin.ULong){}[0]

    final val import_lt // org.ton.block/IhrPendingSince.import_lt|{}import_lt[0]
        final fun <get-import_lt>(): kotlin/ULong // org.ton.block/IhrPendingSince.import_lt.<get-import_lt>|<get-import_lt>(){}[0]

    final fun component1(): kotlin/ULong // org.ton.block/IhrPendingSince.component1|component1(){}[0]
    final fun copy(kotlin/ULong = ...): org.ton.block/IhrPendingSince // org.ton.block/IhrPendingSince.copy|copy(kotlin.ULong){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/IhrPendingSince.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/IhrPendingSince.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/IhrPendingSince.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/IhrPendingSince> { // org.ton.block/IhrPendingSince.Companion|null[0]
        final fun createCell(org.ton.block/IhrPendingSince): org.ton.cell/Cell // org.ton.block/IhrPendingSince.Companion.createCell|createCell(org.ton.block.IhrPendingSince){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/IhrPendingSince // org.ton.block/IhrPendingSince.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/IhrPendingSince // org.ton.block/IhrPendingSince.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/IhrPendingSince // org.ton.block/IhrPendingSince.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/IhrPendingSince) // org.ton.block/IhrPendingSince.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.IhrPendingSince){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/IhrPendingSince, org.ton.kotlin.cell/CellContext) // org.ton.block/IhrPendingSince.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.IhrPendingSince;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/IhrPendingSince> // org.ton.block/IhrPendingSince.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/ImportFees : org.ton.tlb/TlbObject { // org.ton.block/ImportFees|null[0]
    constructor <init>(org.ton.block/Coins, org.ton.block/CurrencyCollection) // org.ton.block/ImportFees.<init>|<init>(org.ton.block.Coins;org.ton.block.CurrencyCollection){}[0]

    final val feesCollected // org.ton.block/ImportFees.feesCollected|{}feesCollected[0]
        final fun <get-feesCollected>(): org.ton.block/Coins // org.ton.block/ImportFees.feesCollected.<get-feesCollected>|<get-feesCollected>(){}[0]
    final val valueImported // org.ton.block/ImportFees.valueImported|{}valueImported[0]
        final fun <get-valueImported>(): org.ton.block/CurrencyCollection // org.ton.block/ImportFees.valueImported.<get-valueImported>|<get-valueImported>(){}[0]

    final fun component1(): org.ton.block/Coins // org.ton.block/ImportFees.component1|component1(){}[0]
    final fun component2(): org.ton.block/CurrencyCollection // org.ton.block/ImportFees.component2|component2(){}[0]
    final fun copy(org.ton.block/Coins = ..., org.ton.block/CurrencyCollection = ...): org.ton.block/ImportFees // org.ton.block/ImportFees.copy|copy(org.ton.block.Coins;org.ton.block.CurrencyCollection){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/ImportFees.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/ImportFees.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/ImportFees.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/ImportFees.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/ImportFees> { // org.ton.block/ImportFees.Companion|null[0]
        final fun createCell(org.ton.block/ImportFees): org.ton.cell/Cell // org.ton.block/ImportFees.Companion.createCell|createCell(org.ton.block.ImportFees){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/ImportFees // org.ton.block/ImportFees.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/ImportFees // org.ton.block/ImportFees.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/ImportFees // org.ton.block/ImportFees.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ImportFees) // org.ton.block/ImportFees.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ImportFees){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ImportFees, org.ton.kotlin.cell/CellContext) // org.ton.block/ImportFees.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ImportFees;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/ImportFees> // org.ton.block/ImportFees.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/IntMsgInfo : org.ton.block/CommonMsgInfo { // org.ton.block/IntMsgInfo|null[0]
    constructor <init>(kotlin/Boolean, kotlin/Boolean, kotlin/Boolean, org.ton.block/MsgAddressInt, org.ton.block/MsgAddressInt, org.ton.block/CurrencyCollection, org.ton.block/Coins, org.ton.block/Coins, kotlin/Long, kotlin/Int) // org.ton.block/IntMsgInfo.<init>|<init>(kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;org.ton.block.MsgAddressInt;org.ton.block.MsgAddressInt;org.ton.block.CurrencyCollection;org.ton.block.Coins;org.ton.block.Coins;kotlin.Long;kotlin.Int){}[0]

    final val bounce // org.ton.block/IntMsgInfo.bounce|{}bounce[0]
        final fun <get-bounce>(): kotlin/Boolean // org.ton.block/IntMsgInfo.bounce.<get-bounce>|<get-bounce>(){}[0]
    final val bounced // org.ton.block/IntMsgInfo.bounced|{}bounced[0]
        final fun <get-bounced>(): kotlin/Boolean // org.ton.block/IntMsgInfo.bounced.<get-bounced>|<get-bounced>(){}[0]
    final val created_at // org.ton.block/IntMsgInfo.created_at|{}created_at[0]
        final fun <get-created_at>(): kotlin/Int // org.ton.block/IntMsgInfo.created_at.<get-created_at>|<get-created_at>(){}[0]
    final val created_lt // org.ton.block/IntMsgInfo.created_lt|{}created_lt[0]
        final fun <get-created_lt>(): kotlin/Long // org.ton.block/IntMsgInfo.created_lt.<get-created_lt>|<get-created_lt>(){}[0]
    final val dest // org.ton.block/IntMsgInfo.dest|{}dest[0]
        final fun <get-dest>(): org.ton.block/MsgAddressInt // org.ton.block/IntMsgInfo.dest.<get-dest>|<get-dest>(){}[0]
    final val fwd_fee // org.ton.block/IntMsgInfo.fwd_fee|{}fwd_fee[0]
        final fun <get-fwd_fee>(): org.ton.block/Coins // org.ton.block/IntMsgInfo.fwd_fee.<get-fwd_fee>|<get-fwd_fee>(){}[0]
    final val ihrDisabled // org.ton.block/IntMsgInfo.ihrDisabled|{}ihrDisabled[0]
        final fun <get-ihrDisabled>(): kotlin/Boolean // org.ton.block/IntMsgInfo.ihrDisabled.<get-ihrDisabled>|<get-ihrDisabled>(){}[0]
    final val ihr_fee // org.ton.block/IntMsgInfo.ihr_fee|{}ihr_fee[0]
        final fun <get-ihr_fee>(): org.ton.block/Coins // org.ton.block/IntMsgInfo.ihr_fee.<get-ihr_fee>|<get-ihr_fee>(){}[0]
    final val src // org.ton.block/IntMsgInfo.src|{}src[0]
        final fun <get-src>(): org.ton.block/MsgAddressInt // org.ton.block/IntMsgInfo.src.<get-src>|<get-src>(){}[0]
    final val value // org.ton.block/IntMsgInfo.value|{}value[0]
        final fun <get-value>(): org.ton.block/CurrencyCollection // org.ton.block/IntMsgInfo.value.<get-value>|<get-value>(){}[0]

    final fun component1(): kotlin/Boolean // org.ton.block/IntMsgInfo.component1|component1(){}[0]
    final fun component10(): kotlin/Int // org.ton.block/IntMsgInfo.component10|component10(){}[0]
    final fun component2(): kotlin/Boolean // org.ton.block/IntMsgInfo.component2|component2(){}[0]
    final fun component3(): kotlin/Boolean // org.ton.block/IntMsgInfo.component3|component3(){}[0]
    final fun component4(): org.ton.block/MsgAddressInt // org.ton.block/IntMsgInfo.component4|component4(){}[0]
    final fun component5(): org.ton.block/MsgAddressInt // org.ton.block/IntMsgInfo.component5|component5(){}[0]
    final fun component6(): org.ton.block/CurrencyCollection // org.ton.block/IntMsgInfo.component6|component6(){}[0]
    final fun component7(): org.ton.block/Coins // org.ton.block/IntMsgInfo.component7|component7(){}[0]
    final fun component8(): org.ton.block/Coins // org.ton.block/IntMsgInfo.component8|component8(){}[0]
    final fun component9(): kotlin/Long // org.ton.block/IntMsgInfo.component9|component9(){}[0]
    final fun copy(kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., org.ton.block/MsgAddressInt = ..., org.ton.block/MsgAddressInt = ..., org.ton.block/CurrencyCollection = ..., org.ton.block/Coins = ..., org.ton.block/Coins = ..., kotlin/Long = ..., kotlin/Int = ...): org.ton.block/IntMsgInfo // org.ton.block/IntMsgInfo.copy|copy(kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;org.ton.block.MsgAddressInt;org.ton.block.MsgAddressInt;org.ton.block.CurrencyCollection;org.ton.block.Coins;org.ton.block.Coins;kotlin.Long;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/IntMsgInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/IntMsgInfo.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/IntMsgInfo.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/IntMsgInfo.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/IntMsgInfo> { // org.ton.block/IntMsgInfo.Companion|null[0]
        final fun createCell(org.ton.block/IntMsgInfo): org.ton.cell/Cell // org.ton.block/IntMsgInfo.Companion.createCell|createCell(org.ton.block.IntMsgInfo){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/IntMsgInfo // org.ton.block/IntMsgInfo.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/IntMsgInfo // org.ton.block/IntMsgInfo.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/IntMsgInfo // org.ton.block/IntMsgInfo.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/IntMsgInfo) // org.ton.block/IntMsgInfo.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.IntMsgInfo){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/IntMsgInfo, org.ton.kotlin.cell/CellContext) // org.ton.block/IntMsgInfo.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.IntMsgInfo;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/IntMsgInfo> // org.ton.block/IntMsgInfo.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/IntermediateAddressExt : org.ton.block/IntermediateAddress { // org.ton.block/IntermediateAddressExt|null[0]
    constructor <init>(kotlin/Int, kotlin/ULong) // org.ton.block/IntermediateAddressExt.<init>|<init>(kotlin.Int;kotlin.ULong){}[0]

    final val addrPfx // org.ton.block/IntermediateAddressExt.addrPfx|{}addrPfx[0]
        final fun <get-addrPfx>(): kotlin/ULong // org.ton.block/IntermediateAddressExt.addrPfx.<get-addrPfx>|<get-addrPfx>(){}[0]
    final val workchainId // org.ton.block/IntermediateAddressExt.workchainId|{}workchainId[0]
        final fun <get-workchainId>(): kotlin/Int // org.ton.block/IntermediateAddressExt.workchainId.<get-workchainId>|<get-workchainId>(){}[0]

    final fun component1(): kotlin/Int // org.ton.block/IntermediateAddressExt.component1|component1(){}[0]
    final fun component2(): kotlin/ULong // org.ton.block/IntermediateAddressExt.component2|component2(){}[0]
    final fun copy(kotlin/Int = ..., kotlin/ULong = ...): org.ton.block/IntermediateAddressExt // org.ton.block/IntermediateAddressExt.copy|copy(kotlin.Int;kotlin.ULong){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/IntermediateAddressExt.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/IntermediateAddressExt.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/IntermediateAddressExt.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/IntermediateAddressExt.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/IntermediateAddressExt> { // org.ton.block/IntermediateAddressExt.Companion|null[0]
        final fun createCell(org.ton.block/IntermediateAddressExt): org.ton.cell/Cell // org.ton.block/IntermediateAddressExt.Companion.createCell|createCell(org.ton.block.IntermediateAddressExt){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/IntermediateAddressExt // org.ton.block/IntermediateAddressExt.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/IntermediateAddressExt // org.ton.block/IntermediateAddressExt.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/IntermediateAddressExt // org.ton.block/IntermediateAddressExt.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/IntermediateAddressExt) // org.ton.block/IntermediateAddressExt.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.IntermediateAddressExt){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/IntermediateAddressExt, org.ton.kotlin.cell/CellContext) // org.ton.block/IntermediateAddressExt.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.IntermediateAddressExt;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/IntermediateAddressExt> // org.ton.block/IntermediateAddressExt.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/IntermediateAddressRegular : org.ton.block/IntermediateAddress { // org.ton.block/IntermediateAddressRegular|null[0]
    constructor <init>(kotlin/Int) // org.ton.block/IntermediateAddressRegular.<init>|<init>(kotlin.Int){}[0]

    final val useDestBits // org.ton.block/IntermediateAddressRegular.useDestBits|{}useDestBits[0]
        final fun <get-useDestBits>(): kotlin/Int // org.ton.block/IntermediateAddressRegular.useDestBits.<get-useDestBits>|<get-useDestBits>(){}[0]

    final fun component1(): kotlin/Int // org.ton.block/IntermediateAddressRegular.component1|component1(){}[0]
    final fun copy(kotlin/Int = ...): org.ton.block/IntermediateAddressRegular // org.ton.block/IntermediateAddressRegular.copy|copy(kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/IntermediateAddressRegular.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/IntermediateAddressRegular.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/IntermediateAddressRegular.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/IntermediateAddressRegular.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/IntermediateAddressRegular> { // org.ton.block/IntermediateAddressRegular.Companion|null[0]
        final fun createCell(org.ton.block/IntermediateAddressRegular): org.ton.cell/Cell // org.ton.block/IntermediateAddressRegular.Companion.createCell|createCell(org.ton.block.IntermediateAddressRegular){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/IntermediateAddressRegular // org.ton.block/IntermediateAddressRegular.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/IntermediateAddressRegular // org.ton.block/IntermediateAddressRegular.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/IntermediateAddressRegular // org.ton.block/IntermediateAddressRegular.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/IntermediateAddressRegular) // org.ton.block/IntermediateAddressRegular.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.IntermediateAddressRegular){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/IntermediateAddressRegular, org.ton.kotlin.cell/CellContext) // org.ton.block/IntermediateAddressRegular.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.IntermediateAddressRegular;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/IntermediateAddressRegular> // org.ton.block/IntermediateAddressRegular.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/IntermediateAddressSimple : org.ton.block/IntermediateAddress { // org.ton.block/IntermediateAddressSimple|null[0]
    constructor <init>(kotlin/Int, kotlin/ULong) // org.ton.block/IntermediateAddressSimple.<init>|<init>(kotlin.Int;kotlin.ULong){}[0]

    final val addrPfx // org.ton.block/IntermediateAddressSimple.addrPfx|{}addrPfx[0]
        final fun <get-addrPfx>(): kotlin/ULong // org.ton.block/IntermediateAddressSimple.addrPfx.<get-addrPfx>|<get-addrPfx>(){}[0]
    final val workchainId // org.ton.block/IntermediateAddressSimple.workchainId|{}workchainId[0]
        final fun <get-workchainId>(): kotlin/Int // org.ton.block/IntermediateAddressSimple.workchainId.<get-workchainId>|<get-workchainId>(){}[0]

    final fun component1(): kotlin/Int // org.ton.block/IntermediateAddressSimple.component1|component1(){}[0]
    final fun component2(): kotlin/ULong // org.ton.block/IntermediateAddressSimple.component2|component2(){}[0]
    final fun copy(kotlin/Int = ..., kotlin/ULong = ...): org.ton.block/IntermediateAddressSimple // org.ton.block/IntermediateAddressSimple.copy|copy(kotlin.Int;kotlin.ULong){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/IntermediateAddressSimple.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/IntermediateAddressSimple.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/IntermediateAddressSimple.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/IntermediateAddressSimple.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/IntermediateAddressSimple> { // org.ton.block/IntermediateAddressSimple.Companion|null[0]
        final fun createCell(org.ton.block/IntermediateAddressSimple): org.ton.cell/Cell // org.ton.block/IntermediateAddressSimple.Companion.createCell|createCell(org.ton.block.IntermediateAddressSimple){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/IntermediateAddressSimple // org.ton.block/IntermediateAddressSimple.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/IntermediateAddressSimple // org.ton.block/IntermediateAddressSimple.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/IntermediateAddressSimple // org.ton.block/IntermediateAddressSimple.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/IntermediateAddressSimple) // org.ton.block/IntermediateAddressSimple.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.IntermediateAddressSimple){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/IntermediateAddressSimple, org.ton.kotlin.cell/CellContext) // org.ton.block/IntermediateAddressSimple.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.IntermediateAddressSimple;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/IntermediateAddressSimple> // org.ton.block/IntermediateAddressSimple.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/KeyExtBlkRef : org.ton.tlb/TlbObject { // org.ton.block/KeyExtBlkRef|null[0]
    constructor <init>(kotlin/Boolean, org.ton.block/ExtBlkRef) // org.ton.block/KeyExtBlkRef.<init>|<init>(kotlin.Boolean;org.ton.block.ExtBlkRef){}[0]

    final val blkRef // org.ton.block/KeyExtBlkRef.blkRef|{}blkRef[0]
        final fun <get-blkRef>(): org.ton.block/ExtBlkRef // org.ton.block/KeyExtBlkRef.blkRef.<get-blkRef>|<get-blkRef>(){}[0]
    final val key // org.ton.block/KeyExtBlkRef.key|{}key[0]
        final fun <get-key>(): kotlin/Boolean // org.ton.block/KeyExtBlkRef.key.<get-key>|<get-key>(){}[0]

    final fun component1(): kotlin/Boolean // org.ton.block/KeyExtBlkRef.component1|component1(){}[0]
    final fun component2(): org.ton.block/ExtBlkRef // org.ton.block/KeyExtBlkRef.component2|component2(){}[0]
    final fun copy(kotlin/Boolean = ..., org.ton.block/ExtBlkRef = ...): org.ton.block/KeyExtBlkRef // org.ton.block/KeyExtBlkRef.copy|copy(kotlin.Boolean;org.ton.block.ExtBlkRef){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/KeyExtBlkRef.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/KeyExtBlkRef.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/KeyExtBlkRef.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/KeyExtBlkRef.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/KeyExtBlkRef> { // org.ton.block/KeyExtBlkRef.Companion|null[0]
        final fun createCell(org.ton.block/KeyExtBlkRef): org.ton.cell/Cell // org.ton.block/KeyExtBlkRef.Companion.createCell|createCell(org.ton.block.KeyExtBlkRef){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/KeyExtBlkRef // org.ton.block/KeyExtBlkRef.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/KeyExtBlkRef // org.ton.block/KeyExtBlkRef.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/KeyExtBlkRef // org.ton.block/KeyExtBlkRef.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/KeyExtBlkRef) // org.ton.block/KeyExtBlkRef.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.KeyExtBlkRef){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/KeyExtBlkRef, org.ton.kotlin.cell/CellContext) // org.ton.block/KeyExtBlkRef.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.KeyExtBlkRef;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/KeyExtBlkRef> // org.ton.block/KeyExtBlkRef.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/KeyMaxLt : org.ton.tlb/TlbObject { // org.ton.block/KeyMaxLt|null[0]
    constructor <init>(kotlin/Boolean, kotlin/ULong) // org.ton.block/KeyMaxLt.<init>|<init>(kotlin.Boolean;kotlin.ULong){}[0]

    final val key // org.ton.block/KeyMaxLt.key|{}key[0]
        final fun <get-key>(): kotlin/Boolean // org.ton.block/KeyMaxLt.key.<get-key>|<get-key>(){}[0]
    final val maxEndLt // org.ton.block/KeyMaxLt.maxEndLt|{}maxEndLt[0]
        final fun <get-maxEndLt>(): kotlin/ULong // org.ton.block/KeyMaxLt.maxEndLt.<get-maxEndLt>|<get-maxEndLt>(){}[0]

    final fun component1(): kotlin/Boolean // org.ton.block/KeyMaxLt.component1|component1(){}[0]
    final fun component2(): kotlin/ULong // org.ton.block/KeyMaxLt.component2|component2(){}[0]
    final fun copy(kotlin/Boolean = ..., kotlin/ULong = ...): org.ton.block/KeyMaxLt // org.ton.block/KeyMaxLt.copy|copy(kotlin.Boolean;kotlin.ULong){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/KeyMaxLt.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/KeyMaxLt.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/KeyMaxLt.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/KeyMaxLt.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/KeyMaxLt> { // org.ton.block/KeyMaxLt.Companion|null[0]
        final fun createCell(org.ton.block/KeyMaxLt): org.ton.cell/Cell // org.ton.block/KeyMaxLt.Companion.createCell|createCell(org.ton.block.KeyMaxLt){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/KeyMaxLt // org.ton.block/KeyMaxLt.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/KeyMaxLt // org.ton.block/KeyMaxLt.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/KeyMaxLt // org.ton.block/KeyMaxLt.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/KeyMaxLt) // org.ton.block/KeyMaxLt.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.KeyMaxLt){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/KeyMaxLt, org.ton.kotlin.cell/CellContext) // org.ton.block/KeyMaxLt.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.KeyMaxLt;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/KeyMaxLt> // org.ton.block/KeyMaxLt.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/LibDescr { // org.ton.block/LibDescr|null[0]
    constructor <init>(org.ton.cell/Cell, org.ton.hashmap/HmEdge<kotlin/Unit>) // org.ton.block/LibDescr.<init>|<init>(org.ton.cell.Cell;org.ton.hashmap.HmEdge<kotlin.Unit>){}[0]

    final val lib // org.ton.block/LibDescr.lib|{}lib[0]
        final fun <get-lib>(): org.ton.cell/Cell // org.ton.block/LibDescr.lib.<get-lib>|<get-lib>(){}[0]
    final val publishers // org.ton.block/LibDescr.publishers|{}publishers[0]
        final fun <get-publishers>(): org.ton.hashmap/HmEdge<kotlin/Unit> // org.ton.block/LibDescr.publishers.<get-publishers>|<get-publishers>(){}[0]

    final fun component1(): org.ton.cell/Cell // org.ton.block/LibDescr.component1|component1(){}[0]
    final fun component2(): org.ton.hashmap/HmEdge<kotlin/Unit> // org.ton.block/LibDescr.component2|component2(){}[0]
    final fun copy(org.ton.cell/Cell = ..., org.ton.hashmap/HmEdge<kotlin/Unit> = ...): org.ton.block/LibDescr // org.ton.block/LibDescr.copy|copy(org.ton.cell.Cell;org.ton.hashmap.HmEdge<kotlin.Unit>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/LibDescr.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/LibDescr.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/LibDescr.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/LibDescr> { // org.ton.block/LibDescr.Companion|null[0]
        final fun createCell(org.ton.block/LibDescr): org.ton.cell/Cell // org.ton.block/LibDescr.Companion.createCell|createCell(org.ton.block.LibDescr){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/LibDescr // org.ton.block/LibDescr.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/LibDescr // org.ton.block/LibDescr.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/LibDescr // org.ton.block/LibDescr.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/LibDescr) // org.ton.block/LibDescr.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.LibDescr){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/LibDescr, org.ton.kotlin.cell/CellContext) // org.ton.block/LibDescr.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.LibDescr;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/LibDescr> // org.ton.block/LibDescr.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/LibRefHash : org.ton.block/LibRef { // org.ton.block/LibRefHash|null[0]
    constructor <init>(org.ton.bitstring/BitString) // org.ton.block/LibRefHash.<init>|<init>(org.ton.bitstring.BitString){}[0]

    final val lib_hash // org.ton.block/LibRefHash.lib_hash|{}lib_hash[0]
        final fun <get-lib_hash>(): org.ton.bitstring/BitString // org.ton.block/LibRefHash.lib_hash.<get-lib_hash>|<get-lib_hash>(){}[0]

    final fun component1(): org.ton.bitstring/BitString // org.ton.block/LibRefHash.component1|component1(){}[0]
    final fun copy(org.ton.bitstring/BitString = ...): org.ton.block/LibRefHash // org.ton.block/LibRefHash.copy|copy(org.ton.bitstring.BitString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/LibRefHash.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/LibRefHash.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/LibRefHash.toString|toString(){}[0]
}

final class org.ton.block/LibRefRef : org.ton.block/LibRef { // org.ton.block/LibRefRef|null[0]
    constructor <init>(org.ton.cell/Cell) // org.ton.block/LibRefRef.<init>|<init>(org.ton.cell.Cell){}[0]

    final val library // org.ton.block/LibRefRef.library|{}library[0]
        final fun <get-library>(): org.ton.cell/Cell // org.ton.block/LibRefRef.library.<get-library>|<get-library>(){}[0]

    final fun component1(): org.ton.cell/Cell // org.ton.block/LibRefRef.component1|component1(){}[0]
    final fun copy(org.ton.cell/Cell = ...): org.ton.block/LibRefRef // org.ton.block/LibRefRef.copy|copy(org.ton.cell.Cell){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/LibRefRef.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/LibRefRef.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/LibRefRef.toString|toString(){}[0]
}

final class org.ton.block/McBlockExtra : org.ton.tlb/TlbObject { // org.ton.block/McBlockExtra|null[0]
    constructor <init>(kotlin/Boolean, org.ton.hashmap/HashMapE<org.ton.block/BinTree<org.ton.block/ShardDescr>>, org.ton.hashmap/HashmapAugE<org.ton.block/ShardFeeCreated, org.ton.block/ShardFeeCreated>, org.ton.tlb/CellRef<org.ton.block/McBlockExtraAux>, org.ton.block/ConfigParams?) // org.ton.block/McBlockExtra.<init>|<init>(kotlin.Boolean;org.ton.hashmap.HashMapE<org.ton.block.BinTree<org.ton.block.ShardDescr>>;org.ton.hashmap.HashmapAugE<org.ton.block.ShardFeeCreated,org.ton.block.ShardFeeCreated>;org.ton.tlb.CellRef<org.ton.block.McBlockExtraAux>;org.ton.block.ConfigParams?){}[0]

    final val config // org.ton.block/McBlockExtra.config|{}config[0]
        final fun <get-config>(): org.ton.block/ConfigParams? // org.ton.block/McBlockExtra.config.<get-config>|<get-config>(){}[0]
    final val keyBlock // org.ton.block/McBlockExtra.keyBlock|{}keyBlock[0]
        final fun <get-keyBlock>(): kotlin/Boolean // org.ton.block/McBlockExtra.keyBlock.<get-keyBlock>|<get-keyBlock>(){}[0]
    final val r1 // org.ton.block/McBlockExtra.r1|{}r1[0]
        final fun <get-r1>(): org.ton.tlb/CellRef<org.ton.block/McBlockExtraAux> // org.ton.block/McBlockExtra.r1.<get-r1>|<get-r1>(){}[0]
    final val shardFees // org.ton.block/McBlockExtra.shardFees|{}shardFees[0]
        final fun <get-shardFees>(): org.ton.hashmap/HashmapAugE<org.ton.block/ShardFeeCreated, org.ton.block/ShardFeeCreated> // org.ton.block/McBlockExtra.shardFees.<get-shardFees>|<get-shardFees>(){}[0]
    final val shardHashes // org.ton.block/McBlockExtra.shardHashes|{}shardHashes[0]
        final fun <get-shardHashes>(): org.ton.hashmap/HashMapE<org.ton.block/BinTree<org.ton.block/ShardDescr>> // org.ton.block/McBlockExtra.shardHashes.<get-shardHashes>|<get-shardHashes>(){}[0]

    final fun component1(): kotlin/Boolean // org.ton.block/McBlockExtra.component1|component1(){}[0]
    final fun component2(): org.ton.hashmap/HashMapE<org.ton.block/BinTree<org.ton.block/ShardDescr>> // org.ton.block/McBlockExtra.component2|component2(){}[0]
    final fun component3(): org.ton.hashmap/HashmapAugE<org.ton.block/ShardFeeCreated, org.ton.block/ShardFeeCreated> // org.ton.block/McBlockExtra.component3|component3(){}[0]
    final fun component4(): org.ton.tlb/CellRef<org.ton.block/McBlockExtraAux> // org.ton.block/McBlockExtra.component4|component4(){}[0]
    final fun component5(): org.ton.block/ConfigParams? // org.ton.block/McBlockExtra.component5|component5(){}[0]
    final fun copy(kotlin/Boolean = ..., org.ton.hashmap/HashMapE<org.ton.block/BinTree<org.ton.block/ShardDescr>> = ..., org.ton.hashmap/HashmapAugE<org.ton.block/ShardFeeCreated, org.ton.block/ShardFeeCreated> = ..., org.ton.tlb/CellRef<org.ton.block/McBlockExtraAux> = ..., org.ton.block/ConfigParams? = ...): org.ton.block/McBlockExtra // org.ton.block/McBlockExtra.copy|copy(kotlin.Boolean;org.ton.hashmap.HashMapE<org.ton.block.BinTree<org.ton.block.ShardDescr>>;org.ton.hashmap.HashmapAugE<org.ton.block.ShardFeeCreated,org.ton.block.ShardFeeCreated>;org.ton.tlb.CellRef<org.ton.block.McBlockExtraAux>;org.ton.block.ConfigParams?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/McBlockExtra.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/McBlockExtra.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/McBlockExtra.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/McBlockExtra.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbCombinatorProvider<org.ton.block/McBlockExtra> { // org.ton.block/McBlockExtra.Companion|null[0]
        final fun createCell(org.ton.block/McBlockExtra): org.ton.cell/Cell // org.ton.block/McBlockExtra.Companion.createCell|createCell(org.ton.block.McBlockExtra){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/McBlockExtra // org.ton.block/McBlockExtra.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/McBlockExtra // org.ton.block/McBlockExtra.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/McBlockExtra // org.ton.block/McBlockExtra.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/McBlockExtra) // org.ton.block/McBlockExtra.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.McBlockExtra){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/McBlockExtra, org.ton.kotlin.cell/CellContext) // org.ton.block/McBlockExtra.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.McBlockExtra;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCombinator(): org.ton.tlb/TlbCombinator<org.ton.block/McBlockExtra> // org.ton.block/McBlockExtra.Companion.tlbCombinator|tlbCombinator(){}[0]
    }
}

final class org.ton.block/McBlockExtraAux : org.ton.tlb/TlbObject { // org.ton.block/McBlockExtraAux|null[0]
    constructor <init>(org.ton.hashmap/HashMapE<org.ton.block/CryptoSignaturePair>, org.ton.block/Maybe<org.ton.tlb/CellRef<org.ton.block/InMsg>>, org.ton.block/Maybe<org.ton.tlb/CellRef<org.ton.block/InMsg>>) // org.ton.block/McBlockExtraAux.<init>|<init>(org.ton.hashmap.HashMapE<org.ton.block.CryptoSignaturePair>;org.ton.block.Maybe<org.ton.tlb.CellRef<org.ton.block.InMsg>>;org.ton.block.Maybe<org.ton.tlb.CellRef<org.ton.block.InMsg>>){}[0]

    final val mintMsg // org.ton.block/McBlockExtraAux.mintMsg|{}mintMsg[0]
        final fun <get-mintMsg>(): org.ton.block/Maybe<org.ton.tlb/CellRef<org.ton.block/InMsg>> // org.ton.block/McBlockExtraAux.mintMsg.<get-mintMsg>|<get-mintMsg>(){}[0]
    final val prevBlkSignatures // org.ton.block/McBlockExtraAux.prevBlkSignatures|{}prevBlkSignatures[0]
        final fun <get-prevBlkSignatures>(): org.ton.hashmap/HashMapE<org.ton.block/CryptoSignaturePair> // org.ton.block/McBlockExtraAux.prevBlkSignatures.<get-prevBlkSignatures>|<get-prevBlkSignatures>(){}[0]
    final val recoverCreateMsg // org.ton.block/McBlockExtraAux.recoverCreateMsg|{}recoverCreateMsg[0]
        final fun <get-recoverCreateMsg>(): org.ton.block/Maybe<org.ton.tlb/CellRef<org.ton.block/InMsg>> // org.ton.block/McBlockExtraAux.recoverCreateMsg.<get-recoverCreateMsg>|<get-recoverCreateMsg>(){}[0]

    final fun component1(): org.ton.hashmap/HashMapE<org.ton.block/CryptoSignaturePair> // org.ton.block/McBlockExtraAux.component1|component1(){}[0]
    final fun component2(): org.ton.block/Maybe<org.ton.tlb/CellRef<org.ton.block/InMsg>> // org.ton.block/McBlockExtraAux.component2|component2(){}[0]
    final fun component3(): org.ton.block/Maybe<org.ton.tlb/CellRef<org.ton.block/InMsg>> // org.ton.block/McBlockExtraAux.component3|component3(){}[0]
    final fun copy(org.ton.hashmap/HashMapE<org.ton.block/CryptoSignaturePair> = ..., org.ton.block/Maybe<org.ton.tlb/CellRef<org.ton.block/InMsg>> = ..., org.ton.block/Maybe<org.ton.tlb/CellRef<org.ton.block/InMsg>> = ...): org.ton.block/McBlockExtraAux // org.ton.block/McBlockExtraAux.copy|copy(org.ton.hashmap.HashMapE<org.ton.block.CryptoSignaturePair>;org.ton.block.Maybe<org.ton.tlb.CellRef<org.ton.block.InMsg>>;org.ton.block.Maybe<org.ton.tlb.CellRef<org.ton.block.InMsg>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/McBlockExtraAux.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/McBlockExtraAux.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/McBlockExtraAux.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/McBlockExtraAux.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/McBlockExtraAux> { // org.ton.block/McBlockExtraAux.Companion|null[0]
        final fun createCell(org.ton.block/McBlockExtraAux): org.ton.cell/Cell // org.ton.block/McBlockExtraAux.Companion.createCell|createCell(org.ton.block.McBlockExtraAux){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/McBlockExtraAux // org.ton.block/McBlockExtraAux.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/McBlockExtraAux // org.ton.block/McBlockExtraAux.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/McBlockExtraAux // org.ton.block/McBlockExtraAux.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/McBlockExtraAux) // org.ton.block/McBlockExtraAux.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.McBlockExtraAux){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/McBlockExtraAux, org.ton.kotlin.cell/CellContext) // org.ton.block/McBlockExtraAux.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.McBlockExtraAux;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/McBlockExtraAux> // org.ton.block/McBlockExtraAux.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/McStateExtra : org.ton.tlb/TlbObject { // org.ton.block/McStateExtra|null[0]
    constructor <init>(org.ton.block/ShardHashes, org.ton.block/ConfigParams, org.ton.tlb/CellRef<org.ton.block/McStateExtraAux>, org.ton.block/CurrencyCollection) // org.ton.block/McStateExtra.<init>|<init>(org.ton.block.ShardHashes;org.ton.block.ConfigParams;org.ton.tlb.CellRef<org.ton.block.McStateExtraAux>;org.ton.block.CurrencyCollection){}[0]

    final val config // org.ton.block/McStateExtra.config|{}config[0]
        final fun <get-config>(): org.ton.block/ConfigParams // org.ton.block/McStateExtra.config.<get-config>|<get-config>(){}[0]
    final val globalBalance // org.ton.block/McStateExtra.globalBalance|{}globalBalance[0]
        final fun <get-globalBalance>(): org.ton.block/CurrencyCollection // org.ton.block/McStateExtra.globalBalance.<get-globalBalance>|<get-globalBalance>(){}[0]
    final val r1 // org.ton.block/McStateExtra.r1|{}r1[0]
        final fun <get-r1>(): org.ton.tlb/CellRef<org.ton.block/McStateExtraAux> // org.ton.block/McStateExtra.r1.<get-r1>|<get-r1>(){}[0]
    final val shardHashes // org.ton.block/McStateExtra.shardHashes|{}shardHashes[0]
        final fun <get-shardHashes>(): org.ton.block/ShardHashes // org.ton.block/McStateExtra.shardHashes.<get-shardHashes>|<get-shardHashes>(){}[0]

    final fun component1(): org.ton.block/ShardHashes // org.ton.block/McStateExtra.component1|component1(){}[0]
    final fun component2(): org.ton.block/ConfigParams // org.ton.block/McStateExtra.component2|component2(){}[0]
    final fun component3(): org.ton.tlb/CellRef<org.ton.block/McStateExtraAux> // org.ton.block/McStateExtra.component3|component3(){}[0]
    final fun component4(): org.ton.block/CurrencyCollection // org.ton.block/McStateExtra.component4|component4(){}[0]
    final fun copy(org.ton.block/ShardHashes = ..., org.ton.block/ConfigParams = ..., org.ton.tlb/CellRef<org.ton.block/McStateExtraAux> = ..., org.ton.block/CurrencyCollection = ...): org.ton.block/McStateExtra // org.ton.block/McStateExtra.copy|copy(org.ton.block.ShardHashes;org.ton.block.ConfigParams;org.ton.tlb.CellRef<org.ton.block.McStateExtraAux>;org.ton.block.CurrencyCollection){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/McStateExtra.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/McStateExtra.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/McStateExtra.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/McStateExtra.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbCombinatorProvider<org.ton.block/McStateExtra> { // org.ton.block/McStateExtra.Companion|null[0]
        final fun createCell(org.ton.block/McStateExtra): org.ton.cell/Cell // org.ton.block/McStateExtra.Companion.createCell|createCell(org.ton.block.McStateExtra){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/McStateExtra // org.ton.block/McStateExtra.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/McStateExtra // org.ton.block/McStateExtra.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/McStateExtra // org.ton.block/McStateExtra.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/McStateExtra) // org.ton.block/McStateExtra.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.McStateExtra){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/McStateExtra, org.ton.kotlin.cell/CellContext) // org.ton.block/McStateExtra.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.McStateExtra;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCombinator(): org.ton.tlb/TlbCombinator<org.ton.block/McStateExtra> // org.ton.block/McStateExtra.Companion.tlbCombinator|tlbCombinator(){}[0]
    }
}

final class org.ton.block/McStateExtraAux : org.ton.tlb/TlbObject { // org.ton.block/McStateExtraAux|null[0]
    constructor <init>(kotlin/Int, org.ton.block/ValidatorInfo, org.ton.block/OldMcBlocksInfo, kotlin/Boolean, org.ton.block/Maybe<org.ton.block/ExtBlkRef>, org.ton.block/BlockCreateStats?) // org.ton.block/McStateExtraAux.<init>|<init>(kotlin.Int;org.ton.block.ValidatorInfo;org.ton.block.OldMcBlocksInfo;kotlin.Boolean;org.ton.block.Maybe<org.ton.block.ExtBlkRef>;org.ton.block.BlockCreateStats?){}[0]

    final val afterKeyBlock // org.ton.block/McStateExtraAux.afterKeyBlock|{}afterKeyBlock[0]
        final fun <get-afterKeyBlock>(): kotlin/Boolean // org.ton.block/McStateExtraAux.afterKeyBlock.<get-afterKeyBlock>|<get-afterKeyBlock>(){}[0]
    final val blockCreateStats // org.ton.block/McStateExtraAux.blockCreateStats|{}blockCreateStats[0]
        final fun <get-blockCreateStats>(): org.ton.block/BlockCreateStats? // org.ton.block/McStateExtraAux.blockCreateStats.<get-blockCreateStats>|<get-blockCreateStats>(){}[0]
    final val flags // org.ton.block/McStateExtraAux.flags|{}flags[0]
        final fun <get-flags>(): kotlin/Int // org.ton.block/McStateExtraAux.flags.<get-flags>|<get-flags>(){}[0]
    final val lastKeyBlock // org.ton.block/McStateExtraAux.lastKeyBlock|{}lastKeyBlock[0]
        final fun <get-lastKeyBlock>(): org.ton.block/Maybe<org.ton.block/ExtBlkRef> // org.ton.block/McStateExtraAux.lastKeyBlock.<get-lastKeyBlock>|<get-lastKeyBlock>(){}[0]
    final val prevBlocks // org.ton.block/McStateExtraAux.prevBlocks|{}prevBlocks[0]
        final fun <get-prevBlocks>(): org.ton.block/OldMcBlocksInfo // org.ton.block/McStateExtraAux.prevBlocks.<get-prevBlocks>|<get-prevBlocks>(){}[0]
    final val validatorInfo // org.ton.block/McStateExtraAux.validatorInfo|{}validatorInfo[0]
        final fun <get-validatorInfo>(): org.ton.block/ValidatorInfo // org.ton.block/McStateExtraAux.validatorInfo.<get-validatorInfo>|<get-validatorInfo>(){}[0]

    final fun component1(): kotlin/Int // org.ton.block/McStateExtraAux.component1|component1(){}[0]
    final fun component2(): org.ton.block/ValidatorInfo // org.ton.block/McStateExtraAux.component2|component2(){}[0]
    final fun component3(): org.ton.block/OldMcBlocksInfo // org.ton.block/McStateExtraAux.component3|component3(){}[0]
    final fun component4(): kotlin/Boolean // org.ton.block/McStateExtraAux.component4|component4(){}[0]
    final fun component5(): org.ton.block/Maybe<org.ton.block/ExtBlkRef> // org.ton.block/McStateExtraAux.component5|component5(){}[0]
    final fun component6(): org.ton.block/BlockCreateStats? // org.ton.block/McStateExtraAux.component6|component6(){}[0]
    final fun copy(kotlin/Int = ..., org.ton.block/ValidatorInfo = ..., org.ton.block/OldMcBlocksInfo = ..., kotlin/Boolean = ..., org.ton.block/Maybe<org.ton.block/ExtBlkRef> = ..., org.ton.block/BlockCreateStats? = ...): org.ton.block/McStateExtraAux // org.ton.block/McStateExtraAux.copy|copy(kotlin.Int;org.ton.block.ValidatorInfo;org.ton.block.OldMcBlocksInfo;kotlin.Boolean;org.ton.block.Maybe<org.ton.block.ExtBlkRef>;org.ton.block.BlockCreateStats?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/McStateExtraAux.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/McStateExtraAux.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/McStateExtraAux.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/McStateExtraAux.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/McStateExtraAux> { // org.ton.block/McStateExtraAux.Companion|null[0]
        final fun createCell(org.ton.block/McStateExtraAux): org.ton.cell/Cell // org.ton.block/McStateExtraAux.Companion.createCell|createCell(org.ton.block.McStateExtraAux){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/McStateExtraAux // org.ton.block/McStateExtraAux.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/McStateExtraAux // org.ton.block/McStateExtraAux.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/McStateExtraAux // org.ton.block/McStateExtraAux.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/McStateExtraAux) // org.ton.block/McStateExtraAux.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.McStateExtraAux){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/McStateExtraAux, org.ton.kotlin.cell/CellContext) // org.ton.block/McStateExtraAux.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.McStateExtraAux;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/McStateExtraAux> // org.ton.block/McStateExtraAux.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/MsgDiscardFin : org.ton.block/InMsg { // org.ton.block/MsgDiscardFin|null[0]
    constructor <init>(org.ton.tlb/CellRef<org.ton.block/MsgEnvelope>, kotlin/ULong, org.ton.block/Coins) // org.ton.block/MsgDiscardFin.<init>|<init>(org.ton.tlb.CellRef<org.ton.block.MsgEnvelope>;kotlin.ULong;org.ton.block.Coins){}[0]

    final val fwdFee // org.ton.block/MsgDiscardFin.fwdFee|{}fwdFee[0]
        final fun <get-fwdFee>(): org.ton.block/Coins // org.ton.block/MsgDiscardFin.fwdFee.<get-fwdFee>|<get-fwdFee>(){}[0]
    final val inMsg // org.ton.block/MsgDiscardFin.inMsg|{}inMsg[0]
        final fun <get-inMsg>(): org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> // org.ton.block/MsgDiscardFin.inMsg.<get-inMsg>|<get-inMsg>(){}[0]
    final val transactionId // org.ton.block/MsgDiscardFin.transactionId|{}transactionId[0]
        final fun <get-transactionId>(): kotlin/ULong // org.ton.block/MsgDiscardFin.transactionId.<get-transactionId>|<get-transactionId>(){}[0]

    final fun component1(): org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> // org.ton.block/MsgDiscardFin.component1|component1(){}[0]
    final fun component2(): kotlin/ULong // org.ton.block/MsgDiscardFin.component2|component2(){}[0]
    final fun component3(): org.ton.block/Coins // org.ton.block/MsgDiscardFin.component3|component3(){}[0]
    final fun copy(org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> = ..., kotlin/ULong = ..., org.ton.block/Coins = ...): org.ton.block/MsgDiscardFin // org.ton.block/MsgDiscardFin.copy|copy(org.ton.tlb.CellRef<org.ton.block.MsgEnvelope>;kotlin.ULong;org.ton.block.Coins){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/MsgDiscardFin.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/MsgDiscardFin.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/MsgDiscardFin.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/MsgDiscardFin.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/MsgDiscardFin> { // org.ton.block/MsgDiscardFin.Companion|null[0]
        final fun createCell(org.ton.block/MsgDiscardFin): org.ton.cell/Cell // org.ton.block/MsgDiscardFin.Companion.createCell|createCell(org.ton.block.MsgDiscardFin){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/MsgDiscardFin // org.ton.block/MsgDiscardFin.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/MsgDiscardFin // org.ton.block/MsgDiscardFin.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/MsgDiscardFin // org.ton.block/MsgDiscardFin.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgDiscardFin) // org.ton.block/MsgDiscardFin.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgDiscardFin){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgDiscardFin, org.ton.kotlin.cell/CellContext) // org.ton.block/MsgDiscardFin.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgDiscardFin;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/MsgDiscardFin> // org.ton.block/MsgDiscardFin.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/MsgDiscardTr : org.ton.block/InMsg { // org.ton.block/MsgDiscardTr|null[0]
    constructor <init>(org.ton.tlb/CellRef<org.ton.block/MsgEnvelope>, kotlin/ULong, org.ton.block/Coins, org.ton.cell/Cell) // org.ton.block/MsgDiscardTr.<init>|<init>(org.ton.tlb.CellRef<org.ton.block.MsgEnvelope>;kotlin.ULong;org.ton.block.Coins;org.ton.cell.Cell){}[0]

    final val fwdFee // org.ton.block/MsgDiscardTr.fwdFee|{}fwdFee[0]
        final fun <get-fwdFee>(): org.ton.block/Coins // org.ton.block/MsgDiscardTr.fwdFee.<get-fwdFee>|<get-fwdFee>(){}[0]
    final val inMsg // org.ton.block/MsgDiscardTr.inMsg|{}inMsg[0]
        final fun <get-inMsg>(): org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> // org.ton.block/MsgDiscardTr.inMsg.<get-inMsg>|<get-inMsg>(){}[0]
    final val proofDelivered // org.ton.block/MsgDiscardTr.proofDelivered|{}proofDelivered[0]
        final fun <get-proofDelivered>(): org.ton.cell/Cell // org.ton.block/MsgDiscardTr.proofDelivered.<get-proofDelivered>|<get-proofDelivered>(){}[0]
    final val transactionId // org.ton.block/MsgDiscardTr.transactionId|{}transactionId[0]
        final fun <get-transactionId>(): kotlin/ULong // org.ton.block/MsgDiscardTr.transactionId.<get-transactionId>|<get-transactionId>(){}[0]

    final fun component1(): org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> // org.ton.block/MsgDiscardTr.component1|component1(){}[0]
    final fun component2(): kotlin/ULong // org.ton.block/MsgDiscardTr.component2|component2(){}[0]
    final fun component3(): org.ton.block/Coins // org.ton.block/MsgDiscardTr.component3|component3(){}[0]
    final fun component4(): org.ton.cell/Cell // org.ton.block/MsgDiscardTr.component4|component4(){}[0]
    final fun copy(org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> = ..., kotlin/ULong = ..., org.ton.block/Coins = ..., org.ton.cell/Cell = ...): org.ton.block/MsgDiscardTr // org.ton.block/MsgDiscardTr.copy|copy(org.ton.tlb.CellRef<org.ton.block.MsgEnvelope>;kotlin.ULong;org.ton.block.Coins;org.ton.cell.Cell){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/MsgDiscardTr.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/MsgDiscardTr.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/MsgDiscardTr.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/MsgDiscardTr.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/MsgDiscardTr> { // org.ton.block/MsgDiscardTr.Companion|null[0]
        final fun createCell(org.ton.block/MsgDiscardTr): org.ton.cell/Cell // org.ton.block/MsgDiscardTr.Companion.createCell|createCell(org.ton.block.MsgDiscardTr){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/MsgDiscardTr // org.ton.block/MsgDiscardTr.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/MsgDiscardTr // org.ton.block/MsgDiscardTr.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/MsgDiscardTr // org.ton.block/MsgDiscardTr.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgDiscardTr) // org.ton.block/MsgDiscardTr.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgDiscardTr){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgDiscardTr, org.ton.kotlin.cell/CellContext) // org.ton.block/MsgDiscardTr.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgDiscardTr;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/MsgDiscardTr> // org.ton.block/MsgDiscardTr.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/MsgEnvelope : org.ton.tlb/TlbObject { // org.ton.block/MsgEnvelope|null[0]
    constructor <init>(org.ton.block/IntermediateAddress, org.ton.block/IntermediateAddress, org.ton.block/Coins, org.ton.tlb/CellRef<org.ton.block/Message<org.ton.cell/Cell>>) // org.ton.block/MsgEnvelope.<init>|<init>(org.ton.block.IntermediateAddress;org.ton.block.IntermediateAddress;org.ton.block.Coins;org.ton.tlb.CellRef<org.ton.block.Message<org.ton.cell.Cell>>){}[0]

    final val curAddr // org.ton.block/MsgEnvelope.curAddr|{}curAddr[0]
        final fun <get-curAddr>(): org.ton.block/IntermediateAddress // org.ton.block/MsgEnvelope.curAddr.<get-curAddr>|<get-curAddr>(){}[0]
    final val fwdFeeRemaining // org.ton.block/MsgEnvelope.fwdFeeRemaining|{}fwdFeeRemaining[0]
        final fun <get-fwdFeeRemaining>(): org.ton.block/Coins // org.ton.block/MsgEnvelope.fwdFeeRemaining.<get-fwdFeeRemaining>|<get-fwdFeeRemaining>(){}[0]
    final val msg // org.ton.block/MsgEnvelope.msg|{}msg[0]
        final fun <get-msg>(): org.ton.tlb/CellRef<org.ton.block/Message<org.ton.cell/Cell>> // org.ton.block/MsgEnvelope.msg.<get-msg>|<get-msg>(){}[0]
    final val nextAddr // org.ton.block/MsgEnvelope.nextAddr|{}nextAddr[0]
        final fun <get-nextAddr>(): org.ton.block/IntermediateAddress // org.ton.block/MsgEnvelope.nextAddr.<get-nextAddr>|<get-nextAddr>(){}[0]

    final fun component1(): org.ton.block/IntermediateAddress // org.ton.block/MsgEnvelope.component1|component1(){}[0]
    final fun component2(): org.ton.block/IntermediateAddress // org.ton.block/MsgEnvelope.component2|component2(){}[0]
    final fun component3(): org.ton.block/Coins // org.ton.block/MsgEnvelope.component3|component3(){}[0]
    final fun component4(): org.ton.tlb/CellRef<org.ton.block/Message<org.ton.cell/Cell>> // org.ton.block/MsgEnvelope.component4|component4(){}[0]
    final fun copy(org.ton.block/IntermediateAddress = ..., org.ton.block/IntermediateAddress = ..., org.ton.block/Coins = ..., org.ton.tlb/CellRef<org.ton.block/Message<org.ton.cell/Cell>> = ...): org.ton.block/MsgEnvelope // org.ton.block/MsgEnvelope.copy|copy(org.ton.block.IntermediateAddress;org.ton.block.IntermediateAddress;org.ton.block.Coins;org.ton.tlb.CellRef<org.ton.block.Message<org.ton.cell.Cell>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/MsgEnvelope.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/MsgEnvelope.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/MsgEnvelope.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/MsgEnvelope.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbCombinatorProvider<org.ton.block/MsgEnvelope> { // org.ton.block/MsgEnvelope.Companion|null[0]
        final fun createCell(org.ton.block/MsgEnvelope): org.ton.cell/Cell // org.ton.block/MsgEnvelope.Companion.createCell|createCell(org.ton.block.MsgEnvelope){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/MsgEnvelope // org.ton.block/MsgEnvelope.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/MsgEnvelope // org.ton.block/MsgEnvelope.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/MsgEnvelope // org.ton.block/MsgEnvelope.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgEnvelope) // org.ton.block/MsgEnvelope.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgEnvelope){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgEnvelope, org.ton.kotlin.cell/CellContext) // org.ton.block/MsgEnvelope.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgEnvelope;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCombinator(): org.ton.tlb/TlbCombinator<org.ton.block/MsgEnvelope> // org.ton.block/MsgEnvelope.Companion.tlbCombinator|tlbCombinator(){}[0]
    }
}

final class org.ton.block/MsgExportDeq : org.ton.block/OutMsg { // org.ton.block/MsgExportDeq|null[0]
    constructor <init>(org.ton.tlb/CellRef<org.ton.block/MsgEnvelope>, kotlin/ULong) // org.ton.block/MsgExportDeq.<init>|<init>(org.ton.tlb.CellRef<org.ton.block.MsgEnvelope>;kotlin.ULong){}[0]

    final val importBlockLt // org.ton.block/MsgExportDeq.importBlockLt|{}importBlockLt[0]
        final fun <get-importBlockLt>(): kotlin/ULong // org.ton.block/MsgExportDeq.importBlockLt.<get-importBlockLt>|<get-importBlockLt>(){}[0]
    final val outMsg // org.ton.block/MsgExportDeq.outMsg|{}outMsg[0]
        final fun <get-outMsg>(): org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> // org.ton.block/MsgExportDeq.outMsg.<get-outMsg>|<get-outMsg>(){}[0]

    final fun component1(): org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> // org.ton.block/MsgExportDeq.component1|component1(){}[0]
    final fun component2(): kotlin/ULong // org.ton.block/MsgExportDeq.component2|component2(){}[0]
    final fun copy(org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> = ..., kotlin/ULong = ...): org.ton.block/MsgExportDeq // org.ton.block/MsgExportDeq.copy|copy(org.ton.tlb.CellRef<org.ton.block.MsgEnvelope>;kotlin.ULong){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/MsgExportDeq.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/MsgExportDeq.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/MsgExportDeq.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/MsgExportDeq.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/MsgExportDeq> { // org.ton.block/MsgExportDeq.Companion|null[0]
        final fun createCell(org.ton.block/MsgExportDeq): org.ton.cell/Cell // org.ton.block/MsgExportDeq.Companion.createCell|createCell(org.ton.block.MsgExportDeq){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/MsgExportDeq // org.ton.block/MsgExportDeq.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/MsgExportDeq // org.ton.block/MsgExportDeq.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/MsgExportDeq // org.ton.block/MsgExportDeq.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgExportDeq) // org.ton.block/MsgExportDeq.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgExportDeq){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgExportDeq, org.ton.kotlin.cell/CellContext) // org.ton.block/MsgExportDeq.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgExportDeq;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/MsgExportDeq> // org.ton.block/MsgExportDeq.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/MsgExportDeqImm : org.ton.block/OutMsg { // org.ton.block/MsgExportDeqImm|null[0]
    constructor <init>(org.ton.tlb/CellRef<org.ton.block/MsgEnvelope>, org.ton.tlb/CellRef<org.ton.block/InMsg>) // org.ton.block/MsgExportDeqImm.<init>|<init>(org.ton.tlb.CellRef<org.ton.block.MsgEnvelope>;org.ton.tlb.CellRef<org.ton.block.InMsg>){}[0]

    final val outMsg // org.ton.block/MsgExportDeqImm.outMsg|{}outMsg[0]
        final fun <get-outMsg>(): org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> // org.ton.block/MsgExportDeqImm.outMsg.<get-outMsg>|<get-outMsg>(){}[0]
    final val reimport // org.ton.block/MsgExportDeqImm.reimport|{}reimport[0]
        final fun <get-reimport>(): org.ton.tlb/CellRef<org.ton.block/InMsg> // org.ton.block/MsgExportDeqImm.reimport.<get-reimport>|<get-reimport>(){}[0]

    final fun component1(): org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> // org.ton.block/MsgExportDeqImm.component1|component1(){}[0]
    final fun component2(): org.ton.tlb/CellRef<org.ton.block/InMsg> // org.ton.block/MsgExportDeqImm.component2|component2(){}[0]
    final fun copy(org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> = ..., org.ton.tlb/CellRef<org.ton.block/InMsg> = ...): org.ton.block/MsgExportDeqImm // org.ton.block/MsgExportDeqImm.copy|copy(org.ton.tlb.CellRef<org.ton.block.MsgEnvelope>;org.ton.tlb.CellRef<org.ton.block.InMsg>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/MsgExportDeqImm.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/MsgExportDeqImm.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/MsgExportDeqImm.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/MsgExportDeqImm.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/MsgExportDeqImm> { // org.ton.block/MsgExportDeqImm.Companion|null[0]
        final fun createCell(org.ton.block/MsgExportDeqImm): org.ton.cell/Cell // org.ton.block/MsgExportDeqImm.Companion.createCell|createCell(org.ton.block.MsgExportDeqImm){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/MsgExportDeqImm // org.ton.block/MsgExportDeqImm.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/MsgExportDeqImm // org.ton.block/MsgExportDeqImm.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/MsgExportDeqImm // org.ton.block/MsgExportDeqImm.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgExportDeqImm) // org.ton.block/MsgExportDeqImm.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgExportDeqImm){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgExportDeqImm, org.ton.kotlin.cell/CellContext) // org.ton.block/MsgExportDeqImm.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgExportDeqImm;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/MsgExportDeqImm> // org.ton.block/MsgExportDeqImm.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/MsgExportDeqShort : org.ton.block/OutMsg { // org.ton.block/MsgExportDeqShort|null[0]
    constructor <init>(org.ton.bitstring/BitString, kotlin/Int, kotlin/ULong, kotlin/ULong) // org.ton.block/MsgExportDeqShort.<init>|<init>(org.ton.bitstring.BitString;kotlin.Int;kotlin.ULong;kotlin.ULong){}[0]

    final val importBlockLt // org.ton.block/MsgExportDeqShort.importBlockLt|{}importBlockLt[0]
        final fun <get-importBlockLt>(): kotlin/ULong // org.ton.block/MsgExportDeqShort.importBlockLt.<get-importBlockLt>|<get-importBlockLt>(){}[0]
    final val msgEnvHash // org.ton.block/MsgExportDeqShort.msgEnvHash|{}msgEnvHash[0]
        final fun <get-msgEnvHash>(): org.ton.bitstring/BitString // org.ton.block/MsgExportDeqShort.msgEnvHash.<get-msgEnvHash>|<get-msgEnvHash>(){}[0]
    final val nextAddrPfx // org.ton.block/MsgExportDeqShort.nextAddrPfx|{}nextAddrPfx[0]
        final fun <get-nextAddrPfx>(): kotlin/ULong // org.ton.block/MsgExportDeqShort.nextAddrPfx.<get-nextAddrPfx>|<get-nextAddrPfx>(){}[0]
    final val nextWorkchain // org.ton.block/MsgExportDeqShort.nextWorkchain|{}nextWorkchain[0]
        final fun <get-nextWorkchain>(): kotlin/Int // org.ton.block/MsgExportDeqShort.nextWorkchain.<get-nextWorkchain>|<get-nextWorkchain>(){}[0]

    final fun component1(): org.ton.bitstring/BitString // org.ton.block/MsgExportDeqShort.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.block/MsgExportDeqShort.component2|component2(){}[0]
    final fun component3(): kotlin/ULong // org.ton.block/MsgExportDeqShort.component3|component3(){}[0]
    final fun component4(): kotlin/ULong // org.ton.block/MsgExportDeqShort.component4|component4(){}[0]
    final fun copy(org.ton.bitstring/BitString = ..., kotlin/Int = ..., kotlin/ULong = ..., kotlin/ULong = ...): org.ton.block/MsgExportDeqShort // org.ton.block/MsgExportDeqShort.copy|copy(org.ton.bitstring.BitString;kotlin.Int;kotlin.ULong;kotlin.ULong){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/MsgExportDeqShort.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/MsgExportDeqShort.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/MsgExportDeqShort.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/MsgExportDeqShort.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/MsgExportDeqShort> { // org.ton.block/MsgExportDeqShort.Companion|null[0]
        final fun createCell(org.ton.block/MsgExportDeqShort): org.ton.cell/Cell // org.ton.block/MsgExportDeqShort.Companion.createCell|createCell(org.ton.block.MsgExportDeqShort){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/MsgExportDeqShort // org.ton.block/MsgExportDeqShort.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/MsgExportDeqShort // org.ton.block/MsgExportDeqShort.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/MsgExportDeqShort // org.ton.block/MsgExportDeqShort.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgExportDeqShort) // org.ton.block/MsgExportDeqShort.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgExportDeqShort){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgExportDeqShort, org.ton.kotlin.cell/CellContext) // org.ton.block/MsgExportDeqShort.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgExportDeqShort;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/MsgExportDeqShort> // org.ton.block/MsgExportDeqShort.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/MsgExportExt : org.ton.block/OutMsg { // org.ton.block/MsgExportExt|null[0]
    constructor <init>(org.ton.tlb/CellRef<org.ton.block/Message<org.ton.cell/Cell>>, org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction>) // org.ton.block/MsgExportExt.<init>|<init>(org.ton.tlb.CellRef<org.ton.block.Message<org.ton.cell.Cell>>;org.ton.tlb.CellRef<org.ton.kotlin.transaction.Transaction>){}[0]

    final val msg // org.ton.block/MsgExportExt.msg|{}msg[0]
        final fun <get-msg>(): org.ton.tlb/CellRef<org.ton.block/Message<org.ton.cell/Cell>> // org.ton.block/MsgExportExt.msg.<get-msg>|<get-msg>(){}[0]
    final val transaction // org.ton.block/MsgExportExt.transaction|{}transaction[0]
        final fun <get-transaction>(): org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction> // org.ton.block/MsgExportExt.transaction.<get-transaction>|<get-transaction>(){}[0]

    final fun component1(): org.ton.tlb/CellRef<org.ton.block/Message<org.ton.cell/Cell>> // org.ton.block/MsgExportExt.component1|component1(){}[0]
    final fun component2(): org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction> // org.ton.block/MsgExportExt.component2|component2(){}[0]
    final fun copy(org.ton.tlb/CellRef<org.ton.block/Message<org.ton.cell/Cell>> = ..., org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction> = ...): org.ton.block/MsgExportExt // org.ton.block/MsgExportExt.copy|copy(org.ton.tlb.CellRef<org.ton.block.Message<org.ton.cell.Cell>>;org.ton.tlb.CellRef<org.ton.kotlin.transaction.Transaction>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/MsgExportExt.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/MsgExportExt.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/MsgExportExt.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/MsgExportExt.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/MsgExportExt> { // org.ton.block/MsgExportExt.Companion|null[0]
        final fun createCell(org.ton.block/MsgExportExt): org.ton.cell/Cell // org.ton.block/MsgExportExt.Companion.createCell|createCell(org.ton.block.MsgExportExt){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/MsgExportExt // org.ton.block/MsgExportExt.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/MsgExportExt // org.ton.block/MsgExportExt.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/MsgExportExt // org.ton.block/MsgExportExt.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgExportExt) // org.ton.block/MsgExportExt.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgExportExt){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgExportExt, org.ton.kotlin.cell/CellContext) // org.ton.block/MsgExportExt.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgExportExt;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/MsgExportExt> // org.ton.block/MsgExportExt.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/MsgExportImm : org.ton.block/OutMsg, org.ton.tlb/TlbObject { // org.ton.block/MsgExportImm|null[0]
    constructor <init>(org.ton.tlb/CellRef<org.ton.block/MsgEnvelope>, org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction>, org.ton.tlb/CellRef<org.ton.block/InMsg>) // org.ton.block/MsgExportImm.<init>|<init>(org.ton.tlb.CellRef<org.ton.block.MsgEnvelope>;org.ton.tlb.CellRef<org.ton.kotlin.transaction.Transaction>;org.ton.tlb.CellRef<org.ton.block.InMsg>){}[0]

    final val outMsg // org.ton.block/MsgExportImm.outMsg|{}outMsg[0]
        final fun <get-outMsg>(): org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> // org.ton.block/MsgExportImm.outMsg.<get-outMsg>|<get-outMsg>(){}[0]
    final val reimport // org.ton.block/MsgExportImm.reimport|{}reimport[0]
        final fun <get-reimport>(): org.ton.tlb/CellRef<org.ton.block/InMsg> // org.ton.block/MsgExportImm.reimport.<get-reimport>|<get-reimport>(){}[0]
    final val transaction // org.ton.block/MsgExportImm.transaction|{}transaction[0]
        final fun <get-transaction>(): org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction> // org.ton.block/MsgExportImm.transaction.<get-transaction>|<get-transaction>(){}[0]

    final fun component1(): org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> // org.ton.block/MsgExportImm.component1|component1(){}[0]
    final fun component2(): org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction> // org.ton.block/MsgExportImm.component2|component2(){}[0]
    final fun component3(): org.ton.tlb/CellRef<org.ton.block/InMsg> // org.ton.block/MsgExportImm.component3|component3(){}[0]
    final fun copy(org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> = ..., org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction> = ..., org.ton.tlb/CellRef<org.ton.block/InMsg> = ...): org.ton.block/MsgExportImm // org.ton.block/MsgExportImm.copy|copy(org.ton.tlb.CellRef<org.ton.block.MsgEnvelope>;org.ton.tlb.CellRef<org.ton.kotlin.transaction.Transaction>;org.ton.tlb.CellRef<org.ton.block.InMsg>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/MsgExportImm.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/MsgExportImm.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/MsgExportImm.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/MsgExportImm.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/MsgExportImm> { // org.ton.block/MsgExportImm.Companion|null[0]
        final fun createCell(org.ton.block/MsgExportImm): org.ton.cell/Cell // org.ton.block/MsgExportImm.Companion.createCell|createCell(org.ton.block.MsgExportImm){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/MsgExportImm // org.ton.block/MsgExportImm.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/MsgExportImm // org.ton.block/MsgExportImm.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/MsgExportImm // org.ton.block/MsgExportImm.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgExportImm) // org.ton.block/MsgExportImm.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgExportImm){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgExportImm, org.ton.kotlin.cell/CellContext) // org.ton.block/MsgExportImm.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgExportImm;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/MsgExportImm> // org.ton.block/MsgExportImm.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/MsgExportNew : org.ton.block/OutMsg, org.ton.tlb/TlbObject { // org.ton.block/MsgExportNew|null[0]
    constructor <init>(org.ton.tlb/CellRef<org.ton.block/MsgEnvelope>, org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction>) // org.ton.block/MsgExportNew.<init>|<init>(org.ton.tlb.CellRef<org.ton.block.MsgEnvelope>;org.ton.tlb.CellRef<org.ton.kotlin.transaction.Transaction>){}[0]

    final val outMsg // org.ton.block/MsgExportNew.outMsg|{}outMsg[0]
        final fun <get-outMsg>(): org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> // org.ton.block/MsgExportNew.outMsg.<get-outMsg>|<get-outMsg>(){}[0]
    final val transaction // org.ton.block/MsgExportNew.transaction|{}transaction[0]
        final fun <get-transaction>(): org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction> // org.ton.block/MsgExportNew.transaction.<get-transaction>|<get-transaction>(){}[0]

    final fun component1(): org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> // org.ton.block/MsgExportNew.component1|component1(){}[0]
    final fun component2(): org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction> // org.ton.block/MsgExportNew.component2|component2(){}[0]
    final fun copy(org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> = ..., org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction> = ...): org.ton.block/MsgExportNew // org.ton.block/MsgExportNew.copy|copy(org.ton.tlb.CellRef<org.ton.block.MsgEnvelope>;org.ton.tlb.CellRef<org.ton.kotlin.transaction.Transaction>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/MsgExportNew.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/MsgExportNew.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/MsgExportNew.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/MsgExportNew.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/MsgExportNew> { // org.ton.block/MsgExportNew.Companion|null[0]
        final fun createCell(org.ton.block/MsgExportNew): org.ton.cell/Cell // org.ton.block/MsgExportNew.Companion.createCell|createCell(org.ton.block.MsgExportNew){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/MsgExportNew // org.ton.block/MsgExportNew.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/MsgExportNew // org.ton.block/MsgExportNew.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/MsgExportNew // org.ton.block/MsgExportNew.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgExportNew) // org.ton.block/MsgExportNew.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgExportNew){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgExportNew, org.ton.kotlin.cell/CellContext) // org.ton.block/MsgExportNew.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgExportNew;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/MsgExportNew> // org.ton.block/MsgExportNew.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/MsgExportTr : org.ton.block/OutMsg { // org.ton.block/MsgExportTr|null[0]
    constructor <init>(org.ton.tlb/CellRef<org.ton.block/MsgEnvelope>, org.ton.tlb/CellRef<org.ton.block/InMsg>) // org.ton.block/MsgExportTr.<init>|<init>(org.ton.tlb.CellRef<org.ton.block.MsgEnvelope>;org.ton.tlb.CellRef<org.ton.block.InMsg>){}[0]

    final val imported // org.ton.block/MsgExportTr.imported|{}imported[0]
        final fun <get-imported>(): org.ton.tlb/CellRef<org.ton.block/InMsg> // org.ton.block/MsgExportTr.imported.<get-imported>|<get-imported>(){}[0]
    final val outMsg // org.ton.block/MsgExportTr.outMsg|{}outMsg[0]
        final fun <get-outMsg>(): org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> // org.ton.block/MsgExportTr.outMsg.<get-outMsg>|<get-outMsg>(){}[0]

    final fun component1(): org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> // org.ton.block/MsgExportTr.component1|component1(){}[0]
    final fun component2(): org.ton.tlb/CellRef<org.ton.block/InMsg> // org.ton.block/MsgExportTr.component2|component2(){}[0]
    final fun copy(org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> = ..., org.ton.tlb/CellRef<org.ton.block/InMsg> = ...): org.ton.block/MsgExportTr // org.ton.block/MsgExportTr.copy|copy(org.ton.tlb.CellRef<org.ton.block.MsgEnvelope>;org.ton.tlb.CellRef<org.ton.block.InMsg>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/MsgExportTr.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/MsgExportTr.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/MsgExportTr.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/MsgExportTr.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/MsgExportTr> { // org.ton.block/MsgExportTr.Companion|null[0]
        final fun createCell(org.ton.block/MsgExportTr): org.ton.cell/Cell // org.ton.block/MsgExportTr.Companion.createCell|createCell(org.ton.block.MsgExportTr){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/MsgExportTr // org.ton.block/MsgExportTr.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/MsgExportTr // org.ton.block/MsgExportTr.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/MsgExportTr // org.ton.block/MsgExportTr.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgExportTr) // org.ton.block/MsgExportTr.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgExportTr){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgExportTr, org.ton.kotlin.cell/CellContext) // org.ton.block/MsgExportTr.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgExportTr;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/MsgExportTr> // org.ton.block/MsgExportTr.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/MsgExportTrReq : org.ton.block/OutMsg { // org.ton.block/MsgExportTrReq|null[0]
    constructor <init>(org.ton.tlb/CellRef<org.ton.block/MsgEnvelope>, org.ton.tlb/CellRef<org.ton.block/InMsg>) // org.ton.block/MsgExportTrReq.<init>|<init>(org.ton.tlb.CellRef<org.ton.block.MsgEnvelope>;org.ton.tlb.CellRef<org.ton.block.InMsg>){}[0]

    final val imported // org.ton.block/MsgExportTrReq.imported|{}imported[0]
        final fun <get-imported>(): org.ton.tlb/CellRef<org.ton.block/InMsg> // org.ton.block/MsgExportTrReq.imported.<get-imported>|<get-imported>(){}[0]
    final val outMsg // org.ton.block/MsgExportTrReq.outMsg|{}outMsg[0]
        final fun <get-outMsg>(): org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> // org.ton.block/MsgExportTrReq.outMsg.<get-outMsg>|<get-outMsg>(){}[0]

    final fun component1(): org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> // org.ton.block/MsgExportTrReq.component1|component1(){}[0]
    final fun component2(): org.ton.tlb/CellRef<org.ton.block/InMsg> // org.ton.block/MsgExportTrReq.component2|component2(){}[0]
    final fun copy(org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> = ..., org.ton.tlb/CellRef<org.ton.block/InMsg> = ...): org.ton.block/MsgExportTrReq // org.ton.block/MsgExportTrReq.copy|copy(org.ton.tlb.CellRef<org.ton.block.MsgEnvelope>;org.ton.tlb.CellRef<org.ton.block.InMsg>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/MsgExportTrReq.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/MsgExportTrReq.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/MsgExportTrReq.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/MsgExportTrReq.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/MsgExportTrReq> { // org.ton.block/MsgExportTrReq.Companion|null[0]
        final fun createCell(org.ton.block/MsgExportTrReq): org.ton.cell/Cell // org.ton.block/MsgExportTrReq.Companion.createCell|createCell(org.ton.block.MsgExportTrReq){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/MsgExportTrReq // org.ton.block/MsgExportTrReq.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/MsgExportTrReq // org.ton.block/MsgExportTrReq.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/MsgExportTrReq // org.ton.block/MsgExportTrReq.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgExportTrReq) // org.ton.block/MsgExportTrReq.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgExportTrReq){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgExportTrReq, org.ton.kotlin.cell/CellContext) // org.ton.block/MsgExportTrReq.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgExportTrReq;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/MsgExportTrReq> // org.ton.block/MsgExportTrReq.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/MsgImportExt : org.ton.block/InMsg { // org.ton.block/MsgImportExt|null[0]
    constructor <init>(org.ton.tlb/CellRef<org.ton.block/Message<org.ton.cell/Cell>>, org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction>) // org.ton.block/MsgImportExt.<init>|<init>(org.ton.tlb.CellRef<org.ton.block.Message<org.ton.cell.Cell>>;org.ton.tlb.CellRef<org.ton.kotlin.transaction.Transaction>){}[0]

    final val msg // org.ton.block/MsgImportExt.msg|{}msg[0]
        final fun <get-msg>(): org.ton.tlb/CellRef<org.ton.block/Message<org.ton.cell/Cell>> // org.ton.block/MsgImportExt.msg.<get-msg>|<get-msg>(){}[0]
    final val transaction // org.ton.block/MsgImportExt.transaction|{}transaction[0]
        final fun <get-transaction>(): org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction> // org.ton.block/MsgImportExt.transaction.<get-transaction>|<get-transaction>(){}[0]

    final fun component1(): org.ton.tlb/CellRef<org.ton.block/Message<org.ton.cell/Cell>> // org.ton.block/MsgImportExt.component1|component1(){}[0]
    final fun component2(): org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction> // org.ton.block/MsgImportExt.component2|component2(){}[0]
    final fun copy(org.ton.tlb/CellRef<org.ton.block/Message<org.ton.cell/Cell>> = ..., org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction> = ...): org.ton.block/MsgImportExt // org.ton.block/MsgImportExt.copy|copy(org.ton.tlb.CellRef<org.ton.block.Message<org.ton.cell.Cell>>;org.ton.tlb.CellRef<org.ton.kotlin.transaction.Transaction>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/MsgImportExt.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/MsgImportExt.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/MsgImportExt.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/MsgImportExt.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/MsgImportExt> { // org.ton.block/MsgImportExt.Companion|null[0]
        final fun createCell(org.ton.block/MsgImportExt): org.ton.cell/Cell // org.ton.block/MsgImportExt.Companion.createCell|createCell(org.ton.block.MsgImportExt){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/MsgImportExt // org.ton.block/MsgImportExt.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/MsgImportExt // org.ton.block/MsgImportExt.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/MsgImportExt // org.ton.block/MsgImportExt.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgImportExt) // org.ton.block/MsgImportExt.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgImportExt){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgImportExt, org.ton.kotlin.cell/CellContext) // org.ton.block/MsgImportExt.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgImportExt;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/MsgImportExt> // org.ton.block/MsgImportExt.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/MsgImportFin : org.ton.block/InMsg { // org.ton.block/MsgImportFin|null[0]
    constructor <init>(org.ton.tlb/CellRef<org.ton.block/MsgEnvelope>, org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction>, org.ton.block/Coins) // org.ton.block/MsgImportFin.<init>|<init>(org.ton.tlb.CellRef<org.ton.block.MsgEnvelope>;org.ton.tlb.CellRef<org.ton.kotlin.transaction.Transaction>;org.ton.block.Coins){}[0]

    final val fwdFee // org.ton.block/MsgImportFin.fwdFee|{}fwdFee[0]
        final fun <get-fwdFee>(): org.ton.block/Coins // org.ton.block/MsgImportFin.fwdFee.<get-fwdFee>|<get-fwdFee>(){}[0]
    final val inMsg // org.ton.block/MsgImportFin.inMsg|{}inMsg[0]
        final fun <get-inMsg>(): org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> // org.ton.block/MsgImportFin.inMsg.<get-inMsg>|<get-inMsg>(){}[0]
    final val transaction // org.ton.block/MsgImportFin.transaction|{}transaction[0]
        final fun <get-transaction>(): org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction> // org.ton.block/MsgImportFin.transaction.<get-transaction>|<get-transaction>(){}[0]

    final fun component1(): org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> // org.ton.block/MsgImportFin.component1|component1(){}[0]
    final fun component2(): org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction> // org.ton.block/MsgImportFin.component2|component2(){}[0]
    final fun component3(): org.ton.block/Coins // org.ton.block/MsgImportFin.component3|component3(){}[0]
    final fun copy(org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> = ..., org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction> = ..., org.ton.block/Coins = ...): org.ton.block/MsgImportFin // org.ton.block/MsgImportFin.copy|copy(org.ton.tlb.CellRef<org.ton.block.MsgEnvelope>;org.ton.tlb.CellRef<org.ton.kotlin.transaction.Transaction>;org.ton.block.Coins){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/MsgImportFin.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/MsgImportFin.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/MsgImportFin.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/MsgImportFin.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/MsgImportFin> { // org.ton.block/MsgImportFin.Companion|null[0]
        final fun createCell(org.ton.block/MsgImportFin): org.ton.cell/Cell // org.ton.block/MsgImportFin.Companion.createCell|createCell(org.ton.block.MsgImportFin){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/MsgImportFin // org.ton.block/MsgImportFin.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/MsgImportFin // org.ton.block/MsgImportFin.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/MsgImportFin // org.ton.block/MsgImportFin.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgImportFin) // org.ton.block/MsgImportFin.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgImportFin){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgImportFin, org.ton.kotlin.cell/CellContext) // org.ton.block/MsgImportFin.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgImportFin;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/MsgImportFin> // org.ton.block/MsgImportFin.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/MsgImportIhr : org.ton.block/InMsg { // org.ton.block/MsgImportIhr|null[0]
    constructor <init>(org.ton.tlb/CellRef<org.ton.block/Message<org.ton.cell/Cell>>, org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction>, org.ton.block/Coins, org.ton.cell/Cell) // org.ton.block/MsgImportIhr.<init>|<init>(org.ton.tlb.CellRef<org.ton.block.Message<org.ton.cell.Cell>>;org.ton.tlb.CellRef<org.ton.kotlin.transaction.Transaction>;org.ton.block.Coins;org.ton.cell.Cell){}[0]

    final val ihrFee // org.ton.block/MsgImportIhr.ihrFee|{}ihrFee[0]
        final fun <get-ihrFee>(): org.ton.block/Coins // org.ton.block/MsgImportIhr.ihrFee.<get-ihrFee>|<get-ihrFee>(){}[0]
    final val msg // org.ton.block/MsgImportIhr.msg|{}msg[0]
        final fun <get-msg>(): org.ton.tlb/CellRef<org.ton.block/Message<org.ton.cell/Cell>> // org.ton.block/MsgImportIhr.msg.<get-msg>|<get-msg>(){}[0]
    final val proofCreated // org.ton.block/MsgImportIhr.proofCreated|{}proofCreated[0]
        final fun <get-proofCreated>(): org.ton.cell/Cell // org.ton.block/MsgImportIhr.proofCreated.<get-proofCreated>|<get-proofCreated>(){}[0]
    final val transaction // org.ton.block/MsgImportIhr.transaction|{}transaction[0]
        final fun <get-transaction>(): org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction> // org.ton.block/MsgImportIhr.transaction.<get-transaction>|<get-transaction>(){}[0]

    final fun component1(): org.ton.tlb/CellRef<org.ton.block/Message<org.ton.cell/Cell>> // org.ton.block/MsgImportIhr.component1|component1(){}[0]
    final fun component2(): org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction> // org.ton.block/MsgImportIhr.component2|component2(){}[0]
    final fun component3(): org.ton.block/Coins // org.ton.block/MsgImportIhr.component3|component3(){}[0]
    final fun component4(): org.ton.cell/Cell // org.ton.block/MsgImportIhr.component4|component4(){}[0]
    final fun copy(org.ton.tlb/CellRef<org.ton.block/Message<org.ton.cell/Cell>> = ..., org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction> = ..., org.ton.block/Coins = ..., org.ton.cell/Cell = ...): org.ton.block/MsgImportIhr // org.ton.block/MsgImportIhr.copy|copy(org.ton.tlb.CellRef<org.ton.block.Message<org.ton.cell.Cell>>;org.ton.tlb.CellRef<org.ton.kotlin.transaction.Transaction>;org.ton.block.Coins;org.ton.cell.Cell){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/MsgImportIhr.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/MsgImportIhr.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/MsgImportIhr.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/MsgImportIhr.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/MsgImportIhr> { // org.ton.block/MsgImportIhr.Companion|null[0]
        final fun createCell(org.ton.block/MsgImportIhr): org.ton.cell/Cell // org.ton.block/MsgImportIhr.Companion.createCell|createCell(org.ton.block.MsgImportIhr){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/MsgImportIhr // org.ton.block/MsgImportIhr.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/MsgImportIhr // org.ton.block/MsgImportIhr.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/MsgImportIhr // org.ton.block/MsgImportIhr.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgImportIhr) // org.ton.block/MsgImportIhr.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgImportIhr){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgImportIhr, org.ton.kotlin.cell/CellContext) // org.ton.block/MsgImportIhr.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgImportIhr;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/MsgImportIhr> // org.ton.block/MsgImportIhr.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/MsgImportImm : org.ton.block/InMsg { // org.ton.block/MsgImportImm|null[0]
    constructor <init>(org.ton.tlb/CellRef<org.ton.block/MsgEnvelope>, org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction>, org.ton.block/Coins) // org.ton.block/MsgImportImm.<init>|<init>(org.ton.tlb.CellRef<org.ton.block.MsgEnvelope>;org.ton.tlb.CellRef<org.ton.kotlin.transaction.Transaction>;org.ton.block.Coins){}[0]

    final val fwdFee // org.ton.block/MsgImportImm.fwdFee|{}fwdFee[0]
        final fun <get-fwdFee>(): org.ton.block/Coins // org.ton.block/MsgImportImm.fwdFee.<get-fwdFee>|<get-fwdFee>(){}[0]
    final val inMsg // org.ton.block/MsgImportImm.inMsg|{}inMsg[0]
        final fun <get-inMsg>(): org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> // org.ton.block/MsgImportImm.inMsg.<get-inMsg>|<get-inMsg>(){}[0]
    final val transaction // org.ton.block/MsgImportImm.transaction|{}transaction[0]
        final fun <get-transaction>(): org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction> // org.ton.block/MsgImportImm.transaction.<get-transaction>|<get-transaction>(){}[0]

    final fun component1(): org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> // org.ton.block/MsgImportImm.component1|component1(){}[0]
    final fun component2(): org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction> // org.ton.block/MsgImportImm.component2|component2(){}[0]
    final fun component3(): org.ton.block/Coins // org.ton.block/MsgImportImm.component3|component3(){}[0]
    final fun copy(org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> = ..., org.ton.tlb/CellRef<org.ton.kotlin.transaction/Transaction> = ..., org.ton.block/Coins = ...): org.ton.block/MsgImportImm // org.ton.block/MsgImportImm.copy|copy(org.ton.tlb.CellRef<org.ton.block.MsgEnvelope>;org.ton.tlb.CellRef<org.ton.kotlin.transaction.Transaction>;org.ton.block.Coins){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/MsgImportImm.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/MsgImportImm.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/MsgImportImm.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/MsgImportImm.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/MsgImportImm> { // org.ton.block/MsgImportImm.Companion|null[0]
        final fun createCell(org.ton.block/MsgImportImm): org.ton.cell/Cell // org.ton.block/MsgImportImm.Companion.createCell|createCell(org.ton.block.MsgImportImm){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/MsgImportImm // org.ton.block/MsgImportImm.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/MsgImportImm // org.ton.block/MsgImportImm.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/MsgImportImm // org.ton.block/MsgImportImm.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgImportImm) // org.ton.block/MsgImportImm.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgImportImm){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgImportImm, org.ton.kotlin.cell/CellContext) // org.ton.block/MsgImportImm.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgImportImm;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/MsgImportImm> // org.ton.block/MsgImportImm.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/MsgImportTr : org.ton.block/InMsg { // org.ton.block/MsgImportTr|null[0]
    constructor <init>(org.ton.tlb/CellRef<org.ton.block/MsgEnvelope>, org.ton.tlb/CellRef<org.ton.block/MsgEnvelope>, org.ton.block/Coins) // org.ton.block/MsgImportTr.<init>|<init>(org.ton.tlb.CellRef<org.ton.block.MsgEnvelope>;org.ton.tlb.CellRef<org.ton.block.MsgEnvelope>;org.ton.block.Coins){}[0]

    final val inMsg // org.ton.block/MsgImportTr.inMsg|{}inMsg[0]
        final fun <get-inMsg>(): org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> // org.ton.block/MsgImportTr.inMsg.<get-inMsg>|<get-inMsg>(){}[0]
    final val outMsg // org.ton.block/MsgImportTr.outMsg|{}outMsg[0]
        final fun <get-outMsg>(): org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> // org.ton.block/MsgImportTr.outMsg.<get-outMsg>|<get-outMsg>(){}[0]
    final val transitFee // org.ton.block/MsgImportTr.transitFee|{}transitFee[0]
        final fun <get-transitFee>(): org.ton.block/Coins // org.ton.block/MsgImportTr.transitFee.<get-transitFee>|<get-transitFee>(){}[0]

    final fun component1(): org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> // org.ton.block/MsgImportTr.component1|component1(){}[0]
    final fun component2(): org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> // org.ton.block/MsgImportTr.component2|component2(){}[0]
    final fun component3(): org.ton.block/Coins // org.ton.block/MsgImportTr.component3|component3(){}[0]
    final fun copy(org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> = ..., org.ton.tlb/CellRef<org.ton.block/MsgEnvelope> = ..., org.ton.block/Coins = ...): org.ton.block/MsgImportTr // org.ton.block/MsgImportTr.copy|copy(org.ton.tlb.CellRef<org.ton.block.MsgEnvelope>;org.ton.tlb.CellRef<org.ton.block.MsgEnvelope>;org.ton.block.Coins){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/MsgImportTr.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/MsgImportTr.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/MsgImportTr.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/MsgImportTr.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/MsgImportTr> { // org.ton.block/MsgImportTr.Companion|null[0]
        final fun createCell(org.ton.block/MsgImportTr): org.ton.cell/Cell // org.ton.block/MsgImportTr.Companion.createCell|createCell(org.ton.block.MsgImportTr){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/MsgImportTr // org.ton.block/MsgImportTr.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/MsgImportTr // org.ton.block/MsgImportTr.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/MsgImportTr // org.ton.block/MsgImportTr.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgImportTr) // org.ton.block/MsgImportTr.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgImportTr){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/MsgImportTr, org.ton.kotlin.cell/CellContext) // org.ton.block/MsgImportTr.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.MsgImportTr;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/MsgImportTr> // org.ton.block/MsgImportTr.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/MutableVmStackImpl : org.ton.block/MutableVmStack { // org.ton.block/MutableVmStackImpl|null[0]
    constructor <init>(kotlin.collections/Iterable<org.ton.block/VmStackValue> = ...) // org.ton.block/MutableVmStackImpl.<init>|<init>(kotlin.collections.Iterable<org.ton.block.VmStackValue>){}[0]

    final val depth // org.ton.block/MutableVmStackImpl.depth|{}depth[0]
        final fun <get-depth>(): kotlin/Int // org.ton.block/MutableVmStackImpl.depth.<get-depth>|<get-depth>(){}[0]
    final val stack // org.ton.block/MutableVmStackImpl.stack|{}stack[0]
        final fun <get-stack>(): org.ton.block/VmStackList // org.ton.block/MutableVmStackImpl.stack.<get-stack>|<get-stack>(){}[0]

    final fun get(kotlin/Int): org.ton.block/VmStackValue // org.ton.block/MutableVmStackImpl.get|get(kotlin.Int){}[0]
    final fun interchange(kotlin/Int, kotlin/Int) // org.ton.block/MutableVmStackImpl.interchange|interchange(kotlin.Int;kotlin.Int){}[0]
    final fun pop(): org.ton.block/VmStackValue // org.ton.block/MutableVmStackImpl.pop|pop(){}[0]
    final fun push(org.ton.block/VmStackValue) // org.ton.block/MutableVmStackImpl.push|push(org.ton.block.VmStackValue){}[0]
    final fun toMutableVmStack(): org.ton.block/MutableVmStack // org.ton.block/MutableVmStackImpl.toMutableVmStack|toMutableVmStack(){}[0]
    final fun toString(): kotlin/String // org.ton.block/MutableVmStackImpl.toString|toString(){}[0]
}

final class org.ton.block/OutListLink : org.ton.block/OutList { // org.ton.block/OutListLink|null[0]
    constructor <init>(org.ton.block/OutList, org.ton.block/OutAction) // org.ton.block/OutListLink.<init>|<init>(org.ton.block.OutList;org.ton.block.OutAction){}[0]

    final val action // org.ton.block/OutListLink.action|{}action[0]
        final fun <get-action>(): org.ton.block/OutAction // org.ton.block/OutListLink.action.<get-action>|<get-action>(){}[0]
    final val prev // org.ton.block/OutListLink.prev|{}prev[0]
        final fun <get-prev>(): org.ton.block/OutList // org.ton.block/OutListLink.prev.<get-prev>|<get-prev>(){}[0]

    final fun component1(): org.ton.block/OutList // org.ton.block/OutListLink.component1|component1(){}[0]
    final fun component2(): org.ton.block/OutAction // org.ton.block/OutListLink.component2|component2(){}[0]
    final fun copy(org.ton.block/OutList = ..., org.ton.block/OutAction = ...): org.ton.block/OutListLink // org.ton.block/OutListLink.copy|copy(org.ton.block.OutList;org.ton.block.OutAction){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/OutListLink.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/OutListLink.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/OutListLink.toString|toString(){}[0]
}

final class org.ton.block/OutListNode { // org.ton.block/OutListNode|null[0]
    constructor <init>(org.ton.cell/Cell, org.ton.block/OutAction) // org.ton.block/OutListNode.<init>|<init>(org.ton.cell.Cell;org.ton.block.OutAction){}[0]

    final val action // org.ton.block/OutListNode.action|{}action[0]
        final fun <get-action>(): org.ton.block/OutAction // org.ton.block/OutListNode.action.<get-action>|<get-action>(){}[0]
    final val prev // org.ton.block/OutListNode.prev|{}prev[0]
        final fun <get-prev>(): org.ton.cell/Cell // org.ton.block/OutListNode.prev.<get-prev>|<get-prev>(){}[0]

    final fun component1(): org.ton.cell/Cell // org.ton.block/OutListNode.component1|component1(){}[0]
    final fun component2(): org.ton.block/OutAction // org.ton.block/OutListNode.component2|component2(){}[0]
    final fun copy(org.ton.cell/Cell = ..., org.ton.block/OutAction = ...): org.ton.block/OutListNode // org.ton.block/OutListNode.copy|copy(org.ton.cell.Cell;org.ton.block.OutAction){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/OutListNode.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/OutListNode.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/OutListNode.toString|toString(){}[0]
}

final class org.ton.block/OutMsgQueueInfo : org.ton.tlb/TlbObject { // org.ton.block/OutMsgQueueInfo|null[0]
    constructor <init>(org.ton.hashmap/HashmapAugE<org.ton.block/EnqueuedMsg, kotlin/ULong>, org.ton.hashmap/HashMapE<org.ton.block/ProcessedUpto>, org.ton.hashmap/HashMapE<org.ton.block/IhrPendingSince>) // org.ton.block/OutMsgQueueInfo.<init>|<init>(org.ton.hashmap.HashmapAugE<org.ton.block.EnqueuedMsg,kotlin.ULong>;org.ton.hashmap.HashMapE<org.ton.block.ProcessedUpto>;org.ton.hashmap.HashMapE<org.ton.block.IhrPendingSince>){}[0]

    final val ihrPending // org.ton.block/OutMsgQueueInfo.ihrPending|{}ihrPending[0]
        final fun <get-ihrPending>(): org.ton.hashmap/HashMapE<org.ton.block/IhrPendingSince> // org.ton.block/OutMsgQueueInfo.ihrPending.<get-ihrPending>|<get-ihrPending>(){}[0]
    final val outQueue // org.ton.block/OutMsgQueueInfo.outQueue|{}outQueue[0]
        final fun <get-outQueue>(): org.ton.hashmap/HashmapAugE<org.ton.block/EnqueuedMsg, kotlin/ULong> // org.ton.block/OutMsgQueueInfo.outQueue.<get-outQueue>|<get-outQueue>(){}[0]
    final val procInfo // org.ton.block/OutMsgQueueInfo.procInfo|{}procInfo[0]
        final fun <get-procInfo>(): org.ton.hashmap/HashMapE<org.ton.block/ProcessedUpto> // org.ton.block/OutMsgQueueInfo.procInfo.<get-procInfo>|<get-procInfo>(){}[0]

    final fun component1(): org.ton.hashmap/HashmapAugE<org.ton.block/EnqueuedMsg, kotlin/ULong> // org.ton.block/OutMsgQueueInfo.component1|component1(){}[0]
    final fun component2(): org.ton.hashmap/HashMapE<org.ton.block/ProcessedUpto> // org.ton.block/OutMsgQueueInfo.component2|component2(){}[0]
    final fun component3(): org.ton.hashmap/HashMapE<org.ton.block/IhrPendingSince> // org.ton.block/OutMsgQueueInfo.component3|component3(){}[0]
    final fun copy(org.ton.hashmap/HashmapAugE<org.ton.block/EnqueuedMsg, kotlin/ULong> = ..., org.ton.hashmap/HashMapE<org.ton.block/ProcessedUpto> = ..., org.ton.hashmap/HashMapE<org.ton.block/IhrPendingSince> = ...): org.ton.block/OutMsgQueueInfo // org.ton.block/OutMsgQueueInfo.copy|copy(org.ton.hashmap.HashmapAugE<org.ton.block.EnqueuedMsg,kotlin.ULong>;org.ton.hashmap.HashMapE<org.ton.block.ProcessedUpto>;org.ton.hashmap.HashMapE<org.ton.block.IhrPendingSince>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/OutMsgQueueInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/OutMsgQueueInfo.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/OutMsgQueueInfo.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/OutMsgQueueInfo.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/OutMsgQueueInfo> { // org.ton.block/OutMsgQueueInfo.Companion|null[0]
        final fun createCell(org.ton.block/OutMsgQueueInfo): org.ton.cell/Cell // org.ton.block/OutMsgQueueInfo.Companion.createCell|createCell(org.ton.block.OutMsgQueueInfo){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/OutMsgQueueInfo // org.ton.block/OutMsgQueueInfo.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/OutMsgQueueInfo // org.ton.block/OutMsgQueueInfo.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/OutMsgQueueInfo // org.ton.block/OutMsgQueueInfo.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/OutMsgQueueInfo) // org.ton.block/OutMsgQueueInfo.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.OutMsgQueueInfo){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/OutMsgQueueInfo, org.ton.kotlin.cell/CellContext) // org.ton.block/OutMsgQueueInfo.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.OutMsgQueueInfo;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/OutMsgQueueInfo> // org.ton.block/OutMsgQueueInfo.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/PrevBlkInfo : org.ton.block/BlkPrevInfo { // org.ton.block/PrevBlkInfo|null[0]
    constructor <init>(org.ton.block/ExtBlkRef) // org.ton.block/PrevBlkInfo.<init>|<init>(org.ton.block.ExtBlkRef){}[0]

    final val prev // org.ton.block/PrevBlkInfo.prev|{}prev[0]
        final fun <get-prev>(): org.ton.block/ExtBlkRef // org.ton.block/PrevBlkInfo.prev.<get-prev>|<get-prev>(){}[0]

    final fun component1(): org.ton.block/ExtBlkRef // org.ton.block/PrevBlkInfo.component1|component1(){}[0]
    final fun copy(org.ton.block/ExtBlkRef = ...): org.ton.block/PrevBlkInfo // org.ton.block/PrevBlkInfo.copy|copy(org.ton.block.ExtBlkRef){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/PrevBlkInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/PrevBlkInfo.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/PrevBlkInfo.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/PrevBlkInfo.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/PrevBlkInfo> { // org.ton.block/PrevBlkInfo.Companion|null[0]
        final fun createCell(org.ton.block/PrevBlkInfo): org.ton.cell/Cell // org.ton.block/PrevBlkInfo.Companion.createCell|createCell(org.ton.block.PrevBlkInfo){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/PrevBlkInfo // org.ton.block/PrevBlkInfo.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/PrevBlkInfo // org.ton.block/PrevBlkInfo.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/PrevBlkInfo // org.ton.block/PrevBlkInfo.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/PrevBlkInfo) // org.ton.block/PrevBlkInfo.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.PrevBlkInfo){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/PrevBlkInfo, org.ton.kotlin.cell/CellContext) // org.ton.block/PrevBlkInfo.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.PrevBlkInfo;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/PrevBlkInfo> // org.ton.block/PrevBlkInfo.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/PrevBlksInfo : org.ton.block/BlkPrevInfo { // org.ton.block/PrevBlksInfo|null[0]
    constructor <init>(org.ton.tlb/CellRef<org.ton.block/ExtBlkRef>, org.ton.tlb/CellRef<org.ton.block/ExtBlkRef>) // org.ton.block/PrevBlksInfo.<init>|<init>(org.ton.tlb.CellRef<org.ton.block.ExtBlkRef>;org.ton.tlb.CellRef<org.ton.block.ExtBlkRef>){}[0]

    final val prev1 // org.ton.block/PrevBlksInfo.prev1|{}prev1[0]
        final fun <get-prev1>(): org.ton.tlb/CellRef<org.ton.block/ExtBlkRef> // org.ton.block/PrevBlksInfo.prev1.<get-prev1>|<get-prev1>(){}[0]
    final val prev2 // org.ton.block/PrevBlksInfo.prev2|{}prev2[0]
        final fun <get-prev2>(): org.ton.tlb/CellRef<org.ton.block/ExtBlkRef> // org.ton.block/PrevBlksInfo.prev2.<get-prev2>|<get-prev2>(){}[0]

    final fun component1(): org.ton.tlb/CellRef<org.ton.block/ExtBlkRef> // org.ton.block/PrevBlksInfo.component1|component1(){}[0]
    final fun component2(): org.ton.tlb/CellRef<org.ton.block/ExtBlkRef> // org.ton.block/PrevBlksInfo.component2|component2(){}[0]
    final fun copy(org.ton.tlb/CellRef<org.ton.block/ExtBlkRef> = ..., org.ton.tlb/CellRef<org.ton.block/ExtBlkRef> = ...): org.ton.block/PrevBlksInfo // org.ton.block/PrevBlksInfo.copy|copy(org.ton.tlb.CellRef<org.ton.block.ExtBlkRef>;org.ton.tlb.CellRef<org.ton.block.ExtBlkRef>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/PrevBlksInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/PrevBlksInfo.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/PrevBlksInfo.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/PrevBlksInfo.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/PrevBlksInfo> { // org.ton.block/PrevBlksInfo.Companion|null[0]
        final fun createCell(org.ton.block/PrevBlksInfo): org.ton.cell/Cell // org.ton.block/PrevBlksInfo.Companion.createCell|createCell(org.ton.block.PrevBlksInfo){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/PrevBlksInfo // org.ton.block/PrevBlksInfo.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/PrevBlksInfo // org.ton.block/PrevBlksInfo.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/PrevBlksInfo // org.ton.block/PrevBlksInfo.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/PrevBlksInfo) // org.ton.block/PrevBlksInfo.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.PrevBlksInfo){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/PrevBlksInfo, org.ton.kotlin.cell/CellContext) // org.ton.block/PrevBlksInfo.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.PrevBlksInfo;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/PrevBlksInfo> // org.ton.block/PrevBlksInfo.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/ProcessedUpto : org.ton.tlb/TlbObject { // org.ton.block/ProcessedUpto|null[0]
    constructor <init>(kotlin/ULong, org.ton.bitstring/BitString) // org.ton.block/ProcessedUpto.<init>|<init>(kotlin.ULong;org.ton.bitstring.BitString){}[0]

    final val lastMsgHash // org.ton.block/ProcessedUpto.lastMsgHash|{}lastMsgHash[0]
        final fun <get-lastMsgHash>(): org.ton.bitstring/BitString // org.ton.block/ProcessedUpto.lastMsgHash.<get-lastMsgHash>|<get-lastMsgHash>(){}[0]
    final val lastMsgLt // org.ton.block/ProcessedUpto.lastMsgLt|{}lastMsgLt[0]
        final fun <get-lastMsgLt>(): kotlin/ULong // org.ton.block/ProcessedUpto.lastMsgLt.<get-lastMsgLt>|<get-lastMsgLt>(){}[0]

    final fun component1(): kotlin/ULong // org.ton.block/ProcessedUpto.component1|component1(){}[0]
    final fun component2(): org.ton.bitstring/BitString // org.ton.block/ProcessedUpto.component2|component2(){}[0]
    final fun copy(kotlin/ULong = ..., org.ton.bitstring/BitString = ...): org.ton.block/ProcessedUpto // org.ton.block/ProcessedUpto.copy|copy(kotlin.ULong;org.ton.bitstring.BitString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/ProcessedUpto.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/ProcessedUpto.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/ProcessedUpto.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/ProcessedUpto.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/ProcessedUpto> { // org.ton.block/ProcessedUpto.Companion|null[0]
        final fun createCell(org.ton.block/ProcessedUpto): org.ton.cell/Cell // org.ton.block/ProcessedUpto.Companion.createCell|createCell(org.ton.block.ProcessedUpto){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/ProcessedUpto // org.ton.block/ProcessedUpto.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/ProcessedUpto // org.ton.block/ProcessedUpto.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/ProcessedUpto // org.ton.block/ProcessedUpto.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ProcessedUpto) // org.ton.block/ProcessedUpto.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ProcessedUpto){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ProcessedUpto, org.ton.kotlin.cell/CellContext) // org.ton.block/ProcessedUpto.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ProcessedUpto;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/ProcessedUpto> // org.ton.block/ProcessedUpto.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/ProtoListNext : org.ton.block/ProtoList { // org.ton.block/ProtoListNext|null[0]
    constructor <init>(org.ton.block/Protocol, org.ton.block/ProtoList) // org.ton.block/ProtoListNext.<init>|<init>(org.ton.block.Protocol;org.ton.block.ProtoList){}[0]

    final val head // org.ton.block/ProtoListNext.head|{}head[0]
        final fun <get-head>(): org.ton.block/Protocol // org.ton.block/ProtoListNext.head.<get-head>|<get-head>(){}[0]
    final val tail // org.ton.block/ProtoListNext.tail|{}tail[0]
        final fun <get-tail>(): org.ton.block/ProtoList // org.ton.block/ProtoListNext.tail.<get-tail>|<get-tail>(){}[0]

    final fun component1(): org.ton.block/Protocol // org.ton.block/ProtoListNext.component1|component1(){}[0]
    final fun component2(): org.ton.block/ProtoList // org.ton.block/ProtoListNext.component2|component2(){}[0]
    final fun copy(org.ton.block/Protocol = ..., org.ton.block/ProtoList = ...): org.ton.block/ProtoListNext // org.ton.block/ProtoListNext.copy|copy(org.ton.block.Protocol;org.ton.block.ProtoList){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/ProtoListNext.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/ProtoListNext.hashCode|hashCode(){}[0]
    final fun iterator(): kotlin.collections/Iterator<org.ton.block/Protocol> // org.ton.block/ProtoListNext.iterator|iterator(){}[0]
    final fun toString(): kotlin/String // org.ton.block/ProtoListNext.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/ProtoListNext> { // org.ton.block/ProtoListNext.Companion|null[0]
        final fun createCell(org.ton.block/ProtoListNext): org.ton.cell/Cell // org.ton.block/ProtoListNext.Companion.createCell|createCell(org.ton.block.ProtoListNext){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/ProtoListNext // org.ton.block/ProtoListNext.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/ProtoListNext // org.ton.block/ProtoListNext.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/ProtoListNext // org.ton.block/ProtoListNext.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ProtoListNext) // org.ton.block/ProtoListNext.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ProtoListNext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ProtoListNext, org.ton.kotlin.cell/CellContext) // org.ton.block/ProtoListNext.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ProtoListNext;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/ProtoListNext> // org.ton.block/ProtoListNext.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/ShardDescrAux : org.ton.tlb/TlbObject { // org.ton.block/ShardDescrAux|null[0]
    constructor <init>(org.ton.block/CurrencyCollection, org.ton.block/CurrencyCollection) // org.ton.block/ShardDescrAux.<init>|<init>(org.ton.block.CurrencyCollection;org.ton.block.CurrencyCollection){}[0]

    final val feesCollected // org.ton.block/ShardDescrAux.feesCollected|{}feesCollected[0]
        final fun <get-feesCollected>(): org.ton.block/CurrencyCollection // org.ton.block/ShardDescrAux.feesCollected.<get-feesCollected>|<get-feesCollected>(){}[0]
    final val fundsCreated // org.ton.block/ShardDescrAux.fundsCreated|{}fundsCreated[0]
        final fun <get-fundsCreated>(): org.ton.block/CurrencyCollection // org.ton.block/ShardDescrAux.fundsCreated.<get-fundsCreated>|<get-fundsCreated>(){}[0]

    final fun component1(): org.ton.block/CurrencyCollection // org.ton.block/ShardDescrAux.component1|component1(){}[0]
    final fun component2(): org.ton.block/CurrencyCollection // org.ton.block/ShardDescrAux.component2|component2(){}[0]
    final fun copy(org.ton.block/CurrencyCollection = ..., org.ton.block/CurrencyCollection = ...): org.ton.block/ShardDescrAux // org.ton.block/ShardDescrAux.copy|copy(org.ton.block.CurrencyCollection;org.ton.block.CurrencyCollection){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/ShardDescrAux.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/ShardDescrAux.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/ShardDescrAux.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/ShardDescrAux.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/ShardDescrAux> { // org.ton.block/ShardDescrAux.Companion|null[0]
        final fun createCell(org.ton.block/ShardDescrAux): org.ton.cell/Cell // org.ton.block/ShardDescrAux.Companion.createCell|createCell(org.ton.block.ShardDescrAux){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/ShardDescrAux // org.ton.block/ShardDescrAux.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/ShardDescrAux // org.ton.block/ShardDescrAux.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/ShardDescrAux // org.ton.block/ShardDescrAux.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ShardDescrAux) // org.ton.block/ShardDescrAux.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ShardDescrAux){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ShardDescrAux, org.ton.kotlin.cell/CellContext) // org.ton.block/ShardDescrAux.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ShardDescrAux;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/ShardDescrAux> // org.ton.block/ShardDescrAux.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/ShardDescrNew : org.ton.block/ShardDescr { // org.ton.block/ShardDescrNew|null[0]
    constructor <init>(kotlin/UInt, kotlin/UInt, kotlin/ULong, kotlin/ULong, org.ton.bitstring/BitString, org.ton.bitstring/BitString, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean, kotlin/Int, kotlin/UInt, kotlin/ULong, kotlin/UInt, kotlin/UInt, org.ton.block/FutureSplitMerge, org.ton.tlb/CellRef<org.ton.block/ShardDescrAux>) // org.ton.block/ShardDescrNew.<init>|<init>(kotlin.UInt;kotlin.UInt;kotlin.ULong;kotlin.ULong;org.ton.bitstring.BitString;org.ton.bitstring.BitString;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Int;kotlin.UInt;kotlin.ULong;kotlin.UInt;kotlin.UInt;org.ton.block.FutureSplitMerge;org.ton.tlb.CellRef<org.ton.block.ShardDescrAux>){}[0]

    final val beforeMerge // org.ton.block/ShardDescrNew.beforeMerge|{}beforeMerge[0]
        final fun <get-beforeMerge>(): kotlin/Boolean // org.ton.block/ShardDescrNew.beforeMerge.<get-beforeMerge>|<get-beforeMerge>(){}[0]
    final val beforeSplit // org.ton.block/ShardDescrNew.beforeSplit|{}beforeSplit[0]
        final fun <get-beforeSplit>(): kotlin/Boolean // org.ton.block/ShardDescrNew.beforeSplit.<get-beforeSplit>|<get-beforeSplit>(){}[0]
    final val endLt // org.ton.block/ShardDescrNew.endLt|{}endLt[0]
        final fun <get-endLt>(): kotlin/ULong // org.ton.block/ShardDescrNew.endLt.<get-endLt>|<get-endLt>(){}[0]
    final val fileHash // org.ton.block/ShardDescrNew.fileHash|{}fileHash[0]
        final fun <get-fileHash>(): org.ton.bitstring/BitString // org.ton.block/ShardDescrNew.fileHash.<get-fileHash>|<get-fileHash>(){}[0]
    final val flags // org.ton.block/ShardDescrNew.flags|{}flags[0]
        final fun <get-flags>(): kotlin/Int // org.ton.block/ShardDescrNew.flags.<get-flags>|<get-flags>(){}[0]
    final val genUtime // org.ton.block/ShardDescrNew.genUtime|{}genUtime[0]
        final fun <get-genUtime>(): kotlin/UInt // org.ton.block/ShardDescrNew.genUtime.<get-genUtime>|<get-genUtime>(){}[0]
    final val minRefMcSeqno // org.ton.block/ShardDescrNew.minRefMcSeqno|{}minRefMcSeqno[0]
        final fun <get-minRefMcSeqno>(): kotlin/UInt // org.ton.block/ShardDescrNew.minRefMcSeqno.<get-minRefMcSeqno>|<get-minRefMcSeqno>(){}[0]
    final val nextCatchainSeqno // org.ton.block/ShardDescrNew.nextCatchainSeqno|{}nextCatchainSeqno[0]
        final fun <get-nextCatchainSeqno>(): kotlin/UInt // org.ton.block/ShardDescrNew.nextCatchainSeqno.<get-nextCatchainSeqno>|<get-nextCatchainSeqno>(){}[0]
    final val nextValidatorShard // org.ton.block/ShardDescrNew.nextValidatorShard|{}nextValidatorShard[0]
        final fun <get-nextValidatorShard>(): kotlin/ULong // org.ton.block/ShardDescrNew.nextValidatorShard.<get-nextValidatorShard>|<get-nextValidatorShard>(){}[0]
    final val nxCcUpdated // org.ton.block/ShardDescrNew.nxCcUpdated|{}nxCcUpdated[0]
        final fun <get-nxCcUpdated>(): kotlin/Boolean // org.ton.block/ShardDescrNew.nxCcUpdated.<get-nxCcUpdated>|<get-nxCcUpdated>(){}[0]
    final val r1 // org.ton.block/ShardDescrNew.r1|{}r1[0]
        final fun <get-r1>(): org.ton.tlb/CellRef<org.ton.block/ShardDescrAux> // org.ton.block/ShardDescrNew.r1.<get-r1>|<get-r1>(){}[0]
    final val regMcSeqno // org.ton.block/ShardDescrNew.regMcSeqno|{}regMcSeqno[0]
        final fun <get-regMcSeqno>(): kotlin/UInt // org.ton.block/ShardDescrNew.regMcSeqno.<get-regMcSeqno>|<get-regMcSeqno>(){}[0]
    final val rootHash // org.ton.block/ShardDescrNew.rootHash|{}rootHash[0]
        final fun <get-rootHash>(): org.ton.bitstring/BitString // org.ton.block/ShardDescrNew.rootHash.<get-rootHash>|<get-rootHash>(){}[0]
    final val seqNo // org.ton.block/ShardDescrNew.seqNo|{}seqNo[0]
        final fun <get-seqNo>(): kotlin/UInt // org.ton.block/ShardDescrNew.seqNo.<get-seqNo>|<get-seqNo>(){}[0]
    final val splitMergeAt // org.ton.block/ShardDescrNew.splitMergeAt|{}splitMergeAt[0]
        final fun <get-splitMergeAt>(): org.ton.block/FutureSplitMerge // org.ton.block/ShardDescrNew.splitMergeAt.<get-splitMergeAt>|<get-splitMergeAt>(){}[0]
    final val startLt // org.ton.block/ShardDescrNew.startLt|{}startLt[0]
        final fun <get-startLt>(): kotlin/ULong // org.ton.block/ShardDescrNew.startLt.<get-startLt>|<get-startLt>(){}[0]
    final val wantMerge // org.ton.block/ShardDescrNew.wantMerge|{}wantMerge[0]
        final fun <get-wantMerge>(): kotlin/Boolean // org.ton.block/ShardDescrNew.wantMerge.<get-wantMerge>|<get-wantMerge>(){}[0]
    final val wantSplit // org.ton.block/ShardDescrNew.wantSplit|{}wantSplit[0]
        final fun <get-wantSplit>(): kotlin/Boolean // org.ton.block/ShardDescrNew.wantSplit.<get-wantSplit>|<get-wantSplit>(){}[0]

    final fun component1(): kotlin/UInt // org.ton.block/ShardDescrNew.component1|component1(){}[0]
    final fun component10(): kotlin/Boolean // org.ton.block/ShardDescrNew.component10|component10(){}[0]
    final fun component11(): kotlin/Boolean // org.ton.block/ShardDescrNew.component11|component11(){}[0]
    final fun component12(): kotlin/Int // org.ton.block/ShardDescrNew.component12|component12(){}[0]
    final fun component13(): kotlin/UInt // org.ton.block/ShardDescrNew.component13|component13(){}[0]
    final fun component14(): kotlin/ULong // org.ton.block/ShardDescrNew.component14|component14(){}[0]
    final fun component15(): kotlin/UInt // org.ton.block/ShardDescrNew.component15|component15(){}[0]
    final fun component16(): kotlin/UInt // org.ton.block/ShardDescrNew.component16|component16(){}[0]
    final fun component17(): org.ton.block/FutureSplitMerge // org.ton.block/ShardDescrNew.component17|component17(){}[0]
    final fun component18(): org.ton.tlb/CellRef<org.ton.block/ShardDescrAux> // org.ton.block/ShardDescrNew.component18|component18(){}[0]
    final fun component2(): kotlin/UInt // org.ton.block/ShardDescrNew.component2|component2(){}[0]
    final fun component3(): kotlin/ULong // org.ton.block/ShardDescrNew.component3|component3(){}[0]
    final fun component4(): kotlin/ULong // org.ton.block/ShardDescrNew.component4|component4(){}[0]
    final fun component5(): org.ton.bitstring/BitString // org.ton.block/ShardDescrNew.component5|component5(){}[0]
    final fun component6(): org.ton.bitstring/BitString // org.ton.block/ShardDescrNew.component6|component6(){}[0]
    final fun component7(): kotlin/Boolean // org.ton.block/ShardDescrNew.component7|component7(){}[0]
    final fun component8(): kotlin/Boolean // org.ton.block/ShardDescrNew.component8|component8(){}[0]
    final fun component9(): kotlin/Boolean // org.ton.block/ShardDescrNew.component9|component9(){}[0]
    final fun copy(kotlin/UInt = ..., kotlin/UInt = ..., kotlin/ULong = ..., kotlin/ULong = ..., org.ton.bitstring/BitString = ..., org.ton.bitstring/BitString = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Int = ..., kotlin/UInt = ..., kotlin/ULong = ..., kotlin/UInt = ..., kotlin/UInt = ..., org.ton.block/FutureSplitMerge = ..., org.ton.tlb/CellRef<org.ton.block/ShardDescrAux> = ...): org.ton.block/ShardDescrNew // org.ton.block/ShardDescrNew.copy|copy(kotlin.UInt;kotlin.UInt;kotlin.ULong;kotlin.ULong;org.ton.bitstring.BitString;org.ton.bitstring.BitString;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Int;kotlin.UInt;kotlin.ULong;kotlin.UInt;kotlin.UInt;org.ton.block.FutureSplitMerge;org.ton.tlb.CellRef<org.ton.block.ShardDescrAux>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/ShardDescrNew.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/ShardDescrNew.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/ShardDescrNew.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/ShardDescrNew.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/ShardDescrNew> { // org.ton.block/ShardDescrNew.Companion|null[0]
        final fun createCell(org.ton.block/ShardDescrNew): org.ton.cell/Cell // org.ton.block/ShardDescrNew.Companion.createCell|createCell(org.ton.block.ShardDescrNew){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/ShardDescrNew // org.ton.block/ShardDescrNew.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/ShardDescrNew // org.ton.block/ShardDescrNew.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/ShardDescrNew // org.ton.block/ShardDescrNew.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ShardDescrNew) // org.ton.block/ShardDescrNew.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ShardDescrNew){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ShardDescrNew, org.ton.kotlin.cell/CellContext) // org.ton.block/ShardDescrNew.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ShardDescrNew;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/ShardDescrNew> // org.ton.block/ShardDescrNew.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/ShardDescrOld : org.ton.block/ShardDescr { // org.ton.block/ShardDescrOld|null[0]
    constructor <init>(kotlin/UInt, kotlin/UInt, kotlin/ULong, kotlin/ULong, org.ton.bitstring/BitString, org.ton.bitstring/BitString, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean, kotlin/Int, kotlin/UInt, kotlin/ULong, kotlin/UInt, kotlin/UInt, org.ton.block/FutureSplitMerge, org.ton.block/CurrencyCollection, org.ton.block/CurrencyCollection) // org.ton.block/ShardDescrOld.<init>|<init>(kotlin.UInt;kotlin.UInt;kotlin.ULong;kotlin.ULong;org.ton.bitstring.BitString;org.ton.bitstring.BitString;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Int;kotlin.UInt;kotlin.ULong;kotlin.UInt;kotlin.UInt;org.ton.block.FutureSplitMerge;org.ton.block.CurrencyCollection;org.ton.block.CurrencyCollection){}[0]

    final val beforeMerge // org.ton.block/ShardDescrOld.beforeMerge|{}beforeMerge[0]
        final fun <get-beforeMerge>(): kotlin/Boolean // org.ton.block/ShardDescrOld.beforeMerge.<get-beforeMerge>|<get-beforeMerge>(){}[0]
    final val beforeSplit // org.ton.block/ShardDescrOld.beforeSplit|{}beforeSplit[0]
        final fun <get-beforeSplit>(): kotlin/Boolean // org.ton.block/ShardDescrOld.beforeSplit.<get-beforeSplit>|<get-beforeSplit>(){}[0]
    final val endLt // org.ton.block/ShardDescrOld.endLt|{}endLt[0]
        final fun <get-endLt>(): kotlin/ULong // org.ton.block/ShardDescrOld.endLt.<get-endLt>|<get-endLt>(){}[0]
    final val feesCollected // org.ton.block/ShardDescrOld.feesCollected|{}feesCollected[0]
        final fun <get-feesCollected>(): org.ton.block/CurrencyCollection // org.ton.block/ShardDescrOld.feesCollected.<get-feesCollected>|<get-feesCollected>(){}[0]
    final val fileHash // org.ton.block/ShardDescrOld.fileHash|{}fileHash[0]
        final fun <get-fileHash>(): org.ton.bitstring/BitString // org.ton.block/ShardDescrOld.fileHash.<get-fileHash>|<get-fileHash>(){}[0]
    final val flags // org.ton.block/ShardDescrOld.flags|{}flags[0]
        final fun <get-flags>(): kotlin/Int // org.ton.block/ShardDescrOld.flags.<get-flags>|<get-flags>(){}[0]
    final val fundsCreated // org.ton.block/ShardDescrOld.fundsCreated|{}fundsCreated[0]
        final fun <get-fundsCreated>(): org.ton.block/CurrencyCollection // org.ton.block/ShardDescrOld.fundsCreated.<get-fundsCreated>|<get-fundsCreated>(){}[0]
    final val genUtime // org.ton.block/ShardDescrOld.genUtime|{}genUtime[0]
        final fun <get-genUtime>(): kotlin/UInt // org.ton.block/ShardDescrOld.genUtime.<get-genUtime>|<get-genUtime>(){}[0]
    final val minRefMcSeqno // org.ton.block/ShardDescrOld.minRefMcSeqno|{}minRefMcSeqno[0]
        final fun <get-minRefMcSeqno>(): kotlin/UInt // org.ton.block/ShardDescrOld.minRefMcSeqno.<get-minRefMcSeqno>|<get-minRefMcSeqno>(){}[0]
    final val nextCatchainSeqno // org.ton.block/ShardDescrOld.nextCatchainSeqno|{}nextCatchainSeqno[0]
        final fun <get-nextCatchainSeqno>(): kotlin/UInt // org.ton.block/ShardDescrOld.nextCatchainSeqno.<get-nextCatchainSeqno>|<get-nextCatchainSeqno>(){}[0]
    final val nextValidatorShard // org.ton.block/ShardDescrOld.nextValidatorShard|{}nextValidatorShard[0]
        final fun <get-nextValidatorShard>(): kotlin/ULong // org.ton.block/ShardDescrOld.nextValidatorShard.<get-nextValidatorShard>|<get-nextValidatorShard>(){}[0]
    final val nxCcUpdated // org.ton.block/ShardDescrOld.nxCcUpdated|{}nxCcUpdated[0]
        final fun <get-nxCcUpdated>(): kotlin/Boolean // org.ton.block/ShardDescrOld.nxCcUpdated.<get-nxCcUpdated>|<get-nxCcUpdated>(){}[0]
    final val regMcSeqno // org.ton.block/ShardDescrOld.regMcSeqno|{}regMcSeqno[0]
        final fun <get-regMcSeqno>(): kotlin/UInt // org.ton.block/ShardDescrOld.regMcSeqno.<get-regMcSeqno>|<get-regMcSeqno>(){}[0]
    final val rootHash // org.ton.block/ShardDescrOld.rootHash|{}rootHash[0]
        final fun <get-rootHash>(): org.ton.bitstring/BitString // org.ton.block/ShardDescrOld.rootHash.<get-rootHash>|<get-rootHash>(){}[0]
    final val seqNo // org.ton.block/ShardDescrOld.seqNo|{}seqNo[0]
        final fun <get-seqNo>(): kotlin/UInt // org.ton.block/ShardDescrOld.seqNo.<get-seqNo>|<get-seqNo>(){}[0]
    final val splitMergeAt // org.ton.block/ShardDescrOld.splitMergeAt|{}splitMergeAt[0]
        final fun <get-splitMergeAt>(): org.ton.block/FutureSplitMerge // org.ton.block/ShardDescrOld.splitMergeAt.<get-splitMergeAt>|<get-splitMergeAt>(){}[0]
    final val startLt // org.ton.block/ShardDescrOld.startLt|{}startLt[0]
        final fun <get-startLt>(): kotlin/ULong // org.ton.block/ShardDescrOld.startLt.<get-startLt>|<get-startLt>(){}[0]
    final val wantMerge // org.ton.block/ShardDescrOld.wantMerge|{}wantMerge[0]
        final fun <get-wantMerge>(): kotlin/Boolean // org.ton.block/ShardDescrOld.wantMerge.<get-wantMerge>|<get-wantMerge>(){}[0]
    final val wantSplit // org.ton.block/ShardDescrOld.wantSplit|{}wantSplit[0]
        final fun <get-wantSplit>(): kotlin/Boolean // org.ton.block/ShardDescrOld.wantSplit.<get-wantSplit>|<get-wantSplit>(){}[0]

    final fun component1(): kotlin/UInt // org.ton.block/ShardDescrOld.component1|component1(){}[0]
    final fun component10(): kotlin/Boolean // org.ton.block/ShardDescrOld.component10|component10(){}[0]
    final fun component11(): kotlin/Boolean // org.ton.block/ShardDescrOld.component11|component11(){}[0]
    final fun component12(): kotlin/Int // org.ton.block/ShardDescrOld.component12|component12(){}[0]
    final fun component13(): kotlin/UInt // org.ton.block/ShardDescrOld.component13|component13(){}[0]
    final fun component14(): kotlin/ULong // org.ton.block/ShardDescrOld.component14|component14(){}[0]
    final fun component15(): kotlin/UInt // org.ton.block/ShardDescrOld.component15|component15(){}[0]
    final fun component16(): kotlin/UInt // org.ton.block/ShardDescrOld.component16|component16(){}[0]
    final fun component17(): org.ton.block/FutureSplitMerge // org.ton.block/ShardDescrOld.component17|component17(){}[0]
    final fun component18(): org.ton.block/CurrencyCollection // org.ton.block/ShardDescrOld.component18|component18(){}[0]
    final fun component19(): org.ton.block/CurrencyCollection // org.ton.block/ShardDescrOld.component19|component19(){}[0]
    final fun component2(): kotlin/UInt // org.ton.block/ShardDescrOld.component2|component2(){}[0]
    final fun component3(): kotlin/ULong // org.ton.block/ShardDescrOld.component3|component3(){}[0]
    final fun component4(): kotlin/ULong // org.ton.block/ShardDescrOld.component4|component4(){}[0]
    final fun component5(): org.ton.bitstring/BitString // org.ton.block/ShardDescrOld.component5|component5(){}[0]
    final fun component6(): org.ton.bitstring/BitString // org.ton.block/ShardDescrOld.component6|component6(){}[0]
    final fun component7(): kotlin/Boolean // org.ton.block/ShardDescrOld.component7|component7(){}[0]
    final fun component8(): kotlin/Boolean // org.ton.block/ShardDescrOld.component8|component8(){}[0]
    final fun component9(): kotlin/Boolean // org.ton.block/ShardDescrOld.component9|component9(){}[0]
    final fun copy(kotlin/UInt = ..., kotlin/UInt = ..., kotlin/ULong = ..., kotlin/ULong = ..., org.ton.bitstring/BitString = ..., org.ton.bitstring/BitString = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Int = ..., kotlin/UInt = ..., kotlin/ULong = ..., kotlin/UInt = ..., kotlin/UInt = ..., org.ton.block/FutureSplitMerge = ..., org.ton.block/CurrencyCollection = ..., org.ton.block/CurrencyCollection = ...): org.ton.block/ShardDescrOld // org.ton.block/ShardDescrOld.copy|copy(kotlin.UInt;kotlin.UInt;kotlin.ULong;kotlin.ULong;org.ton.bitstring.BitString;org.ton.bitstring.BitString;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Int;kotlin.UInt;kotlin.ULong;kotlin.UInt;kotlin.UInt;org.ton.block.FutureSplitMerge;org.ton.block.CurrencyCollection;org.ton.block.CurrencyCollection){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/ShardDescrOld.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/ShardDescrOld.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/ShardDescrOld.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/ShardDescrOld.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/ShardDescrOld> { // org.ton.block/ShardDescrOld.Companion|null[0]
        final fun createCell(org.ton.block/ShardDescrOld): org.ton.cell/Cell // org.ton.block/ShardDescrOld.Companion.createCell|createCell(org.ton.block.ShardDescrOld){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/ShardDescrOld // org.ton.block/ShardDescrOld.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/ShardDescrOld // org.ton.block/ShardDescrOld.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/ShardDescrOld // org.ton.block/ShardDescrOld.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ShardDescrOld) // org.ton.block/ShardDescrOld.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ShardDescrOld){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ShardDescrOld, org.ton.kotlin.cell/CellContext) // org.ton.block/ShardDescrOld.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ShardDescrOld;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/ShardDescrOld> // org.ton.block/ShardDescrOld.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/ShardFeeCreated : org.ton.tlb/TlbObject { // org.ton.block/ShardFeeCreated|null[0]
    constructor <init>(org.ton.block/CurrencyCollection, org.ton.block/CurrencyCollection) // org.ton.block/ShardFeeCreated.<init>|<init>(org.ton.block.CurrencyCollection;org.ton.block.CurrencyCollection){}[0]

    final val create // org.ton.block/ShardFeeCreated.create|{}create[0]
        final fun <get-create>(): org.ton.block/CurrencyCollection // org.ton.block/ShardFeeCreated.create.<get-create>|<get-create>(){}[0]
    final val fees // org.ton.block/ShardFeeCreated.fees|{}fees[0]
        final fun <get-fees>(): org.ton.block/CurrencyCollection // org.ton.block/ShardFeeCreated.fees.<get-fees>|<get-fees>(){}[0]

    final fun component1(): org.ton.block/CurrencyCollection // org.ton.block/ShardFeeCreated.component1|component1(){}[0]
    final fun component2(): org.ton.block/CurrencyCollection // org.ton.block/ShardFeeCreated.component2|component2(){}[0]
    final fun copy(org.ton.block/CurrencyCollection = ..., org.ton.block/CurrencyCollection = ...): org.ton.block/ShardFeeCreated // org.ton.block/ShardFeeCreated.copy|copy(org.ton.block.CurrencyCollection;org.ton.block.CurrencyCollection){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/ShardFeeCreated.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/ShardFeeCreated.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/ShardFeeCreated.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/ShardFeeCreated.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/ShardFeeCreated> { // org.ton.block/ShardFeeCreated.Companion|null[0]
        final fun createCell(org.ton.block/ShardFeeCreated): org.ton.cell/Cell // org.ton.block/ShardFeeCreated.Companion.createCell|createCell(org.ton.block.ShardFeeCreated){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/ShardFeeCreated // org.ton.block/ShardFeeCreated.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/ShardFeeCreated // org.ton.block/ShardFeeCreated.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/ShardFeeCreated // org.ton.block/ShardFeeCreated.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ShardFeeCreated) // org.ton.block/ShardFeeCreated.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ShardFeeCreated){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ShardFeeCreated, org.ton.kotlin.cell/CellContext) // org.ton.block/ShardFeeCreated.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ShardFeeCreated;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/ShardFeeCreated> // org.ton.block/ShardFeeCreated.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/ShardIdent : org.ton.tlb/TlbObject { // org.ton.block/ShardIdent|null[0]
    constructor <init>(kotlin/Int, kotlin/Int, kotlin/ULong) // org.ton.block/ShardIdent.<init>|<init>(kotlin.Int;kotlin.Int;kotlin.ULong){}[0]

    final val shardPfxBits // org.ton.block/ShardIdent.shardPfxBits|{}shardPfxBits[0]
        final fun <get-shardPfxBits>(): kotlin/Int // org.ton.block/ShardIdent.shardPfxBits.<get-shardPfxBits>|<get-shardPfxBits>(){}[0]
    final val shardPrefix // org.ton.block/ShardIdent.shardPrefix|{}shardPrefix[0]
        final fun <get-shardPrefix>(): kotlin/ULong // org.ton.block/ShardIdent.shardPrefix.<get-shardPrefix>|<get-shardPrefix>(){}[0]
    final val workchainId // org.ton.block/ShardIdent.workchainId|{}workchainId[0]
        final fun <get-workchainId>(): kotlin/Int // org.ton.block/ShardIdent.workchainId.<get-workchainId>|<get-workchainId>(){}[0]

    final fun component1(): kotlin/Int // org.ton.block/ShardIdent.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.block/ShardIdent.component2|component2(){}[0]
    final fun component3(): kotlin/ULong // org.ton.block/ShardIdent.component3|component3(){}[0]
    final fun copy(kotlin/Int = ..., kotlin/Int = ..., kotlin/ULong = ...): org.ton.block/ShardIdent // org.ton.block/ShardIdent.copy|copy(kotlin.Int;kotlin.Int;kotlin.ULong){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/ShardIdent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/ShardIdent.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/ShardIdent.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/ShardIdent.toString|toString(){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.block/ShardIdent> { // org.ton.block/ShardIdent.Companion|null[0]
        final fun createCell(org.ton.block/ShardIdent): org.ton.cell/Cell // org.ton.block/ShardIdent.Companion.createCell|createCell(org.ton.block.ShardIdent){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/ShardIdent // org.ton.block/ShardIdent.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/ShardIdent // org.ton.block/ShardIdent.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/ShardIdent // org.ton.block/ShardIdent.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ShardIdent) // org.ton.block/ShardIdent.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ShardIdent){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ShardIdent, org.ton.kotlin.cell/CellContext) // org.ton.block/ShardIdent.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ShardIdent;org.ton.kotlin.cell.CellContext){}[0]
    }
}

final class org.ton.block/ShardStateUnsplit : org.ton.block/ShardState { // org.ton.block/ShardStateUnsplit|null[0]
    constructor <init>(kotlin/Int, org.ton.block/ShardIdent, kotlin/UInt, kotlin/Int, kotlin/UInt, kotlin/ULong, kotlin/UInt, org.ton.tlb/CellRef<org.ton.block/OutMsgQueueInfo>, kotlin/Boolean, org.ton.tlb/CellRef<org.ton.block/ShardAccounts>, org.ton.tlb/CellRef<org.ton.block/ShardStateUnsplitAux>, org.ton.block/Maybe<org.ton.tlb/CellRef<org.ton.block/McStateExtra>>) // org.ton.block/ShardStateUnsplit.<init>|<init>(kotlin.Int;org.ton.block.ShardIdent;kotlin.UInt;kotlin.Int;kotlin.UInt;kotlin.ULong;kotlin.UInt;org.ton.tlb.CellRef<org.ton.block.OutMsgQueueInfo>;kotlin.Boolean;org.ton.tlb.CellRef<org.ton.block.ShardAccounts>;org.ton.tlb.CellRef<org.ton.block.ShardStateUnsplitAux>;org.ton.block.Maybe<org.ton.tlb.CellRef<org.ton.block.McStateExtra>>){}[0]

    final val accounts // org.ton.block/ShardStateUnsplit.accounts|{}accounts[0]
        final fun <get-accounts>(): org.ton.tlb/CellRef<org.ton.block/ShardAccounts> // org.ton.block/ShardStateUnsplit.accounts.<get-accounts>|<get-accounts>(){}[0]
    final val beforeSplit // org.ton.block/ShardStateUnsplit.beforeSplit|{}beforeSplit[0]
        final fun <get-beforeSplit>(): kotlin/Boolean // org.ton.block/ShardStateUnsplit.beforeSplit.<get-beforeSplit>|<get-beforeSplit>(){}[0]
    final val custom // org.ton.block/ShardStateUnsplit.custom|{}custom[0]
        final fun <get-custom>(): org.ton.block/Maybe<org.ton.tlb/CellRef<org.ton.block/McStateExtra>> // org.ton.block/ShardStateUnsplit.custom.<get-custom>|<get-custom>(){}[0]
    final val genLt // org.ton.block/ShardStateUnsplit.genLt|{}genLt[0]
        final fun <get-genLt>(): kotlin/ULong // org.ton.block/ShardStateUnsplit.genLt.<get-genLt>|<get-genLt>(){}[0]
    final val genUtime // org.ton.block/ShardStateUnsplit.genUtime|{}genUtime[0]
        final fun <get-genUtime>(): kotlin/UInt // org.ton.block/ShardStateUnsplit.genUtime.<get-genUtime>|<get-genUtime>(){}[0]
    final val globalId // org.ton.block/ShardStateUnsplit.globalId|{}globalId[0]
        final fun <get-globalId>(): kotlin/Int // org.ton.block/ShardStateUnsplit.globalId.<get-globalId>|<get-globalId>(){}[0]
    final val minRefMcSeqno // org.ton.block/ShardStateUnsplit.minRefMcSeqno|{}minRefMcSeqno[0]
        final fun <get-minRefMcSeqno>(): kotlin/UInt // org.ton.block/ShardStateUnsplit.minRefMcSeqno.<get-minRefMcSeqno>|<get-minRefMcSeqno>(){}[0]
    final val outMsgQueueInfo // org.ton.block/ShardStateUnsplit.outMsgQueueInfo|{}outMsgQueueInfo[0]
        final fun <get-outMsgQueueInfo>(): org.ton.tlb/CellRef<org.ton.block/OutMsgQueueInfo> // org.ton.block/ShardStateUnsplit.outMsgQueueInfo.<get-outMsgQueueInfo>|<get-outMsgQueueInfo>(){}[0]
    final val r1 // org.ton.block/ShardStateUnsplit.r1|{}r1[0]
        final fun <get-r1>(): org.ton.tlb/CellRef<org.ton.block/ShardStateUnsplitAux> // org.ton.block/ShardStateUnsplit.r1.<get-r1>|<get-r1>(){}[0]
    final val seqNo // org.ton.block/ShardStateUnsplit.seqNo|{}seqNo[0]
        final fun <get-seqNo>(): kotlin/UInt // org.ton.block/ShardStateUnsplit.seqNo.<get-seqNo>|<get-seqNo>(){}[0]
    final val shardId // org.ton.block/ShardStateUnsplit.shardId|{}shardId[0]
        final fun <get-shardId>(): org.ton.block/ShardIdent // org.ton.block/ShardStateUnsplit.shardId.<get-shardId>|<get-shardId>(){}[0]
    final val vertSeqNo // org.ton.block/ShardStateUnsplit.vertSeqNo|{}vertSeqNo[0]
        final fun <get-vertSeqNo>(): kotlin/Int // org.ton.block/ShardStateUnsplit.vertSeqNo.<get-vertSeqNo>|<get-vertSeqNo>(){}[0]

    final fun component1(): kotlin/Int // org.ton.block/ShardStateUnsplit.component1|component1(){}[0]
    final fun component10(): org.ton.tlb/CellRef<org.ton.block/ShardAccounts> // org.ton.block/ShardStateUnsplit.component10|component10(){}[0]
    final fun component11(): org.ton.tlb/CellRef<org.ton.block/ShardStateUnsplitAux> // org.ton.block/ShardStateUnsplit.component11|component11(){}[0]
    final fun component12(): org.ton.block/Maybe<org.ton.tlb/CellRef<org.ton.block/McStateExtra>> // org.ton.block/ShardStateUnsplit.component12|component12(){}[0]
    final fun component2(): org.ton.block/ShardIdent // org.ton.block/ShardStateUnsplit.component2|component2(){}[0]
    final fun component3(): kotlin/UInt // org.ton.block/ShardStateUnsplit.component3|component3(){}[0]
    final fun component4(): kotlin/Int // org.ton.block/ShardStateUnsplit.component4|component4(){}[0]
    final fun component5(): kotlin/UInt // org.ton.block/ShardStateUnsplit.component5|component5(){}[0]
    final fun component6(): kotlin/ULong // org.ton.block/ShardStateUnsplit.component6|component6(){}[0]
    final fun component7(): kotlin/UInt // org.ton.block/ShardStateUnsplit.component7|component7(){}[0]
    final fun component8(): org.ton.tlb/CellRef<org.ton.block/OutMsgQueueInfo> // org.ton.block/ShardStateUnsplit.component8|component8(){}[0]
    final fun component9(): kotlin/Boolean // org.ton.block/ShardStateUnsplit.component9|component9(){}[0]
    final fun copy(kotlin/Int = ..., org.ton.block/ShardIdent = ..., kotlin/UInt = ..., kotlin/Int = ..., kotlin/UInt = ..., kotlin/ULong = ..., kotlin/UInt = ..., org.ton.tlb/CellRef<org.ton.block/OutMsgQueueInfo> = ..., kotlin/Boolean = ..., org.ton.tlb/CellRef<org.ton.block/ShardAccounts> = ..., org.ton.tlb/CellRef<org.ton.block/ShardStateUnsplitAux> = ..., org.ton.block/Maybe<org.ton.tlb/CellRef<org.ton.block/McStateExtra>> = ...): org.ton.block/ShardStateUnsplit // org.ton.block/ShardStateUnsplit.copy|copy(kotlin.Int;org.ton.block.ShardIdent;kotlin.UInt;kotlin.Int;kotlin.UInt;kotlin.ULong;kotlin.UInt;org.ton.tlb.CellRef<org.ton.block.OutMsgQueueInfo>;kotlin.Boolean;org.ton.tlb.CellRef<org.ton.block.ShardAccounts>;org.ton.tlb.CellRef<org.ton.block.ShardStateUnsplitAux>;org.ton.block.Maybe<org.ton.tlb.CellRef<org.ton.block.McStateExtra>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/ShardStateUnsplit.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/ShardStateUnsplit.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/ShardStateUnsplit.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/ShardStateUnsplit.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/ShardStateUnsplit> { // org.ton.block/ShardStateUnsplit.Companion|null[0]
        final fun createCell(org.ton.block/ShardStateUnsplit): org.ton.cell/Cell // org.ton.block/ShardStateUnsplit.Companion.createCell|createCell(org.ton.block.ShardStateUnsplit){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/ShardStateUnsplit // org.ton.block/ShardStateUnsplit.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/ShardStateUnsplit // org.ton.block/ShardStateUnsplit.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/ShardStateUnsplit // org.ton.block/ShardStateUnsplit.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ShardStateUnsplit) // org.ton.block/ShardStateUnsplit.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ShardStateUnsplit){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ShardStateUnsplit, org.ton.kotlin.cell/CellContext) // org.ton.block/ShardStateUnsplit.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ShardStateUnsplit;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/ShardStateUnsplit> // org.ton.block/ShardStateUnsplit.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/ShardStateUnsplitAux : org.ton.tlb/TlbObject { // org.ton.block/ShardStateUnsplitAux|null[0]
    constructor <init>(kotlin/ULong, kotlin/ULong, org.ton.block/CurrencyCollection, org.ton.block/CurrencyCollection, org.ton.hashmap/HashMapE<org.ton.block/LibDescr>, org.ton.block/Maybe<org.ton.block/BlkMasterInfo>) // org.ton.block/ShardStateUnsplitAux.<init>|<init>(kotlin.ULong;kotlin.ULong;org.ton.block.CurrencyCollection;org.ton.block.CurrencyCollection;org.ton.hashmap.HashMapE<org.ton.block.LibDescr>;org.ton.block.Maybe<org.ton.block.BlkMasterInfo>){}[0]

    final val libraries // org.ton.block/ShardStateUnsplitAux.libraries|{}libraries[0]
        final fun <get-libraries>(): org.ton.hashmap/HashMapE<org.ton.block/LibDescr> // org.ton.block/ShardStateUnsplitAux.libraries.<get-libraries>|<get-libraries>(){}[0]
    final val masterRef // org.ton.block/ShardStateUnsplitAux.masterRef|{}masterRef[0]
        final fun <get-masterRef>(): org.ton.block/Maybe<org.ton.block/BlkMasterInfo> // org.ton.block/ShardStateUnsplitAux.masterRef.<get-masterRef>|<get-masterRef>(){}[0]
    final val overloadHistory // org.ton.block/ShardStateUnsplitAux.overloadHistory|{}overloadHistory[0]
        final fun <get-overloadHistory>(): kotlin/ULong // org.ton.block/ShardStateUnsplitAux.overloadHistory.<get-overloadHistory>|<get-overloadHistory>(){}[0]
    final val totalBalance // org.ton.block/ShardStateUnsplitAux.totalBalance|{}totalBalance[0]
        final fun <get-totalBalance>(): org.ton.block/CurrencyCollection // org.ton.block/ShardStateUnsplitAux.totalBalance.<get-totalBalance>|<get-totalBalance>(){}[0]
    final val totalValidatorFees // org.ton.block/ShardStateUnsplitAux.totalValidatorFees|{}totalValidatorFees[0]
        final fun <get-totalValidatorFees>(): org.ton.block/CurrencyCollection // org.ton.block/ShardStateUnsplitAux.totalValidatorFees.<get-totalValidatorFees>|<get-totalValidatorFees>(){}[0]
    final val underloadHistory // org.ton.block/ShardStateUnsplitAux.underloadHistory|{}underloadHistory[0]
        final fun <get-underloadHistory>(): kotlin/ULong // org.ton.block/ShardStateUnsplitAux.underloadHistory.<get-underloadHistory>|<get-underloadHistory>(){}[0]

    final fun component1(): kotlin/ULong // org.ton.block/ShardStateUnsplitAux.component1|component1(){}[0]
    final fun component2(): kotlin/ULong // org.ton.block/ShardStateUnsplitAux.component2|component2(){}[0]
    final fun component3(): org.ton.block/CurrencyCollection // org.ton.block/ShardStateUnsplitAux.component3|component3(){}[0]
    final fun component4(): org.ton.block/CurrencyCollection // org.ton.block/ShardStateUnsplitAux.component4|component4(){}[0]
    final fun component5(): org.ton.hashmap/HashMapE<org.ton.block/LibDescr> // org.ton.block/ShardStateUnsplitAux.component5|component5(){}[0]
    final fun component6(): org.ton.block/Maybe<org.ton.block/BlkMasterInfo> // org.ton.block/ShardStateUnsplitAux.component6|component6(){}[0]
    final fun copy(kotlin/ULong = ..., kotlin/ULong = ..., org.ton.block/CurrencyCollection = ..., org.ton.block/CurrencyCollection = ..., org.ton.hashmap/HashMapE<org.ton.block/LibDescr> = ..., org.ton.block/Maybe<org.ton.block/BlkMasterInfo> = ...): org.ton.block/ShardStateUnsplitAux // org.ton.block/ShardStateUnsplitAux.copy|copy(kotlin.ULong;kotlin.ULong;org.ton.block.CurrencyCollection;org.ton.block.CurrencyCollection;org.ton.hashmap.HashMapE<org.ton.block.LibDescr>;org.ton.block.Maybe<org.ton.block.BlkMasterInfo>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/ShardStateUnsplitAux.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/ShardStateUnsplitAux.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/ShardStateUnsplitAux.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/ShardStateUnsplitAux.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/ShardStateUnsplitAux> { // org.ton.block/ShardStateUnsplitAux.Companion|null[0]
        final fun createCell(org.ton.block/ShardStateUnsplitAux): org.ton.cell/Cell // org.ton.block/ShardStateUnsplitAux.Companion.createCell|createCell(org.ton.block.ShardStateUnsplitAux){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/ShardStateUnsplitAux // org.ton.block/ShardStateUnsplitAux.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/ShardStateUnsplitAux // org.ton.block/ShardStateUnsplitAux.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/ShardStateUnsplitAux // org.ton.block/ShardStateUnsplitAux.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ShardStateUnsplitAux) // org.ton.block/ShardStateUnsplitAux.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ShardStateUnsplitAux){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ShardStateUnsplitAux, org.ton.kotlin.cell/CellContext) // org.ton.block/ShardStateUnsplitAux.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ShardStateUnsplitAux;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/ShardStateUnsplitAux> // org.ton.block/ShardStateUnsplitAux.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/SigPubKey { // org.ton.block/SigPubKey|null[0]
    constructor <init>(org.ton.bitstring/BitString) // org.ton.block/SigPubKey.<init>|<init>(org.ton.bitstring.BitString){}[0]

    final val pubkey // org.ton.block/SigPubKey.pubkey|{}pubkey[0]
        final fun <get-pubkey>(): org.ton.bitstring/BitString // org.ton.block/SigPubKey.pubkey.<get-pubkey>|<get-pubkey>(){}[0]

    final fun component1(): org.ton.bitstring/BitString // org.ton.block/SigPubKey.component1|component1(){}[0]
    final fun copy(org.ton.bitstring/BitString = ...): org.ton.block/SigPubKey // org.ton.block/SigPubKey.copy|copy(org.ton.bitstring.BitString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/SigPubKey.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/SigPubKey.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/SigPubKey.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/SigPubKey> { // org.ton.block/SigPubKey.Companion|null[0]
        final fun createCell(org.ton.block/SigPubKey): org.ton.cell/Cell // org.ton.block/SigPubKey.Companion.createCell|createCell(org.ton.block.SigPubKey){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/SigPubKey // org.ton.block/SigPubKey.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/SigPubKey // org.ton.block/SigPubKey.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/SigPubKey // org.ton.block/SigPubKey.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/SigPubKey) // org.ton.block/SigPubKey.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.SigPubKey){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/SigPubKey, org.ton.kotlin.cell/CellContext) // org.ton.block/SigPubKey.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.SigPubKey;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/SigPubKey> // org.ton.block/SigPubKey.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/SignedCertificate { // org.ton.block/SignedCertificate|null[0]
    constructor <init>(org.ton.block/Certificate, org.ton.block/CryptoSignature) // org.ton.block/SignedCertificate.<init>|<init>(org.ton.block.Certificate;org.ton.block.CryptoSignature){}[0]

    final val certificate // org.ton.block/SignedCertificate.certificate|{}certificate[0]
        final fun <get-certificate>(): org.ton.block/Certificate // org.ton.block/SignedCertificate.certificate.<get-certificate>|<get-certificate>(){}[0]
    final val certificate_signature // org.ton.block/SignedCertificate.certificate_signature|{}certificate_signature[0]
        final fun <get-certificate_signature>(): org.ton.block/CryptoSignature // org.ton.block/SignedCertificate.certificate_signature.<get-certificate_signature>|<get-certificate_signature>(){}[0]

    final fun component1(): org.ton.block/Certificate // org.ton.block/SignedCertificate.component1|component1(){}[0]
    final fun component2(): org.ton.block/CryptoSignature // org.ton.block/SignedCertificate.component2|component2(){}[0]
    final fun copy(org.ton.block/Certificate = ..., org.ton.block/CryptoSignature = ...): org.ton.block/SignedCertificate // org.ton.block/SignedCertificate.copy|copy(org.ton.block.Certificate;org.ton.block.CryptoSignature){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/SignedCertificate.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/SignedCertificate.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/SignedCertificate.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/SignedCertificate> { // org.ton.block/SignedCertificate.Companion|null[0]
        final fun createCell(org.ton.block/SignedCertificate): org.ton.cell/Cell // org.ton.block/SignedCertificate.Companion.createCell|createCell(org.ton.block.SignedCertificate){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/SignedCertificate // org.ton.block/SignedCertificate.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/SignedCertificate // org.ton.block/SignedCertificate.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/SignedCertificate // org.ton.block/SignedCertificate.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/SignedCertificate) // org.ton.block/SignedCertificate.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.SignedCertificate){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/SignedCertificate, org.ton.kotlin.cell/CellContext) // org.ton.block/SignedCertificate.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.SignedCertificate;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/SignedCertificate> // org.ton.block/SignedCertificate.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/SimpleLib : org.ton.tlb/TlbObject { // org.ton.block/SimpleLib|null[0]
    constructor <init>(kotlin/Boolean, org.ton.cell/Cell) // org.ton.block/SimpleLib.<init>|<init>(kotlin.Boolean;org.ton.cell.Cell){}[0]

    final val public // org.ton.block/SimpleLib.public|{}public[0]
        final fun <get-public>(): kotlin/Boolean // org.ton.block/SimpleLib.public.<get-public>|<get-public>(){}[0]
    final val root // org.ton.block/SimpleLib.root|{}root[0]
        final fun <get-root>(): org.ton.cell/Cell // org.ton.block/SimpleLib.root.<get-root>|<get-root>(){}[0]

    final fun component1(): kotlin/Boolean // org.ton.block/SimpleLib.component1|component1(){}[0]
    final fun component2(): org.ton.cell/Cell // org.ton.block/SimpleLib.component2|component2(){}[0]
    final fun copy(kotlin/Boolean = ..., org.ton.cell/Cell = ...): org.ton.block/SimpleLib // org.ton.block/SimpleLib.copy|copy(kotlin.Boolean;org.ton.cell.Cell){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/SimpleLib.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/SimpleLib.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/SimpleLib.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/SimpleLib.toString|toString(){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.block/SimpleLib> { // org.ton.block/SimpleLib.Companion|null[0]
        final fun createCell(org.ton.block/SimpleLib): org.ton.cell/Cell // org.ton.block/SimpleLib.Companion.createCell|createCell(org.ton.block.SimpleLib){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/SimpleLib // org.ton.block/SimpleLib.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/SimpleLib // org.ton.block/SimpleLib.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/SimpleLib // org.ton.block/SimpleLib.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/SimpleLib) // org.ton.block/SimpleLib.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.SimpleLib){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/SimpleLib, org.ton.kotlin.cell/CellContext) // org.ton.block/SimpleLib.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.SimpleLib;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCodec(): org.ton.tlb/TlbConstructor<org.ton.block/SimpleLib> // org.ton.block/SimpleLib.Companion.tlbCodec|tlbCodec(){}[0]
    }
}

final class org.ton.block/SmartContractInfo { // org.ton.block/SmartContractInfo|null[0]
    constructor <init>(kotlin/Int, kotlin/Int, kotlin/Long, kotlin/Long, kotlin/Long, org.ton.bitstring/BitString, org.ton.block/CurrencyCollection, org.ton.block/MsgAddressInt) // org.ton.block/SmartContractInfo.<init>|<init>(kotlin.Int;kotlin.Int;kotlin.Long;kotlin.Long;kotlin.Long;org.ton.bitstring.BitString;org.ton.block.CurrencyCollection;org.ton.block.MsgAddressInt){}[0]

    final val actions // org.ton.block/SmartContractInfo.actions|{}actions[0]
        final fun <get-actions>(): kotlin/Int // org.ton.block/SmartContractInfo.actions.<get-actions>|<get-actions>(){}[0]
    final val balance_remaining // org.ton.block/SmartContractInfo.balance_remaining|{}balance_remaining[0]
        final fun <get-balance_remaining>(): org.ton.block/CurrencyCollection // org.ton.block/SmartContractInfo.balance_remaining.<get-balance_remaining>|<get-balance_remaining>(){}[0]
    final val block_lt // org.ton.block/SmartContractInfo.block_lt|{}block_lt[0]
        final fun <get-block_lt>(): kotlin/Long // org.ton.block/SmartContractInfo.block_lt.<get-block_lt>|<get-block_lt>(){}[0]
    final val msgs_sent // org.ton.block/SmartContractInfo.msgs_sent|{}msgs_sent[0]
        final fun <get-msgs_sent>(): kotlin/Int // org.ton.block/SmartContractInfo.msgs_sent.<get-msgs_sent>|<get-msgs_sent>(){}[0]
    final val myself // org.ton.block/SmartContractInfo.myself|{}myself[0]
        final fun <get-myself>(): org.ton.block/MsgAddressInt // org.ton.block/SmartContractInfo.myself.<get-myself>|<get-myself>(){}[0]
    final val rand_seed // org.ton.block/SmartContractInfo.rand_seed|{}rand_seed[0]
        final fun <get-rand_seed>(): org.ton.bitstring/BitString // org.ton.block/SmartContractInfo.rand_seed.<get-rand_seed>|<get-rand_seed>(){}[0]
    final val trans_lt // org.ton.block/SmartContractInfo.trans_lt|{}trans_lt[0]
        final fun <get-trans_lt>(): kotlin/Long // org.ton.block/SmartContractInfo.trans_lt.<get-trans_lt>|<get-trans_lt>(){}[0]
    final val unixtime // org.ton.block/SmartContractInfo.unixtime|{}unixtime[0]
        final fun <get-unixtime>(): kotlin/Long // org.ton.block/SmartContractInfo.unixtime.<get-unixtime>|<get-unixtime>(){}[0]

    final fun component1(): kotlin/Int // org.ton.block/SmartContractInfo.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.block/SmartContractInfo.component2|component2(){}[0]
    final fun component3(): kotlin/Long // org.ton.block/SmartContractInfo.component3|component3(){}[0]
    final fun component4(): kotlin/Long // org.ton.block/SmartContractInfo.component4|component4(){}[0]
    final fun component5(): kotlin/Long // org.ton.block/SmartContractInfo.component5|component5(){}[0]
    final fun component6(): org.ton.bitstring/BitString // org.ton.block/SmartContractInfo.component6|component6(){}[0]
    final fun component7(): org.ton.block/CurrencyCollection // org.ton.block/SmartContractInfo.component7|component7(){}[0]
    final fun component8(): org.ton.block/MsgAddressInt // org.ton.block/SmartContractInfo.component8|component8(){}[0]
    final fun copy(kotlin/Int = ..., kotlin/Int = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., org.ton.bitstring/BitString = ..., org.ton.block/CurrencyCollection = ..., org.ton.block/MsgAddressInt = ...): org.ton.block/SmartContractInfo // org.ton.block/SmartContractInfo.copy|copy(kotlin.Int;kotlin.Int;kotlin.Long;kotlin.Long;kotlin.Long;org.ton.bitstring.BitString;org.ton.block.CurrencyCollection;org.ton.block.MsgAddressInt){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/SmartContractInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/SmartContractInfo.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/SmartContractInfo.toString|toString(){}[0]
}

final class org.ton.block/SplitMergeInfo : org.ton.tlb/TlbObject { // org.ton.block/SplitMergeInfo|null[0]
    constructor <init>(kotlin/Int, kotlin/Int, org.ton.bitstring/BitString, org.ton.bitstring/BitString) // org.ton.block/SplitMergeInfo.<init>|<init>(kotlin.Int;kotlin.Int;org.ton.bitstring.BitString;org.ton.bitstring.BitString){}[0]

    final val accSplitDepth // org.ton.block/SplitMergeInfo.accSplitDepth|{}accSplitDepth[0]
        final fun <get-accSplitDepth>(): kotlin/Int // org.ton.block/SplitMergeInfo.accSplitDepth.<get-accSplitDepth>|<get-accSplitDepth>(){}[0]
    final val curShardPfxLen // org.ton.block/SplitMergeInfo.curShardPfxLen|{}curShardPfxLen[0]
        final fun <get-curShardPfxLen>(): kotlin/Int // org.ton.block/SplitMergeInfo.curShardPfxLen.<get-curShardPfxLen>|<get-curShardPfxLen>(){}[0]
    final val siblingAddr // org.ton.block/SplitMergeInfo.siblingAddr|{}siblingAddr[0]
        final fun <get-siblingAddr>(): org.ton.bitstring/BitString // org.ton.block/SplitMergeInfo.siblingAddr.<get-siblingAddr>|<get-siblingAddr>(){}[0]
    final val thisAddr // org.ton.block/SplitMergeInfo.thisAddr|{}thisAddr[0]
        final fun <get-thisAddr>(): org.ton.bitstring/BitString // org.ton.block/SplitMergeInfo.thisAddr.<get-thisAddr>|<get-thisAddr>(){}[0]

    final fun component1(): kotlin/Int // org.ton.block/SplitMergeInfo.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.block/SplitMergeInfo.component2|component2(){}[0]
    final fun component3(): org.ton.bitstring/BitString // org.ton.block/SplitMergeInfo.component3|component3(){}[0]
    final fun component4(): org.ton.bitstring/BitString // org.ton.block/SplitMergeInfo.component4|component4(){}[0]
    final fun copy(kotlin/Int = ..., kotlin/Int = ..., org.ton.bitstring/BitString = ..., org.ton.bitstring/BitString = ...): org.ton.block/SplitMergeInfo // org.ton.block/SplitMergeInfo.copy|copy(kotlin.Int;kotlin.Int;org.ton.bitstring.BitString;org.ton.bitstring.BitString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/SplitMergeInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/SplitMergeInfo.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/SplitMergeInfo.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/SplitMergeInfo.toString|toString(){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.block/SplitMergeInfo> { // org.ton.block/SplitMergeInfo.Companion|null[0]
        final fun createCell(org.ton.block/SplitMergeInfo): org.ton.cell/Cell // org.ton.block/SplitMergeInfo.Companion.createCell|createCell(org.ton.block.SplitMergeInfo){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/SplitMergeInfo // org.ton.block/SplitMergeInfo.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/SplitMergeInfo // org.ton.block/SplitMergeInfo.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/SplitMergeInfo // org.ton.block/SplitMergeInfo.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/SplitMergeInfo) // org.ton.block/SplitMergeInfo.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.SplitMergeInfo){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/SplitMergeInfo, org.ton.kotlin.cell/CellContext) // org.ton.block/SplitMergeInfo.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.SplitMergeInfo;org.ton.kotlin.cell.CellContext){}[0]
    }
}

final class org.ton.block/SplitState : org.ton.block/ShardState { // org.ton.block/SplitState|null[0]
    constructor <init>(org.ton.block/ShardStateUnsplit, org.ton.block/ShardStateUnsplit) // org.ton.block/SplitState.<init>|<init>(org.ton.block.ShardStateUnsplit;org.ton.block.ShardStateUnsplit){}[0]

    final val left // org.ton.block/SplitState.left|{}left[0]
        final fun <get-left>(): org.ton.block/ShardStateUnsplit // org.ton.block/SplitState.left.<get-left>|<get-left>(){}[0]
    final val right // org.ton.block/SplitState.right|{}right[0]
        final fun <get-right>(): org.ton.block/ShardStateUnsplit // org.ton.block/SplitState.right.<get-right>|<get-right>(){}[0]

    final fun component1(): org.ton.block/ShardStateUnsplit // org.ton.block/SplitState.component1|component1(){}[0]
    final fun component2(): org.ton.block/ShardStateUnsplit // org.ton.block/SplitState.component2|component2(){}[0]
    final fun copy(org.ton.block/ShardStateUnsplit = ..., org.ton.block/ShardStateUnsplit = ...): org.ton.block/SplitState // org.ton.block/SplitState.copy|copy(org.ton.block.ShardStateUnsplit;org.ton.block.ShardStateUnsplit){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/SplitState.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/SplitState.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/SplitState.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/SplitState.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/SplitState> { // org.ton.block/SplitState.Companion|null[0]
        final fun createCell(org.ton.block/SplitState): org.ton.cell/Cell // org.ton.block/SplitState.Companion.createCell|createCell(org.ton.block.SplitState){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/SplitState // org.ton.block/SplitState.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/SplitState // org.ton.block/SplitState.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/SplitState // org.ton.block/SplitState.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/SplitState) // org.ton.block/SplitState.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.SplitState){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/SplitState, org.ton.kotlin.cell/CellContext) // org.ton.block/SplitState.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.SplitState;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/SplitState> // org.ton.block/SplitState.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/StateInit : org.ton.kotlin.cell/CellSizeable, org.ton.tlb/TlbObject { // org.ton.block/StateInit|null[0]
    constructor <init>(org.ton.block/Maybe<kotlin/UInt>, org.ton.block/Maybe<org.ton.block/TickTock>, org.ton.block/Maybe<org.ton.tlb/CellRef<org.ton.cell/Cell>>, org.ton.block/Maybe<org.ton.tlb/CellRef<org.ton.cell/Cell>>, org.ton.hashmap/HashMapE<org.ton.block/SimpleLib>) // org.ton.block/StateInit.<init>|<init>(org.ton.block.Maybe<kotlin.UInt>;org.ton.block.Maybe<org.ton.block.TickTock>;org.ton.block.Maybe<org.ton.tlb.CellRef<org.ton.cell.Cell>>;org.ton.block.Maybe<org.ton.tlb.CellRef<org.ton.cell.Cell>>;org.ton.hashmap.HashMapE<org.ton.block.SimpleLib>){}[0]
    constructor <init>(org.ton.cell/Cell? = ..., org.ton.cell/Cell? = ..., org.ton.hashmap/HashMapE<org.ton.block/SimpleLib> = ..., kotlin/UInt? = ..., org.ton.block/TickTock? = ...) // org.ton.block/StateInit.<init>|<init>(org.ton.cell.Cell?;org.ton.cell.Cell?;org.ton.hashmap.HashMapE<org.ton.block.SimpleLib>;kotlin.UInt?;org.ton.block.TickTock?){}[0]

    final val cellSize // org.ton.block/StateInit.cellSize|{}cellSize[0]
        final fun <get-cellSize>(): org.ton.kotlin.cell/CellSize // org.ton.block/StateInit.cellSize.<get-cellSize>|<get-cellSize>(){}[0]
    final val code // org.ton.block/StateInit.code|{}code[0]
        final fun <get-code>(): org.ton.block/Maybe<org.ton.tlb/CellRef<org.ton.cell/Cell>> // org.ton.block/StateInit.code.<get-code>|<get-code>(){}[0]
    final val data // org.ton.block/StateInit.data|{}data[0]
        final fun <get-data>(): org.ton.block/Maybe<org.ton.tlb/CellRef<org.ton.cell/Cell>> // org.ton.block/StateInit.data.<get-data>|<get-data>(){}[0]
    final val library // org.ton.block/StateInit.library|{}library[0]
        final fun <get-library>(): org.ton.hashmap/HashMapE<org.ton.block/SimpleLib> // org.ton.block/StateInit.library.<get-library>|<get-library>(){}[0]
    final val special // org.ton.block/StateInit.special|{}special[0]
        final fun <get-special>(): org.ton.block/Maybe<org.ton.block/TickTock> // org.ton.block/StateInit.special.<get-special>|<get-special>(){}[0]
    final val splitDepth // org.ton.block/StateInit.splitDepth|{}splitDepth[0]
        final fun <get-splitDepth>(): org.ton.block/Maybe<kotlin/UInt> // org.ton.block/StateInit.splitDepth.<get-splitDepth>|<get-splitDepth>(){}[0]

    final fun address(kotlin/Int = ...): org.ton.block/AddrStd // org.ton.block/StateInit.address|address(kotlin.Int){}[0]
    final fun component1(): org.ton.block/Maybe<kotlin/UInt> // org.ton.block/StateInit.component1|component1(){}[0]
    final fun component2(): org.ton.block/Maybe<org.ton.block/TickTock> // org.ton.block/StateInit.component2|component2(){}[0]
    final fun component3(): org.ton.block/Maybe<org.ton.tlb/CellRef<org.ton.cell/Cell>> // org.ton.block/StateInit.component3|component3(){}[0]
    final fun component4(): org.ton.block/Maybe<org.ton.tlb/CellRef<org.ton.cell/Cell>> // org.ton.block/StateInit.component4|component4(){}[0]
    final fun component5(): org.ton.hashmap/HashMapE<org.ton.block/SimpleLib> // org.ton.block/StateInit.component5|component5(){}[0]
    final fun copy(org.ton.block/Maybe<kotlin/UInt> = ..., org.ton.block/Maybe<org.ton.block/TickTock> = ..., org.ton.block/Maybe<org.ton.tlb/CellRef<org.ton.cell/Cell>> = ..., org.ton.block/Maybe<org.ton.tlb/CellRef<org.ton.cell/Cell>> = ..., org.ton.hashmap/HashMapE<org.ton.block/SimpleLib> = ...): org.ton.block/StateInit // org.ton.block/StateInit.copy|copy(org.ton.block.Maybe<kotlin.UInt>;org.ton.block.Maybe<org.ton.block.TickTock>;org.ton.block.Maybe<org.ton.tlb.CellRef<org.ton.cell.Cell>>;org.ton.block.Maybe<org.ton.tlb.CellRef<org.ton.cell.Cell>>;org.ton.hashmap.HashMapE<org.ton.block.SimpleLib>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/StateInit.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/StateInit.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/StateInit.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toCell(): org.ton.cell/Cell // org.ton.block/StateInit.toCell|toCell(){}[0]
    final fun toString(): kotlin/String // org.ton.block/StateInit.toString|toString(){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.block/StateInit> { // org.ton.block/StateInit.Companion|null[0]
        final fun createCell(org.ton.block/StateInit): org.ton.cell/Cell // org.ton.block/StateInit.Companion.createCell|createCell(org.ton.block.StateInit){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/StateInit // org.ton.block/StateInit.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/StateInit // org.ton.block/StateInit.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/StateInit // org.ton.block/StateInit.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/StateInit) // org.ton.block/StateInit.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.StateInit){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/StateInit, org.ton.kotlin.cell/CellContext) // org.ton.block/StateInit.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.StateInit;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCodec(): org.ton.tlb/TlbConstructor<org.ton.block/StateInit> // org.ton.block/StateInit.Companion.tlbCodec|tlbCodec(){}[0]
    }
}

final class org.ton.block/StorageInfo : org.ton.tlb/TlbObject { // org.ton.block/StorageInfo|null[0]
    constructor <init>(org.ton.block/StorageUsed, kotlin/UInt, org.ton.block/Coins? = ...) // org.ton.block/StorageInfo.<init>|<init>(org.ton.block.StorageUsed;kotlin.UInt;org.ton.block.Coins?){}[0]
    constructor <init>(org.ton.block/StorageUsed, kotlin/UInt, org.ton.block/Maybe<org.ton.block/Coins>) // org.ton.block/StorageInfo.<init>|<init>(org.ton.block.StorageUsed;kotlin.UInt;org.ton.block.Maybe<org.ton.block.Coins>){}[0]

    final val duePayment // org.ton.block/StorageInfo.duePayment|{}duePayment[0]
        final fun <get-duePayment>(): org.ton.block/Maybe<org.ton.block/Coins> // org.ton.block/StorageInfo.duePayment.<get-duePayment>|<get-duePayment>(){}[0]
    final val lastPaid // org.ton.block/StorageInfo.lastPaid|{}lastPaid[0]
        final fun <get-lastPaid>(): kotlin/UInt // org.ton.block/StorageInfo.lastPaid.<get-lastPaid>|<get-lastPaid>(){}[0]
    final val used // org.ton.block/StorageInfo.used|{}used[0]
        final fun <get-used>(): org.ton.block/StorageUsed // org.ton.block/StorageInfo.used.<get-used>|<get-used>(){}[0]

    final fun component1(): org.ton.block/StorageUsed // org.ton.block/StorageInfo.component1|component1(){}[0]
    final fun component2(): kotlin/UInt // org.ton.block/StorageInfo.component2|component2(){}[0]
    final fun component3(): org.ton.block/Maybe<org.ton.block/Coins> // org.ton.block/StorageInfo.component3|component3(){}[0]
    final fun copy(org.ton.block/StorageUsed = ..., kotlin/UInt = ..., org.ton.block/Maybe<org.ton.block/Coins> = ...): org.ton.block/StorageInfo // org.ton.block/StorageInfo.copy|copy(org.ton.block.StorageUsed;kotlin.UInt;org.ton.block.Maybe<org.ton.block.Coins>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/StorageInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/StorageInfo.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/StorageInfo.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/StorageInfo.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/StorageInfo> { // org.ton.block/StorageInfo.Companion|null[0]
        final fun createCell(org.ton.block/StorageInfo): org.ton.cell/Cell // org.ton.block/StorageInfo.Companion.createCell|createCell(org.ton.block.StorageInfo){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/StorageInfo // org.ton.block/StorageInfo.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/StorageInfo // org.ton.block/StorageInfo.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/StorageInfo // org.ton.block/StorageInfo.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/StorageInfo) // org.ton.block/StorageInfo.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.StorageInfo){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/StorageInfo, org.ton.kotlin.cell/CellContext) // org.ton.block/StorageInfo.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.StorageInfo;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/StorageInfo> // org.ton.block/StorageInfo.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/StorageUsed : org.ton.tlb/TlbObject { // org.ton.block/StorageUsed|null[0]
    constructor <init>(org.ton.block/VarUInteger, org.ton.block/VarUInteger, org.ton.block/VarUInteger) // org.ton.block/StorageUsed.<init>|<init>(org.ton.block.VarUInteger;org.ton.block.VarUInteger;org.ton.block.VarUInteger){}[0]

    final val bits // org.ton.block/StorageUsed.bits|{}bits[0]
        final fun <get-bits>(): org.ton.block/VarUInteger // org.ton.block/StorageUsed.bits.<get-bits>|<get-bits>(){}[0]
    final val cells // org.ton.block/StorageUsed.cells|{}cells[0]
        final fun <get-cells>(): org.ton.block/VarUInteger // org.ton.block/StorageUsed.cells.<get-cells>|<get-cells>(){}[0]
    final val publicCells // org.ton.block/StorageUsed.publicCells|{}publicCells[0]
        final fun <get-publicCells>(): org.ton.block/VarUInteger // org.ton.block/StorageUsed.publicCells.<get-publicCells>|<get-publicCells>(){}[0]

    final fun component1(): org.ton.block/VarUInteger // org.ton.block/StorageUsed.component1|component1(){}[0]
    final fun component2(): org.ton.block/VarUInteger // org.ton.block/StorageUsed.component2|component2(){}[0]
    final fun component3(): org.ton.block/VarUInteger // org.ton.block/StorageUsed.component3|component3(){}[0]
    final fun copy(org.ton.block/VarUInteger = ..., org.ton.block/VarUInteger = ..., org.ton.block/VarUInteger = ...): org.ton.block/StorageUsed // org.ton.block/StorageUsed.copy|copy(org.ton.block.VarUInteger;org.ton.block.VarUInteger;org.ton.block.VarUInteger){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/StorageUsed.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/StorageUsed.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/StorageUsed.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/StorageUsed.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/StorageUsed> { // org.ton.block/StorageUsed.Companion|null[0]
        final fun createCell(org.ton.block/StorageUsed): org.ton.cell/Cell // org.ton.block/StorageUsed.Companion.createCell|createCell(org.ton.block.StorageUsed){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/StorageUsed // org.ton.block/StorageUsed.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/StorageUsed // org.ton.block/StorageUsed.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/StorageUsed // org.ton.block/StorageUsed.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/StorageUsed) // org.ton.block/StorageUsed.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.StorageUsed){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/StorageUsed, org.ton.kotlin.cell/CellContext) // org.ton.block/StorageUsed.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.StorageUsed;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/StorageUsed> // org.ton.block/StorageUsed.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/StorageUsedShort { // org.ton.block/StorageUsedShort|null[0]
    constructor <init>(kotlin/Long, kotlin/Long) // org.ton.block/StorageUsedShort.<init>|<init>(kotlin.Long;kotlin.Long){}[0]
    constructor <init>(org.ton.kotlin.cell/CellSize) // org.ton.block/StorageUsedShort.<init>|<init>(org.ton.kotlin.cell.CellSize){}[0]

    final val bitCount // org.ton.block/StorageUsedShort.bitCount|{}bitCount[0]
        final fun <get-bitCount>(): kotlin/Long // org.ton.block/StorageUsedShort.bitCount.<get-bitCount>|<get-bitCount>(){}[0]
    final val cellCount // org.ton.block/StorageUsedShort.cellCount|{}cellCount[0]
        final fun <get-cellCount>(): kotlin/Long // org.ton.block/StorageUsedShort.cellCount.<get-cellCount>|<get-cellCount>(){}[0]

    final fun component1(): kotlin/Long // org.ton.block/StorageUsedShort.component1|component1(){}[0]
    final fun component2(): kotlin/Long // org.ton.block/StorageUsedShort.component2|component2(){}[0]
    final fun copy(kotlin/Long = ..., kotlin/Long = ...): org.ton.block/StorageUsedShort // org.ton.block/StorageUsedShort.copy|copy(kotlin.Long;kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/StorageUsedShort.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/StorageUsedShort.hashCode|hashCode(){}[0]
    final fun plus(org.ton.block/StorageUsedShort): org.ton.block/StorageUsedShort // org.ton.block/StorageUsedShort.plus|plus(org.ton.block.StorageUsedShort){}[0]
    final fun toCellSize(): org.ton.kotlin.cell/CellSize // org.ton.block/StorageUsedShort.toCellSize|toCellSize(){}[0]
    final fun toString(): kotlin/String // org.ton.block/StorageUsedShort.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/StorageUsedShort> { // org.ton.block/StorageUsedShort.Companion|null[0]
        final val ZERO // org.ton.block/StorageUsedShort.Companion.ZERO|{}ZERO[0]
            final fun <get-ZERO>(): org.ton.block/StorageUsedShort // org.ton.block/StorageUsedShort.Companion.ZERO.<get-ZERO>|<get-ZERO>(){}[0]

        final fun createCell(org.ton.block/StorageUsedShort): org.ton.cell/Cell // org.ton.block/StorageUsedShort.Companion.createCell|createCell(org.ton.block.StorageUsedShort){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/StorageUsedShort // org.ton.block/StorageUsedShort.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/StorageUsedShort // org.ton.block/StorageUsedShort.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/StorageUsedShort // org.ton.block/StorageUsedShort.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/StorageUsedShort) // org.ton.block/StorageUsedShort.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.StorageUsedShort){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/StorageUsedShort, org.ton.kotlin.cell/CellContext) // org.ton.block/StorageUsedShort.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.StorageUsedShort;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/StorageUsedShort> // org.ton.block/StorageUsedShort.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/Text { // org.ton.block/Text|null[0]
    constructor <init>(kotlin/UByte, org.ton.block/TextChunks) // org.ton.block/Text.<init>|<init>(kotlin.UByte;org.ton.block.TextChunks){}[0]

    final val chunks // org.ton.block/Text.chunks|{}chunks[0]
        final fun <get-chunks>(): kotlin/UByte // org.ton.block/Text.chunks.<get-chunks>|<get-chunks>(){}[0]
    final val rest // org.ton.block/Text.rest|{}rest[0]
        final fun <get-rest>(): org.ton.block/TextChunks // org.ton.block/Text.rest.<get-rest>|<get-rest>(){}[0]

    final fun component1(): kotlin/UByte // org.ton.block/Text.component1|component1(){}[0]
    final fun component2(): org.ton.block/TextChunks // org.ton.block/Text.component2|component2(){}[0]
    final fun copy(kotlin/UByte = ..., org.ton.block/TextChunks = ...): org.ton.block/Text // org.ton.block/Text.copy|copy(kotlin.UByte;org.ton.block.TextChunks){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/Text.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/Text.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/Text.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/Text> { // org.ton.block/Text.Companion|null[0]
        final fun createCell(org.ton.block/Text): org.ton.cell/Cell // org.ton.block/Text.Companion.createCell|createCell(org.ton.block.Text){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/Text // org.ton.block/Text.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/Text // org.ton.block/Text.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/Text // org.ton.block/Text.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/Text) // org.ton.block/Text.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.Text){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/Text, org.ton.kotlin.cell/CellContext) // org.ton.block/Text.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.Text;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/Text> // org.ton.block/Text.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/TextChunk : org.ton.block/TextChunks { // org.ton.block/TextChunk|null[0]
    constructor <init>(kotlin/UByte, org.ton.bitstring/BitString, org.ton.block/TextChunkRef) // org.ton.block/TextChunk.<init>|<init>(kotlin.UByte;org.ton.bitstring.BitString;org.ton.block.TextChunkRef){}[0]

    final val data // org.ton.block/TextChunk.data|{}data[0]
        final fun <get-data>(): org.ton.bitstring/BitString // org.ton.block/TextChunk.data.<get-data>|<get-data>(){}[0]
    final val len // org.ton.block/TextChunk.len|{}len[0]
        final fun <get-len>(): kotlin/UByte // org.ton.block/TextChunk.len.<get-len>|<get-len>(){}[0]
    final val next // org.ton.block/TextChunk.next|{}next[0]
        final fun <get-next>(): org.ton.block/TextChunkRef // org.ton.block/TextChunk.next.<get-next>|<get-next>(){}[0]

    final object Companion { // org.ton.block/TextChunk.Companion|null[0]
        final fun tlbConstructor(kotlin/Int): org.ton.tlb/TlbConstructor<org.ton.block/TextChunk> // org.ton.block/TextChunk.Companion.tlbConstructor|tlbConstructor(kotlin.Int){}[0]
    }
}

final class org.ton.block/TickTock : org.ton.tlb/TlbObject { // org.ton.block/TickTock|null[0]
    constructor <init>(kotlin/Boolean, kotlin/Boolean) // org.ton.block/TickTock.<init>|<init>(kotlin.Boolean;kotlin.Boolean){}[0]

    final val tick // org.ton.block/TickTock.tick|{}tick[0]
        final fun <get-tick>(): kotlin/Boolean // org.ton.block/TickTock.tick.<get-tick>|<get-tick>(){}[0]
    final val tock // org.ton.block/TickTock.tock|{}tock[0]
        final fun <get-tock>(): kotlin/Boolean // org.ton.block/TickTock.tock.<get-tock>|<get-tock>(){}[0]

    final fun component1(): kotlin/Boolean // org.ton.block/TickTock.component1|component1(){}[0]
    final fun component2(): kotlin/Boolean // org.ton.block/TickTock.component2|component2(){}[0]
    final fun copy(kotlin/Boolean = ..., kotlin/Boolean = ...): org.ton.block/TickTock // org.ton.block/TickTock.copy|copy(kotlin.Boolean;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/TickTock.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/TickTock.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/TickTock.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toPair(): kotlin/Pair<kotlin/Boolean, kotlin/Boolean> // org.ton.block/TickTock.toPair|toPair(){}[0]
    final fun toString(): kotlin/String // org.ton.block/TickTock.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/TickTock> { // org.ton.block/TickTock.Companion|null[0]
        final fun createCell(org.ton.block/TickTock): org.ton.cell/Cell // org.ton.block/TickTock.Companion.createCell|createCell(org.ton.block.TickTock){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/TickTock // org.ton.block/TickTock.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/TickTock // org.ton.block/TickTock.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/TickTock // org.ton.block/TickTock.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/TickTock) // org.ton.block/TickTock.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.TickTock){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/TickTock, org.ton.kotlin.cell/CellContext) // org.ton.block/TickTock.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.TickTock;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/TickTock> // org.ton.block/TickTock.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/ValidatorBaseInfo { // org.ton.block/ValidatorBaseInfo|null[0]
    constructor <init>(kotlin/Long, kotlin/Long) // org.ton.block/ValidatorBaseInfo.<init>|<init>(kotlin.Long;kotlin.Long){}[0]

    final val catchain_seqno // org.ton.block/ValidatorBaseInfo.catchain_seqno|{}catchain_seqno[0]
        final fun <get-catchain_seqno>(): kotlin/Long // org.ton.block/ValidatorBaseInfo.catchain_seqno.<get-catchain_seqno>|<get-catchain_seqno>(){}[0]
    final val validator_list_hash_short // org.ton.block/ValidatorBaseInfo.validator_list_hash_short|{}validator_list_hash_short[0]
        final fun <get-validator_list_hash_short>(): kotlin/Long // org.ton.block/ValidatorBaseInfo.validator_list_hash_short.<get-validator_list_hash_short>|<get-validator_list_hash_short>(){}[0]

    final fun component1(): kotlin/Long // org.ton.block/ValidatorBaseInfo.component1|component1(){}[0]
    final fun component2(): kotlin/Long // org.ton.block/ValidatorBaseInfo.component2|component2(){}[0]
    final fun copy(kotlin/Long = ..., kotlin/Long = ...): org.ton.block/ValidatorBaseInfo // org.ton.block/ValidatorBaseInfo.copy|copy(kotlin.Long;kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/ValidatorBaseInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/ValidatorBaseInfo.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/ValidatorBaseInfo.toString|toString(){}[0]
}

final class org.ton.block/ValidatorInfo : org.ton.tlb/TlbObject { // org.ton.block/ValidatorInfo|null[0]
    constructor <init>(kotlin/UInt, kotlin/UInt, kotlin/Boolean) // org.ton.block/ValidatorInfo.<init>|<init>(kotlin.UInt;kotlin.UInt;kotlin.Boolean){}[0]

    final val catchainSeqno // org.ton.block/ValidatorInfo.catchainSeqno|{}catchainSeqno[0]
        final fun <get-catchainSeqno>(): kotlin/UInt // org.ton.block/ValidatorInfo.catchainSeqno.<get-catchainSeqno>|<get-catchainSeqno>(){}[0]
    final val nxCcUpdated // org.ton.block/ValidatorInfo.nxCcUpdated|{}nxCcUpdated[0]
        final fun <get-nxCcUpdated>(): kotlin/Boolean // org.ton.block/ValidatorInfo.nxCcUpdated.<get-nxCcUpdated>|<get-nxCcUpdated>(){}[0]
    final val validatorListHashShort // org.ton.block/ValidatorInfo.validatorListHashShort|{}validatorListHashShort[0]
        final fun <get-validatorListHashShort>(): kotlin/UInt // org.ton.block/ValidatorInfo.validatorListHashShort.<get-validatorListHashShort>|<get-validatorListHashShort>(){}[0]

    final fun component1(): kotlin/UInt // org.ton.block/ValidatorInfo.component1|component1(){}[0]
    final fun component2(): kotlin/UInt // org.ton.block/ValidatorInfo.component2|component2(){}[0]
    final fun component3(): kotlin/Boolean // org.ton.block/ValidatorInfo.component3|component3(){}[0]
    final fun copy(kotlin/UInt = ..., kotlin/UInt = ..., kotlin/Boolean = ...): org.ton.block/ValidatorInfo // org.ton.block/ValidatorInfo.copy|copy(kotlin.UInt;kotlin.UInt;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/ValidatorInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/ValidatorInfo.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/ValidatorInfo.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/ValidatorInfo.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/ValidatorInfo> { // org.ton.block/ValidatorInfo.Companion|null[0]
        final fun createCell(org.ton.block/ValidatorInfo): org.ton.cell/Cell // org.ton.block/ValidatorInfo.Companion.createCell|createCell(org.ton.block.ValidatorInfo){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/ValidatorInfo // org.ton.block/ValidatorInfo.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/ValidatorInfo // org.ton.block/ValidatorInfo.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/ValidatorInfo // org.ton.block/ValidatorInfo.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ValidatorInfo) // org.ton.block/ValidatorInfo.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ValidatorInfo){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ValidatorInfo, org.ton.kotlin.cell/CellContext) // org.ton.block/ValidatorInfo.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ValidatorInfo;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/ValidatorInfo> // org.ton.block/ValidatorInfo.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/ValueFlow : org.ton.tlb/TlbObject { // org.ton.block/ValueFlow|null[0]
    constructor <init>(org.ton.block/CurrencyCollection, org.ton.block/CurrencyCollection, org.ton.block/CurrencyCollection, org.ton.block/CurrencyCollection, org.ton.block/CurrencyCollection, org.ton.block/CurrencyCollection, org.ton.block/CurrencyCollection, org.ton.block/CurrencyCollection, org.ton.block/CurrencyCollection) // org.ton.block/ValueFlow.<init>|<init>(org.ton.block.CurrencyCollection;org.ton.block.CurrencyCollection;org.ton.block.CurrencyCollection;org.ton.block.CurrencyCollection;org.ton.block.CurrencyCollection;org.ton.block.CurrencyCollection;org.ton.block.CurrencyCollection;org.ton.block.CurrencyCollection;org.ton.block.CurrencyCollection){}[0]

    final val created // org.ton.block/ValueFlow.created|{}created[0]
        final fun <get-created>(): org.ton.block/CurrencyCollection // org.ton.block/ValueFlow.created.<get-created>|<get-created>(){}[0]
    final val exported // org.ton.block/ValueFlow.exported|{}exported[0]
        final fun <get-exported>(): org.ton.block/CurrencyCollection // org.ton.block/ValueFlow.exported.<get-exported>|<get-exported>(){}[0]
    final val feesCollected // org.ton.block/ValueFlow.feesCollected|{}feesCollected[0]
        final fun <get-feesCollected>(): org.ton.block/CurrencyCollection // org.ton.block/ValueFlow.feesCollected.<get-feesCollected>|<get-feesCollected>(){}[0]
    final val feesImported // org.ton.block/ValueFlow.feesImported|{}feesImported[0]
        final fun <get-feesImported>(): org.ton.block/CurrencyCollection // org.ton.block/ValueFlow.feesImported.<get-feesImported>|<get-feesImported>(){}[0]
    final val fromPrevBlk // org.ton.block/ValueFlow.fromPrevBlk|{}fromPrevBlk[0]
        final fun <get-fromPrevBlk>(): org.ton.block/CurrencyCollection // org.ton.block/ValueFlow.fromPrevBlk.<get-fromPrevBlk>|<get-fromPrevBlk>(){}[0]
    final val imported // org.ton.block/ValueFlow.imported|{}imported[0]
        final fun <get-imported>(): org.ton.block/CurrencyCollection // org.ton.block/ValueFlow.imported.<get-imported>|<get-imported>(){}[0]
    final val minted // org.ton.block/ValueFlow.minted|{}minted[0]
        final fun <get-minted>(): org.ton.block/CurrencyCollection // org.ton.block/ValueFlow.minted.<get-minted>|<get-minted>(){}[0]
    final val recovered // org.ton.block/ValueFlow.recovered|{}recovered[0]
        final fun <get-recovered>(): org.ton.block/CurrencyCollection // org.ton.block/ValueFlow.recovered.<get-recovered>|<get-recovered>(){}[0]
    final val toNextBlk // org.ton.block/ValueFlow.toNextBlk|{}toNextBlk[0]
        final fun <get-toNextBlk>(): org.ton.block/CurrencyCollection // org.ton.block/ValueFlow.toNextBlk.<get-toNextBlk>|<get-toNextBlk>(){}[0]

    final fun component1(): org.ton.block/CurrencyCollection // org.ton.block/ValueFlow.component1|component1(){}[0]
    final fun component2(): org.ton.block/CurrencyCollection // org.ton.block/ValueFlow.component2|component2(){}[0]
    final fun component3(): org.ton.block/CurrencyCollection // org.ton.block/ValueFlow.component3|component3(){}[0]
    final fun component4(): org.ton.block/CurrencyCollection // org.ton.block/ValueFlow.component4|component4(){}[0]
    final fun component5(): org.ton.block/CurrencyCollection // org.ton.block/ValueFlow.component5|component5(){}[0]
    final fun component6(): org.ton.block/CurrencyCollection // org.ton.block/ValueFlow.component6|component6(){}[0]
    final fun component7(): org.ton.block/CurrencyCollection // org.ton.block/ValueFlow.component7|component7(){}[0]
    final fun component8(): org.ton.block/CurrencyCollection // org.ton.block/ValueFlow.component8|component8(){}[0]
    final fun component9(): org.ton.block/CurrencyCollection // org.ton.block/ValueFlow.component9|component9(){}[0]
    final fun copy(org.ton.block/CurrencyCollection = ..., org.ton.block/CurrencyCollection = ..., org.ton.block/CurrencyCollection = ..., org.ton.block/CurrencyCollection = ..., org.ton.block/CurrencyCollection = ..., org.ton.block/CurrencyCollection = ..., org.ton.block/CurrencyCollection = ..., org.ton.block/CurrencyCollection = ..., org.ton.block/CurrencyCollection = ...): org.ton.block/ValueFlow // org.ton.block/ValueFlow.copy|copy(org.ton.block.CurrencyCollection;org.ton.block.CurrencyCollection;org.ton.block.CurrencyCollection;org.ton.block.CurrencyCollection;org.ton.block.CurrencyCollection;org.ton.block.CurrencyCollection;org.ton.block.CurrencyCollection;org.ton.block.CurrencyCollection;org.ton.block.CurrencyCollection){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/ValueFlow.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/ValueFlow.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/ValueFlow.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/ValueFlow.toString|toString(){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.block/ValueFlow> { // org.ton.block/ValueFlow.Companion|null[0]
        final fun createCell(org.ton.block/ValueFlow): org.ton.cell/Cell // org.ton.block/ValueFlow.Companion.createCell|createCell(org.ton.block.ValueFlow){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/ValueFlow // org.ton.block/ValueFlow.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/ValueFlow // org.ton.block/ValueFlow.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/ValueFlow // org.ton.block/ValueFlow.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ValueFlow) // org.ton.block/ValueFlow.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ValueFlow){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ValueFlow, org.ton.kotlin.cell/CellContext) // org.ton.block/ValueFlow.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ValueFlow;org.ton.kotlin.cell.CellContext){}[0]
    }
}

final class org.ton.block/VarInteger : kotlin/Number { // org.ton.block/VarInteger|null[0]
    constructor <init>(kotlin/Int) // org.ton.block/VarInteger.<init>|<init>(kotlin.Int){}[0]
    constructor <init>(kotlin/Int, org.ton.bigint/BigInt) // org.ton.block/VarInteger.<init>|<init>(kotlin.Int;org.ton.bigint.BigInt){}[0]
    constructor <init>(kotlin/Long) // org.ton.block/VarInteger.<init>|<init>(kotlin.Long){}[0]
    constructor <init>(org.ton.bigint/BigInt) // org.ton.block/VarInteger.<init>|<init>(org.ton.bigint.BigInt){}[0]

    final val len // org.ton.block/VarInteger.len|{}len[0]
        final fun <get-len>(): kotlin/Int // org.ton.block/VarInteger.len.<get-len>|<get-len>(){}[0]
    final val value // org.ton.block/VarInteger.value|{}value[0]
        final fun <get-value>(): org.ton.bigint/BigInt // org.ton.block/VarInteger.value.<get-value>|<get-value>(){}[0]

    final fun component1(): kotlin/Int // org.ton.block/VarInteger.component1|component1(){}[0]
    final fun component2(): org.ton.bigint/BigInt // org.ton.block/VarInteger.component2|component2(){}[0]
    final fun copy(kotlin/Int = ..., org.ton.bigint/BigInt = ...): org.ton.block/VarInteger // org.ton.block/VarInteger.copy|copy(kotlin.Int;org.ton.bigint.BigInt){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/VarInteger.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/VarInteger.hashCode|hashCode(){}[0]
    final fun toByte(): kotlin/Byte // org.ton.block/VarInteger.toByte|toByte(){}[0]
    final fun toChar(): kotlin/Char // org.ton.block/VarInteger.toChar|toChar(){}[0]
    final fun toDouble(): kotlin/Double // org.ton.block/VarInteger.toDouble|toDouble(){}[0]
    final fun toFloat(): kotlin/Float // org.ton.block/VarInteger.toFloat|toFloat(){}[0]
    final fun toInt(): kotlin/Int // org.ton.block/VarInteger.toInt|toInt(){}[0]
    final fun toLong(): kotlin/Long // org.ton.block/VarInteger.toLong|toLong(){}[0]
    final fun toShort(): kotlin/Short // org.ton.block/VarInteger.toShort|toShort(){}[0]
    final fun toString(): kotlin/String // org.ton.block/VarInteger.toString|toString(){}[0]

    final object Companion { // org.ton.block/VarInteger.Companion|null[0]
        final fun tlbCodec(kotlin/Int): org.ton.tlb/TlbConstructor<org.ton.block/VarInteger> // org.ton.block/VarInteger.Companion.tlbCodec|tlbCodec(kotlin.Int){}[0]
    }
}

final class org.ton.block/VarUInteger : org.ton.tlb/TlbObject { // org.ton.block/VarUInteger|null[0]
    constructor <init>(kotlin/Int) // org.ton.block/VarUInteger.<init>|<init>(kotlin.Int){}[0]
    constructor <init>(kotlin/Int, org.ton.bigint/BigInt) // org.ton.block/VarUInteger.<init>|<init>(kotlin.Int;org.ton.bigint.BigInt){}[0]
    constructor <init>(kotlin/Long) // org.ton.block/VarUInteger.<init>|<init>(kotlin.Long){}[0]
    constructor <init>(org.ton.bigint/BigInt) // org.ton.block/VarUInteger.<init>|<init>(org.ton.bigint.BigInt){}[0]

    final val len // org.ton.block/VarUInteger.len|{}len[0]
        final fun <get-len>(): kotlin/Int // org.ton.block/VarUInteger.len.<get-len>|<get-len>(){}[0]
    final val value // org.ton.block/VarUInteger.value|{}value[0]
        final fun <get-value>(): org.ton.bigint/BigInt // org.ton.block/VarUInteger.value.<get-value>|<get-value>(){}[0]

    final fun component1(): kotlin/Int // org.ton.block/VarUInteger.component1|component1(){}[0]
    final fun component2(): org.ton.bigint/BigInt // org.ton.block/VarUInteger.component2|component2(){}[0]
    final fun copy(kotlin/Int = ..., org.ton.bigint/BigInt = ...): org.ton.block/VarUInteger // org.ton.block/VarUInteger.copy|copy(kotlin.Int;org.ton.bigint.BigInt){}[0]
    final fun dec(): org.ton.block/VarUInteger // org.ton.block/VarUInteger.dec|dec(){}[0]
    final fun div(org.ton.block/VarUInteger): org.ton.block/VarUInteger // org.ton.block/VarUInteger.div|div(org.ton.block.VarUInteger){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/VarUInteger.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/VarUInteger.hashCode|hashCode(){}[0]
    final fun inc(): org.ton.block/VarUInteger // org.ton.block/VarUInteger.inc|inc(){}[0]
    final fun minus(org.ton.block/VarUInteger): org.ton.block/VarUInteger // org.ton.block/VarUInteger.minus|minus(org.ton.block.VarUInteger){}[0]
    final fun plus(org.ton.block/VarUInteger): org.ton.block/VarUInteger // org.ton.block/VarUInteger.plus|plus(org.ton.block.VarUInteger){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/VarUInteger.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun rem(org.ton.block/VarUInteger): org.ton.block/VarUInteger // org.ton.block/VarUInteger.rem|rem(org.ton.block.VarUInteger){}[0]
    final fun times(org.ton.block/VarUInteger): org.ton.block/VarUInteger // org.ton.block/VarUInteger.times|times(org.ton.block.VarUInteger){}[0]
    final fun toByte(): kotlin/Byte // org.ton.block/VarUInteger.toByte|toByte(){}[0]
    final fun toChar(): kotlin/Char // org.ton.block/VarUInteger.toChar|toChar(){}[0]
    final fun toDouble(): kotlin/Double // org.ton.block/VarUInteger.toDouble|toDouble(){}[0]
    final fun toFloat(): kotlin/Float // org.ton.block/VarUInteger.toFloat|toFloat(){}[0]
    final fun toInt(): kotlin/Int // org.ton.block/VarUInteger.toInt|toInt(){}[0]
    final fun toLong(): kotlin/Long // org.ton.block/VarUInteger.toLong|toLong(){}[0]
    final fun toShort(): kotlin/Short // org.ton.block/VarUInteger.toShort|toShort(){}[0]
    final fun toString(): kotlin/String // org.ton.block/VarUInteger.toString|toString(){}[0]

    final object Companion { // org.ton.block/VarUInteger.Companion|null[0]
        final fun tlbCodec(kotlin/Int): org.ton.tlb/TlbCodec<org.ton.block/VarUInteger> // org.ton.block/VarUInteger.Companion.tlbCodec|tlbCodec(kotlin.Int){}[0]
    }
}

final class org.ton.block/VmCellSlice : org.ton.block/VmStackSlice { // org.ton.block/VmCellSlice|null[0]
    constructor <init>(org.ton.cell/Cell, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int) // org.ton.block/VmCellSlice.<init>|<init>(org.ton.cell.Cell;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    constructor <init>(org.ton.cell/CellSlice) // org.ton.block/VmCellSlice.<init>|<init>(org.ton.cell.CellSlice){}[0]

    final val cell // org.ton.block/VmCellSlice.cell|{}cell[0]
        final fun <get-cell>(): org.ton.cell/Cell // org.ton.block/VmCellSlice.cell.<get-cell>|<get-cell>(){}[0]
    final val endBits // org.ton.block/VmCellSlice.endBits|{}endBits[0]
        final fun <get-endBits>(): kotlin/Int // org.ton.block/VmCellSlice.endBits.<get-endBits>|<get-endBits>(){}[0]
    final val endRef // org.ton.block/VmCellSlice.endRef|{}endRef[0]
        final fun <get-endRef>(): kotlin/Int // org.ton.block/VmCellSlice.endRef.<get-endRef>|<get-endRef>(){}[0]
    final val stBits // org.ton.block/VmCellSlice.stBits|{}stBits[0]
        final fun <get-stBits>(): kotlin/Int // org.ton.block/VmCellSlice.stBits.<get-stBits>|<get-stBits>(){}[0]
    final val stRef // org.ton.block/VmCellSlice.stRef|{}stRef[0]
        final fun <get-stRef>(): kotlin/Int // org.ton.block/VmCellSlice.stRef.<get-stRef>|<get-stRef>(){}[0]

    final fun component1(): org.ton.cell/Cell // org.ton.block/VmCellSlice.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.block/VmCellSlice.component2|component2(){}[0]
    final fun component3(): kotlin/Int // org.ton.block/VmCellSlice.component3|component3(){}[0]
    final fun component4(): kotlin/Int // org.ton.block/VmCellSlice.component4|component4(){}[0]
    final fun component5(): kotlin/Int // org.ton.block/VmCellSlice.component5|component5(){}[0]
    final fun copy(org.ton.cell/Cell = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): org.ton.block/VmCellSlice // org.ton.block/VmCellSlice.copy|copy(org.ton.cell.Cell;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/VmCellSlice.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/VmCellSlice.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/VmCellSlice.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/VmCellSlice> { // org.ton.block/VmCellSlice.Companion|null[0]
        final fun createCell(org.ton.block/VmCellSlice): org.ton.cell/Cell // org.ton.block/VmCellSlice.Companion.createCell|createCell(org.ton.block.VmCellSlice){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/VmCellSlice // org.ton.block/VmCellSlice.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/VmCellSlice // org.ton.block/VmCellSlice.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/VmCellSlice // org.ton.block/VmCellSlice.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmCellSlice) // org.ton.block/VmCellSlice.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmCellSlice){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmCellSlice, org.ton.kotlin.cell/CellContext) // org.ton.block/VmCellSlice.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmCellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/VmCellSlice> // org.ton.block/VmCellSlice.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/VmContEnvelope : org.ton.block/VmCont { // org.ton.block/VmContEnvelope|null[0]
    constructor <init>(org.ton.block/VmControlData, org.ton.tlb/CellRef<org.ton.block/VmCont>) // org.ton.block/VmContEnvelope.<init>|<init>(org.ton.block.VmControlData;org.ton.tlb.CellRef<org.ton.block.VmCont>){}[0]

    final val cdata // org.ton.block/VmContEnvelope.cdata|{}cdata[0]
        final fun <get-cdata>(): org.ton.block/VmControlData // org.ton.block/VmContEnvelope.cdata.<get-cdata>|<get-cdata>(){}[0]
    final val next // org.ton.block/VmContEnvelope.next|{}next[0]
        final fun <get-next>(): org.ton.tlb/CellRef<org.ton.block/VmCont> // org.ton.block/VmContEnvelope.next.<get-next>|<get-next>(){}[0]

    final fun component1(): org.ton.block/VmControlData // org.ton.block/VmContEnvelope.component1|component1(){}[0]
    final fun component2(): org.ton.tlb/CellRef<org.ton.block/VmCont> // org.ton.block/VmContEnvelope.component2|component2(){}[0]
    final fun copy(org.ton.block/VmControlData = ..., org.ton.tlb/CellRef<org.ton.block/VmCont> = ...): org.ton.block/VmContEnvelope // org.ton.block/VmContEnvelope.copy|copy(org.ton.block.VmControlData;org.ton.tlb.CellRef<org.ton.block.VmCont>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/VmContEnvelope.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/VmContEnvelope.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/VmContEnvelope.toString|toString(){}[0]

    final object Companion { // org.ton.block/VmContEnvelope.Companion|null[0]
        final fun tlbCodec(): org.ton.tlb/TlbConstructor<org.ton.block/VmContEnvelope> // org.ton.block/VmContEnvelope.Companion.tlbCodec|tlbCodec(){}[0]
    }
}

final class org.ton.block/VmContQuit : org.ton.block/VmCont { // org.ton.block/VmContQuit|null[0]
    constructor <init>(kotlin/Int) // org.ton.block/VmContQuit.<init>|<init>(kotlin.Int){}[0]

    final val exit_code // org.ton.block/VmContQuit.exit_code|{}exit_code[0]
        final fun <get-exit_code>(): kotlin/Int // org.ton.block/VmContQuit.exit_code.<get-exit_code>|<get-exit_code>(){}[0]

    final fun component1(): kotlin/Int // org.ton.block/VmContQuit.component1|component1(){}[0]
    final fun copy(kotlin/Int = ...): org.ton.block/VmContQuit // org.ton.block/VmContQuit.copy|copy(kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/VmContQuit.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/VmContQuit.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/VmContQuit.toString|toString(){}[0]

    final object Companion { // org.ton.block/VmContQuit.Companion|null[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/VmContQuit> // org.ton.block/VmContQuit.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/VmContRepeat : org.ton.block/VmCont { // org.ton.block/VmContRepeat|null[0]
    constructor <init>(kotlin/Long, org.ton.tlb/CellRef<org.ton.block/VmCont>, org.ton.tlb/CellRef<org.ton.block/VmCont>) // org.ton.block/VmContRepeat.<init>|<init>(kotlin.Long;org.ton.tlb.CellRef<org.ton.block.VmCont>;org.ton.tlb.CellRef<org.ton.block.VmCont>){}[0]

    final val after // org.ton.block/VmContRepeat.after|{}after[0]
        final fun <get-after>(): org.ton.tlb/CellRef<org.ton.block/VmCont> // org.ton.block/VmContRepeat.after.<get-after>|<get-after>(){}[0]
    final val body // org.ton.block/VmContRepeat.body|{}body[0]
        final fun <get-body>(): org.ton.tlb/CellRef<org.ton.block/VmCont> // org.ton.block/VmContRepeat.body.<get-body>|<get-body>(){}[0]
    final val count // org.ton.block/VmContRepeat.count|{}count[0]
        final fun <get-count>(): kotlin/Long // org.ton.block/VmContRepeat.count.<get-count>|<get-count>(){}[0]

    final fun component1(): kotlin/Long // org.ton.block/VmContRepeat.component1|component1(){}[0]
    final fun component2(): org.ton.tlb/CellRef<org.ton.block/VmCont> // org.ton.block/VmContRepeat.component2|component2(){}[0]
    final fun component3(): org.ton.tlb/CellRef<org.ton.block/VmCont> // org.ton.block/VmContRepeat.component3|component3(){}[0]
    final fun copy(kotlin/Long = ..., org.ton.tlb/CellRef<org.ton.block/VmCont> = ..., org.ton.tlb/CellRef<org.ton.block/VmCont> = ...): org.ton.block/VmContRepeat // org.ton.block/VmContRepeat.copy|copy(kotlin.Long;org.ton.tlb.CellRef<org.ton.block.VmCont>;org.ton.tlb.CellRef<org.ton.block.VmCont>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/VmContRepeat.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/VmContRepeat.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/VmContRepeat.toString|toString(){}[0]

    final object Companion { // org.ton.block/VmContRepeat.Companion|null[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/VmContRepeat> // org.ton.block/VmContRepeat.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/VmContStd : org.ton.block/VmCont { // org.ton.block/VmContStd|null[0]
    constructor <init>(org.ton.block/VmControlData, org.ton.block/VmCellSlice) // org.ton.block/VmContStd.<init>|<init>(org.ton.block.VmControlData;org.ton.block.VmCellSlice){}[0]

    final val cdata // org.ton.block/VmContStd.cdata|{}cdata[0]
        final fun <get-cdata>(): org.ton.block/VmControlData // org.ton.block/VmContStd.cdata.<get-cdata>|<get-cdata>(){}[0]
    final val code // org.ton.block/VmContStd.code|{}code[0]
        final fun <get-code>(): org.ton.block/VmCellSlice // org.ton.block/VmContStd.code.<get-code>|<get-code>(){}[0]

    final fun component1(): org.ton.block/VmControlData // org.ton.block/VmContStd.component1|component1(){}[0]
    final fun component2(): org.ton.block/VmCellSlice // org.ton.block/VmContStd.component2|component2(){}[0]
    final fun copy(org.ton.block/VmControlData = ..., org.ton.block/VmCellSlice = ...): org.ton.block/VmContStd // org.ton.block/VmContStd.copy|copy(org.ton.block.VmControlData;org.ton.block.VmCellSlice){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/VmContStd.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/VmContStd.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/VmContStd.toString|toString(){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.block/VmContStd> { // org.ton.block/VmContStd.Companion|null[0]
        final fun createCell(org.ton.block/VmContStd): org.ton.cell/Cell // org.ton.block/VmContStd.Companion.createCell|createCell(org.ton.block.VmContStd){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/VmContStd // org.ton.block/VmContStd.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/VmContStd // org.ton.block/VmContStd.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/VmContStd // org.ton.block/VmContStd.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmContStd) // org.ton.block/VmContStd.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmContStd){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmContStd, org.ton.kotlin.cell/CellContext) // org.ton.block/VmContStd.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmContStd;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCodec(): org.ton.tlb/TlbConstructor<org.ton.block/VmContStd> // org.ton.block/VmContStd.Companion.tlbCodec|tlbCodec(){}[0]
    }
}

final class org.ton.block/VmControlData { // org.ton.block/VmControlData|null[0]
    constructor <init>(kotlin/UInt?, org.ton.block/VmStack?, org.ton.block/VmSaveList, kotlin/Int?) // org.ton.block/VmControlData.<init>|<init>(kotlin.UInt?;org.ton.block.VmStack?;org.ton.block.VmSaveList;kotlin.Int?){}[0]
    constructor <init>(org.ton.block/Maybe<kotlin/UInt>, org.ton.block/Maybe<org.ton.block/VmStack>, org.ton.block/VmSaveList, org.ton.block/Maybe<kotlin/Int>) // org.ton.block/VmControlData.<init>|<init>(org.ton.block.Maybe<kotlin.UInt>;org.ton.block.Maybe<org.ton.block.VmStack>;org.ton.block.VmSaveList;org.ton.block.Maybe<kotlin.Int>){}[0]

    final val cp // org.ton.block/VmControlData.cp|{}cp[0]
        final fun <get-cp>(): org.ton.block/Maybe<kotlin/Int> // org.ton.block/VmControlData.cp.<get-cp>|<get-cp>(){}[0]
    final val nargs // org.ton.block/VmControlData.nargs|{}nargs[0]
        final fun <get-nargs>(): org.ton.block/Maybe<kotlin/UInt> // org.ton.block/VmControlData.nargs.<get-nargs>|<get-nargs>(){}[0]
    final val save // org.ton.block/VmControlData.save|{}save[0]
        final fun <get-save>(): org.ton.block/VmSaveList // org.ton.block/VmControlData.save.<get-save>|<get-save>(){}[0]
    final val stack // org.ton.block/VmControlData.stack|{}stack[0]
        final fun <get-stack>(): org.ton.block/Maybe<org.ton.block/VmStack> // org.ton.block/VmControlData.stack.<get-stack>|<get-stack>(){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.block/VmControlData> { // org.ton.block/VmControlData.Companion|null[0]
        final fun createCell(org.ton.block/VmControlData): org.ton.cell/Cell // org.ton.block/VmControlData.Companion.createCell|createCell(org.ton.block.VmControlData){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/VmControlData // org.ton.block/VmControlData.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/VmControlData // org.ton.block/VmControlData.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/VmControlData // org.ton.block/VmControlData.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmControlData) // org.ton.block/VmControlData.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmControlData){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmControlData, org.ton.kotlin.cell/CellContext) // org.ton.block/VmControlData.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmControlData;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCodec(): org.ton.tlb/TlbConstructor<org.ton.block/VmControlData> // org.ton.block/VmControlData.Companion.tlbCodec|tlbCodec(){}[0]
    }
}

final class org.ton.block/VmGasLimits { // org.ton.block/VmGasLimits|null[0]
    constructor <init>(kotlin/Long, kotlin/Long, kotlin/Long, kotlin/Long) // org.ton.block/VmGasLimits.<init>|<init>(kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long){}[0]

    final val credit // org.ton.block/VmGasLimits.credit|{}credit[0]
        final fun <get-credit>(): kotlin/Long // org.ton.block/VmGasLimits.credit.<get-credit>|<get-credit>(){}[0]
    final val cur_limit // org.ton.block/VmGasLimits.cur_limit|{}cur_limit[0]
        final fun <get-cur_limit>(): kotlin/Long // org.ton.block/VmGasLimits.cur_limit.<get-cur_limit>|<get-cur_limit>(){}[0]
    final val max_limit // org.ton.block/VmGasLimits.max_limit|{}max_limit[0]
        final fun <get-max_limit>(): kotlin/Long // org.ton.block/VmGasLimits.max_limit.<get-max_limit>|<get-max_limit>(){}[0]
    final val remaining // org.ton.block/VmGasLimits.remaining|{}remaining[0]
        final fun <get-remaining>(): kotlin/Long // org.ton.block/VmGasLimits.remaining.<get-remaining>|<get-remaining>(){}[0]

    final fun component1(): kotlin/Long // org.ton.block/VmGasLimits.component1|component1(){}[0]
    final fun component2(): kotlin/Long // org.ton.block/VmGasLimits.component2|component2(){}[0]
    final fun component3(): kotlin/Long // org.ton.block/VmGasLimits.component3|component3(){}[0]
    final fun component4(): kotlin/Long // org.ton.block/VmGasLimits.component4|component4(){}[0]
    final fun copy(kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ...): org.ton.block/VmGasLimits // org.ton.block/VmGasLimits.copy|copy(kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/VmGasLimits.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/VmGasLimits.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/VmGasLimits.toString|toString(){}[0]
}

final class org.ton.block/VmLibraries { // org.ton.block/VmLibraries|null[0]
    constructor <init>(org.ton.hashmap/HashMapE<org.ton.cell/Cell>) // org.ton.block/VmLibraries.<init>|<init>(org.ton.hashmap.HashMapE<org.ton.cell.Cell>){}[0]

    final val libraries // org.ton.block/VmLibraries.libraries|{}libraries[0]
        final fun <get-libraries>(): org.ton.hashmap/HashMapE<org.ton.cell/Cell> // org.ton.block/VmLibraries.libraries.<get-libraries>|<get-libraries>(){}[0]

    final fun component1(): org.ton.hashmap/HashMapE<org.ton.cell/Cell> // org.ton.block/VmLibraries.component1|component1(){}[0]
    final fun copy(org.ton.hashmap/HashMapE<org.ton.cell/Cell> = ...): org.ton.block/VmLibraries // org.ton.block/VmLibraries.copy|copy(org.ton.hashmap.HashMapE<org.ton.cell.Cell>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/VmLibraries.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/VmLibraries.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/VmLibraries.toString|toString(){}[0]
}

final class org.ton.block/VmSaveList { // org.ton.block/VmSaveList|null[0]
    constructor <init>(org.ton.hashmap/HashMapE<org.ton.block/VmStackValue>) // org.ton.block/VmSaveList.<init>|<init>(org.ton.hashmap.HashMapE<org.ton.block.VmStackValue>){}[0]

    final val cregs // org.ton.block/VmSaveList.cregs|{}cregs[0]
        final fun <get-cregs>(): org.ton.hashmap/HashMapE<org.ton.block/VmStackValue> // org.ton.block/VmSaveList.cregs.<get-cregs>|<get-cregs>(){}[0]

    final fun component1(): org.ton.hashmap/HashMapE<org.ton.block/VmStackValue> // org.ton.block/VmSaveList.component1|component1(){}[0]
    final fun copy(org.ton.hashmap/HashMapE<org.ton.block/VmStackValue> = ...): org.ton.block/VmSaveList // org.ton.block/VmSaveList.copy|copy(org.ton.hashmap.HashMapE<org.ton.block.VmStackValue>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/VmSaveList.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/VmSaveList.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/VmSaveList.toString|toString(){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.block/VmSaveList> { // org.ton.block/VmSaveList.Companion|null[0]
        final fun createCell(org.ton.block/VmSaveList): org.ton.cell/Cell // org.ton.block/VmSaveList.Companion.createCell|createCell(org.ton.block.VmSaveList){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/VmSaveList // org.ton.block/VmSaveList.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/VmSaveList // org.ton.block/VmSaveList.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/VmSaveList // org.ton.block/VmSaveList.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmSaveList) // org.ton.block/VmSaveList.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmSaveList){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmSaveList, org.ton.kotlin.cell/CellContext) // org.ton.block/VmSaveList.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmSaveList;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbCodec(): org.ton.tlb/TlbConstructor<org.ton.block/VmSaveList> // org.ton.block/VmSaveList.Companion.tlbCodec|tlbCodec(){}[0]
    }
}

final class org.ton.block/VmStackBuilder : org.ton.block/VmStackValue { // org.ton.block/VmStackBuilder|null[0]
    constructor <init>(org.ton.cell/Cell) // org.ton.block/VmStackBuilder.<init>|<init>(org.ton.cell.Cell){}[0]
    constructor <init>(org.ton.cell/CellBuilder) // org.ton.block/VmStackBuilder.<init>|<init>(org.ton.cell.CellBuilder){}[0]

    final val cell // org.ton.block/VmStackBuilder.cell|{}cell[0]
        final fun <get-cell>(): org.ton.cell/Cell // org.ton.block/VmStackBuilder.cell.<get-cell>|<get-cell>(){}[0]

    final fun toCellBuilder(): org.ton.cell/CellBuilder // org.ton.block/VmStackBuilder.toCellBuilder|toCellBuilder(){}[0]
    final fun toString(): kotlin/String // org.ton.block/VmStackBuilder.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/VmStackBuilder> { // org.ton.block/VmStackBuilder.Companion|null[0]
        final fun createCell(org.ton.block/VmStackBuilder): org.ton.cell/Cell // org.ton.block/VmStackBuilder.Companion.createCell|createCell(org.ton.block.VmStackBuilder){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/VmStackBuilder // org.ton.block/VmStackBuilder.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/VmStackBuilder // org.ton.block/VmStackBuilder.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/VmStackBuilder // org.ton.block/VmStackBuilder.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmStackBuilder) // org.ton.block/VmStackBuilder.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmStackBuilder){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmStackBuilder, org.ton.kotlin.cell/CellContext) // org.ton.block/VmStackBuilder.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmStackBuilder;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/VmStackBuilder> // org.ton.block/VmStackBuilder.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/VmStackCell : org.ton.block/VmStackValue { // org.ton.block/VmStackCell|null[0]
    constructor <init>(org.ton.cell/Cell) // org.ton.block/VmStackCell.<init>|<init>(org.ton.cell.Cell){}[0]

    final val cell // org.ton.block/VmStackCell.cell|{}cell[0]
        final fun <get-cell>(): org.ton.cell/Cell // org.ton.block/VmStackCell.cell.<get-cell>|<get-cell>(){}[0]

    final fun component1(): org.ton.cell/Cell // org.ton.block/VmStackCell.component1|component1(){}[0]
    final fun copy(org.ton.cell/Cell = ...): org.ton.block/VmStackCell // org.ton.block/VmStackCell.copy|copy(org.ton.cell.Cell){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/VmStackCell.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/VmStackCell.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/VmStackCell.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/VmStackCell> { // org.ton.block/VmStackCell.Companion|null[0]
        final fun createCell(org.ton.block/VmStackCell): org.ton.cell/Cell // org.ton.block/VmStackCell.Companion.createCell|createCell(org.ton.block.VmStackCell){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/VmStackCell // org.ton.block/VmStackCell.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/VmStackCell // org.ton.block/VmStackCell.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/VmStackCell // org.ton.block/VmStackCell.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmStackCell) // org.ton.block/VmStackCell.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmStackCell){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmStackCell, org.ton.kotlin.cell/CellContext) // org.ton.block/VmStackCell.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmStackCell;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/VmStackCell> // org.ton.block/VmStackCell.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/VmStackCont : org.ton.block/VmStackValue { // org.ton.block/VmStackCont|null[0]
    constructor <init>(org.ton.block/VmCont) // org.ton.block/VmStackCont.<init>|<init>(org.ton.block.VmCont){}[0]

    final val cont // org.ton.block/VmStackCont.cont|{}cont[0]
        final fun <get-cont>(): org.ton.block/VmCont // org.ton.block/VmStackCont.cont.<get-cont>|<get-cont>(){}[0]

    final fun component1(): org.ton.block/VmCont // org.ton.block/VmStackCont.component1|component1(){}[0]
    final fun copy(org.ton.block/VmCont = ...): org.ton.block/VmStackCont // org.ton.block/VmStackCont.copy|copy(org.ton.block.VmCont){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/VmStackCont.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/VmStackCont.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/VmStackCont.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/VmStackCont> { // org.ton.block/VmStackCont.Companion|null[0]
        final fun createCell(org.ton.block/VmStackCont): org.ton.cell/Cell // org.ton.block/VmStackCont.Companion.createCell|createCell(org.ton.block.VmStackCont){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/VmStackCont // org.ton.block/VmStackCont.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/VmStackCont // org.ton.block/VmStackCont.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/VmStackCont // org.ton.block/VmStackCont.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmStackCont) // org.ton.block/VmStackCont.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmStackCont){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmStackCont, org.ton.kotlin.cell/CellContext) // org.ton.block/VmStackCont.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmStackCont;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/VmStackCont> // org.ton.block/VmStackCont.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/VmStackImpl : org.ton.block/VmStack { // org.ton.block/VmStackImpl|null[0]
    constructor <init>(kotlin/Int, org.ton.block/VmStackList) // org.ton.block/VmStackImpl.<init>|<init>(kotlin.Int;org.ton.block.VmStackList){}[0]
    constructor <init>(org.ton.block/VmStackList) // org.ton.block/VmStackImpl.<init>|<init>(org.ton.block.VmStackList){}[0]

    final val depth // org.ton.block/VmStackImpl.depth|{}depth[0]
        final fun <get-depth>(): kotlin/Int // org.ton.block/VmStackImpl.depth.<get-depth>|<get-depth>(){}[0]
    final val stack // org.ton.block/VmStackImpl.stack|{}stack[0]
        final fun <get-stack>(): org.ton.block/VmStackList // org.ton.block/VmStackImpl.stack.<get-stack>|<get-stack>(){}[0]

    final fun component1(): kotlin/Int // org.ton.block/VmStackImpl.component1|component1(){}[0]
    final fun component2(): org.ton.block/VmStackList // org.ton.block/VmStackImpl.component2|component2(){}[0]
    final fun copy(kotlin/Int = ..., org.ton.block/VmStackList = ...): org.ton.block/VmStackImpl // org.ton.block/VmStackImpl.copy|copy(kotlin.Int;org.ton.block.VmStackList){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/VmStackImpl.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/VmStackImpl.hashCode|hashCode(){}[0]
    final fun toMutableVmStack(): org.ton.block/MutableVmStack // org.ton.block/VmStackImpl.toMutableVmStack|toMutableVmStack(){}[0]
    final fun toString(): kotlin/String // org.ton.block/VmStackImpl.toString|toString(){}[0]
}

final class org.ton.block/VmStackInt : org.ton.block/VmStackNumber, org.ton.block/VmStackValue { // org.ton.block/VmStackInt|null[0]
    constructor <init>(kotlin/Int) // org.ton.block/VmStackInt.<init>|<init>(kotlin.Int){}[0]
    constructor <init>(kotlin/Long) // org.ton.block/VmStackInt.<init>|<init>(kotlin.Long){}[0]
    constructor <init>(org.ton.bigint/BigInt) // org.ton.block/VmStackInt.<init>|<init>(org.ton.bigint.BigInt){}[0]

    final val value // org.ton.block/VmStackInt.value|{}value[0]
        final fun <get-value>(): org.ton.bigint/BigInt // org.ton.block/VmStackInt.value.<get-value>|<get-value>(){}[0]

    final fun component1(): org.ton.bigint/BigInt // org.ton.block/VmStackInt.component1|component1(){}[0]
    final fun copy(org.ton.bigint/BigInt = ...): org.ton.block/VmStackInt // org.ton.block/VmStackInt.copy|copy(org.ton.bigint.BigInt){}[0]
    final fun div(org.ton.block/VmStackNumber): org.ton.block/VmStackNumber // org.ton.block/VmStackInt.div|div(org.ton.block.VmStackNumber){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/VmStackInt.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/VmStackInt.hashCode|hashCode(){}[0]
    final fun minus(org.ton.block/VmStackNumber): org.ton.block/VmStackNumber // org.ton.block/VmStackInt.minus|minus(org.ton.block.VmStackNumber){}[0]
    final fun plus(org.ton.block/VmStackNumber): org.ton.block/VmStackNumber // org.ton.block/VmStackInt.plus|plus(org.ton.block.VmStackNumber){}[0]
    final fun times(org.ton.block/VmStackNumber): org.ton.block/VmStackNumber // org.ton.block/VmStackInt.times|times(org.ton.block.VmStackNumber){}[0]
    final fun toBigInt(): org.ton.bigint/BigInt // org.ton.block/VmStackInt.toBigInt|toBigInt(){}[0]
    final fun toBoolean(): kotlin/Boolean // org.ton.block/VmStackInt.toBoolean|toBoolean(){}[0]
    final fun toInt(): kotlin/Int // org.ton.block/VmStackInt.toInt|toInt(){}[0]
    final fun toLong(): kotlin/Long // org.ton.block/VmStackInt.toLong|toLong(){}[0]
    final fun toString(): kotlin/String // org.ton.block/VmStackInt.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/VmStackInt> { // org.ton.block/VmStackInt.Companion|null[0]
        final fun createCell(org.ton.block/VmStackInt): org.ton.cell/Cell // org.ton.block/VmStackInt.Companion.createCell|createCell(org.ton.block.VmStackInt){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/VmStackInt // org.ton.block/VmStackInt.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/VmStackInt // org.ton.block/VmStackInt.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/VmStackInt // org.ton.block/VmStackInt.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmStackInt) // org.ton.block/VmStackInt.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmStackInt){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmStackInt, org.ton.kotlin.cell/CellContext) // org.ton.block/VmStackInt.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmStackInt;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/VmStackInt> // org.ton.block/VmStackInt.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/VmStackTinyInt : org.ton.block/VmStackNumber, org.ton.block/VmStackValue { // org.ton.block/VmStackTinyInt|null[0]
    constructor <init>(kotlin/Boolean) // org.ton.block/VmStackTinyInt.<init>|<init>(kotlin.Boolean){}[0]
    constructor <init>(kotlin/Int) // org.ton.block/VmStackTinyInt.<init>|<init>(kotlin.Int){}[0]
    constructor <init>(kotlin/Long) // org.ton.block/VmStackTinyInt.<init>|<init>(kotlin.Long){}[0]

    final val value // org.ton.block/VmStackTinyInt.value|{}value[0]
        final fun <get-value>(): kotlin/Long // org.ton.block/VmStackTinyInt.value.<get-value>|<get-value>(){}[0]

    final fun component1(): kotlin/Long // org.ton.block/VmStackTinyInt.component1|component1(){}[0]
    final fun copy(kotlin/Long = ...): org.ton.block/VmStackTinyInt // org.ton.block/VmStackTinyInt.copy|copy(kotlin.Long){}[0]
    final fun div(org.ton.block/VmStackNumber): org.ton.block/VmStackNumber // org.ton.block/VmStackTinyInt.div|div(org.ton.block.VmStackNumber){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/VmStackTinyInt.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/VmStackTinyInt.hashCode|hashCode(){}[0]
    final fun minus(org.ton.block/VmStackNumber): org.ton.block/VmStackNumber // org.ton.block/VmStackTinyInt.minus|minus(org.ton.block.VmStackNumber){}[0]
    final fun plus(org.ton.block/VmStackNumber): org.ton.block/VmStackNumber // org.ton.block/VmStackTinyInt.plus|plus(org.ton.block.VmStackNumber){}[0]
    final fun times(org.ton.block/VmStackNumber): org.ton.block/VmStackNumber // org.ton.block/VmStackTinyInt.times|times(org.ton.block.VmStackNumber){}[0]
    final fun toBigInt(): org.ton.bigint/BigInt // org.ton.block/VmStackTinyInt.toBigInt|toBigInt(){}[0]
    final fun toBoolean(): kotlin/Boolean // org.ton.block/VmStackTinyInt.toBoolean|toBoolean(){}[0]
    final fun toInt(): kotlin/Int // org.ton.block/VmStackTinyInt.toInt|toInt(){}[0]
    final fun toLong(): kotlin/Long // org.ton.block/VmStackTinyInt.toLong|toLong(){}[0]
    final fun toString(): kotlin/String // org.ton.block/VmStackTinyInt.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/VmStackTinyInt> { // org.ton.block/VmStackTinyInt.Companion|null[0]
        final fun createCell(org.ton.block/VmStackTinyInt): org.ton.cell/Cell // org.ton.block/VmStackTinyInt.Companion.createCell|createCell(org.ton.block.VmStackTinyInt){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/VmStackTinyInt // org.ton.block/VmStackTinyInt.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/VmStackTinyInt // org.ton.block/VmStackTinyInt.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/VmStackTinyInt // org.ton.block/VmStackTinyInt.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmStackTinyInt) // org.ton.block/VmStackTinyInt.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmStackTinyInt){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmStackTinyInt, org.ton.kotlin.cell/CellContext) // org.ton.block/VmStackTinyInt.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmStackTinyInt;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/VmStackTinyInt> // org.ton.block/VmStackTinyInt.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/VmStackTuple : org.ton.block/VmStackValue { // org.ton.block/VmStackTuple|null[0]
    constructor <init>(kotlin/Int, org.ton.block/VmTuple) // org.ton.block/VmStackTuple.<init>|<init>(kotlin.Int;org.ton.block.VmTuple){}[0]
    constructor <init>(org.ton.block/VmTuple) // org.ton.block/VmStackTuple.<init>|<init>(org.ton.block.VmTuple){}[0]

    final val data // org.ton.block/VmStackTuple.data|{}data[0]
        final fun <get-data>(): org.ton.block/VmTuple // org.ton.block/VmStackTuple.data.<get-data>|<get-data>(){}[0]
    final val len // org.ton.block/VmStackTuple.len|{}len[0]
        final fun <get-len>(): kotlin/Int // org.ton.block/VmStackTuple.len.<get-len>|<get-len>(){}[0]

    final fun toString(): kotlin/String // org.ton.block/VmStackTuple.toString|toString(){}[0]

    final object Companion : org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/VmStackTuple> { // org.ton.block/VmStackTuple.Companion|null[0]
        final fun createCell(org.ton.block/VmStackTuple): org.ton.cell/Cell // org.ton.block/VmStackTuple.Companion.createCell|createCell(org.ton.block.VmStackTuple){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/VmStackTuple // org.ton.block/VmStackTuple.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/VmStackTuple // org.ton.block/VmStackTuple.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/VmStackTuple // org.ton.block/VmStackTuple.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmStackTuple) // org.ton.block/VmStackTuple.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmStackTuple){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmStackTuple, org.ton.kotlin.cell/CellContext) // org.ton.block/VmStackTuple.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmStackTuple;org.ton.kotlin.cell.CellContext){}[0]
        final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/VmStackTuple> // org.ton.block/VmStackTuple.Companion.tlbConstructor|tlbConstructor(){}[0]
    }
}

final class org.ton.block/VmTupleRefAny : org.ton.block/VmTupleRef { // org.ton.block/VmTupleRefAny|null[0]
    constructor <init>(org.ton.block/VmTuple) // org.ton.block/VmTupleRefAny.<init>|<init>(org.ton.block.VmTuple){}[0]

    final val ref // org.ton.block/VmTupleRefAny.ref|{}ref[0]
        final fun <get-ref>(): org.ton.block/VmTuple // org.ton.block/VmTupleRefAny.ref.<get-ref>|<get-ref>(){}[0]

    final fun component1(): org.ton.block/VmTuple // org.ton.block/VmTupleRefAny.component1|component1(){}[0]
    final fun copy(org.ton.block/VmTuple = ...): org.ton.block/VmTupleRefAny // org.ton.block/VmTupleRefAny.copy|copy(org.ton.block.VmTuple){}[0]
    final fun depth(): kotlin/Int // org.ton.block/VmTupleRefAny.depth|depth(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/VmTupleRefAny.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/VmTupleRefAny.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/VmTupleRefAny.toString|toString(){}[0]
}

final class org.ton.block/VmTupleRefSingle : org.ton.block/VmTupleRef { // org.ton.block/VmTupleRefSingle|null[0]
    constructor <init>(org.ton.block/VmStackValue) // org.ton.block/VmTupleRefSingle.<init>|<init>(org.ton.block.VmStackValue){}[0]

    final val entry // org.ton.block/VmTupleRefSingle.entry|{}entry[0]
        final fun <get-entry>(): org.ton.block/VmStackValue // org.ton.block/VmTupleRefSingle.entry.<get-entry>|<get-entry>(){}[0]

    final fun component1(): org.ton.block/VmStackValue // org.ton.block/VmTupleRefSingle.component1|component1(){}[0]
    final fun copy(org.ton.block/VmStackValue = ...): org.ton.block/VmTupleRefSingle // org.ton.block/VmTupleRefSingle.copy|copy(org.ton.block.VmStackValue){}[0]
    final fun depth(): kotlin/Int // org.ton.block/VmTupleRefSingle.depth|depth(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/VmTupleRefSingle.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/VmTupleRefSingle.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/VmTupleRefSingle.toString|toString(){}[0]
}

final class org.ton.block/VmTupleTcons : org.ton.block/VmTuple { // org.ton.block/VmTupleTcons|null[0]
    constructor <init>(org.ton.block/VmTupleRef, org.ton.block/VmStackValue) // org.ton.block/VmTupleTcons.<init>|<init>(org.ton.block.VmTupleRef;org.ton.block.VmStackValue){}[0]

    final val head // org.ton.block/VmTupleTcons.head|{}head[0]
        final fun <get-head>(): org.ton.block/VmTupleRef // org.ton.block/VmTupleTcons.head.<get-head>|<get-head>(){}[0]
    final val tail // org.ton.block/VmTupleTcons.tail|{}tail[0]
        final fun <get-tail>(): org.ton.block/VmStackValue // org.ton.block/VmTupleTcons.tail.<get-tail>|<get-tail>(){}[0]

    final fun component1(): org.ton.block/VmTupleRef // org.ton.block/VmTupleTcons.component1|component1(){}[0]
    final fun component2(): org.ton.block/VmStackValue // org.ton.block/VmTupleTcons.component2|component2(){}[0]
    final fun copy(org.ton.block/VmTupleRef = ..., org.ton.block/VmStackValue = ...): org.ton.block/VmTupleTcons // org.ton.block/VmTupleTcons.copy|copy(org.ton.block.VmTupleRef;org.ton.block.VmStackValue){}[0]
    final fun depth(): kotlin/Int // org.ton.block/VmTupleTcons.depth|depth(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/VmTupleTcons.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/VmTupleTcons.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.block/VmTupleTcons.toString|toString(){}[0]

    final object Companion { // org.ton.block/VmTupleTcons.Companion|null[0]
        final fun tlbCodec(kotlin/Int): org.ton.tlb/TlbConstructor<org.ton.block/VmTupleTcons> // org.ton.block/VmTupleTcons.Companion.tlbCodec|tlbCodec(kotlin.Int){}[0]
    }
}

final class org.ton.kotlin.account/Account { // org.ton.kotlin.account/Account|null[0]
    constructor <init>(org.ton.block/MsgAddressInt, org.ton.block/StorageInfo, kotlin/Long, org.ton.block/CurrencyCollection, org.ton.block/AccountState) // org.ton.kotlin.account/Account.<init>|<init>(org.ton.block.MsgAddressInt;org.ton.block.StorageInfo;kotlin.Long;org.ton.block.CurrencyCollection;org.ton.block.AccountState){}[0]

    final val addr // org.ton.kotlin.account/Account.addr|{}addr[0]
        final fun <get-addr>(): org.ton.block/MsgAddressInt // org.ton.kotlin.account/Account.addr.<get-addr>|<get-addr>(){}[0]
    final val address // org.ton.kotlin.account/Account.address|{}address[0]
        final fun <get-address>(): org.ton.block/MsgAddressInt // org.ton.kotlin.account/Account.address.<get-address>|<get-address>(){}[0]
    final val balance // org.ton.kotlin.account/Account.balance|{}balance[0]
        final fun <get-balance>(): org.ton.block/CurrencyCollection // org.ton.kotlin.account/Account.balance.<get-balance>|<get-balance>(){}[0]
    final val isActive // org.ton.kotlin.account/Account.isActive|{}isActive[0]
        final fun <get-isActive>(): kotlin/Boolean // org.ton.kotlin.account/Account.isActive.<get-isActive>|<get-isActive>(){}[0]
    final val isFrozen // org.ton.kotlin.account/Account.isFrozen|{}isFrozen[0]
        final fun <get-isFrozen>(): kotlin/Boolean // org.ton.kotlin.account/Account.isFrozen.<get-isFrozen>|<get-isFrozen>(){}[0]
    final val isUninit // org.ton.kotlin.account/Account.isUninit|{}isUninit[0]
        final fun <get-isUninit>(): kotlin/Boolean // org.ton.kotlin.account/Account.isUninit.<get-isUninit>|<get-isUninit>(){}[0]
    final val lastTransLt // org.ton.kotlin.account/Account.lastTransLt|{}lastTransLt[0]
        final fun <get-lastTransLt>(): kotlin/Long // org.ton.kotlin.account/Account.lastTransLt.<get-lastTransLt>|<get-lastTransLt>(){}[0]
    final val state // org.ton.kotlin.account/Account.state|{}state[0]
        final fun <get-state>(): org.ton.block/AccountState // org.ton.kotlin.account/Account.state.<get-state>|<get-state>(){}[0]
    final val storage // org.ton.kotlin.account/Account.storage|{}storage[0]
        final fun <get-storage>(): org.ton.block/AccountStorage // org.ton.kotlin.account/Account.storage.<get-storage>|<get-storage>(){}[0]
    final val storageStat // org.ton.kotlin.account/Account.storageStat|{}storageStat[0]
        final fun <get-storageStat>(): org.ton.block/StorageInfo // org.ton.kotlin.account/Account.storageStat.<get-storageStat>|<get-storageStat>(){}[0]

    final fun component1(): org.ton.block/MsgAddressInt // org.ton.kotlin.account/Account.component1|component1(){}[0]
    final fun component2(): org.ton.block/StorageInfo // org.ton.kotlin.account/Account.component2|component2(){}[0]
    final fun component3(): kotlin/Long // org.ton.kotlin.account/Account.component3|component3(){}[0]
    final fun component4(): org.ton.block/CurrencyCollection // org.ton.kotlin.account/Account.component4|component4(){}[0]
    final fun component5(): org.ton.block/AccountState // org.ton.kotlin.account/Account.component5|component5(){}[0]
    final fun copy(org.ton.block/MsgAddressInt = ..., org.ton.block/StorageInfo = ..., kotlin/Long = ..., org.ton.block/CurrencyCollection = ..., org.ton.block/AccountState = ...): org.ton.kotlin.account/Account // org.ton.kotlin.account/Account.copy|copy(org.ton.block.MsgAddressInt;org.ton.block.StorageInfo;kotlin.Long;org.ton.block.CurrencyCollection;org.ton.block.AccountState){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.kotlin.account/Account.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.kotlin.account/Account.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.kotlin.account/Account.toString|toString(){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.kotlin.account/Account> { // org.ton.kotlin.account/Account.Companion|null[0]
        final fun createCell(org.ton.kotlin.account/Account): org.ton.cell/Cell // org.ton.kotlin.account/Account.Companion.createCell|createCell(org.ton.kotlin.account.Account){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.kotlin.account/Account // org.ton.kotlin.account/Account.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.kotlin.account/Account // org.ton.kotlin.account/Account.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.kotlin.account/Account // org.ton.kotlin.account/Account.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.kotlin.account/Account) // org.ton.kotlin.account/Account.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.kotlin.account.Account){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.kotlin.account/Account, org.ton.kotlin.cell/CellContext) // org.ton.kotlin.account/Account.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.kotlin.account.Account;org.ton.kotlin.cell.CellContext){}[0]
    }
}

final class org.ton.kotlin.account/ShardAccount { // org.ton.kotlin.account/ShardAccount|null[0]
    constructor <init>(org.ton.tlb/CellRef<org.ton.kotlin.account/Account?>, kotlinx.io.bytestring/ByteString, kotlin/Long) // org.ton.kotlin.account/ShardAccount.<init>|<init>(org.ton.tlb.CellRef<org.ton.kotlin.account.Account?>;kotlinx.io.bytestring.ByteString;kotlin.Long){}[0]

    final val account // org.ton.kotlin.account/ShardAccount.account|{}account[0]
        final fun <get-account>(): org.ton.tlb/CellRef<org.ton.kotlin.account/Account?> // org.ton.kotlin.account/ShardAccount.account.<get-account>|<get-account>(){}[0]
    final val lastTransHash // org.ton.kotlin.account/ShardAccount.lastTransHash|{}lastTransHash[0]
        final fun <get-lastTransHash>(): kotlinx.io.bytestring/ByteString // org.ton.kotlin.account/ShardAccount.lastTransHash.<get-lastTransHash>|<get-lastTransHash>(){}[0]
    final val lastTransLt // org.ton.kotlin.account/ShardAccount.lastTransLt|{}lastTransLt[0]
        final fun <get-lastTransLt>(): kotlin/Long // org.ton.kotlin.account/ShardAccount.lastTransLt.<get-lastTransLt>|<get-lastTransLt>(){}[0]

    final fun component1(): org.ton.tlb/CellRef<org.ton.kotlin.account/Account?> // org.ton.kotlin.account/ShardAccount.component1|component1(){}[0]
    final fun component2(): kotlinx.io.bytestring/ByteString // org.ton.kotlin.account/ShardAccount.component2|component2(){}[0]
    final fun component3(): kotlin/Long // org.ton.kotlin.account/ShardAccount.component3|component3(){}[0]
    final fun copy(org.ton.tlb/CellRef<org.ton.kotlin.account/Account?> = ..., kotlinx.io.bytestring/ByteString = ..., kotlin/Long = ...): org.ton.kotlin.account/ShardAccount // org.ton.kotlin.account/ShardAccount.copy|copy(org.ton.tlb.CellRef<org.ton.kotlin.account.Account?>;kotlinx.io.bytestring.ByteString;kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.kotlin.account/ShardAccount.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.kotlin.account/ShardAccount.hashCode|hashCode(){}[0]
    final fun loadAccount(org.ton.kotlin.cell/CellContext = ...): org.ton.kotlin.account/Account? // org.ton.kotlin.account/ShardAccount.loadAccount|loadAccount(org.ton.kotlin.cell.CellContext){}[0]
    final fun toString(): kotlin/String // org.ton.kotlin.account/ShardAccount.toString|toString(){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.kotlin.account/ShardAccount> { // org.ton.kotlin.account/ShardAccount.Companion|null[0]
        final fun createCell(org.ton.kotlin.account/ShardAccount): org.ton.cell/Cell // org.ton.kotlin.account/ShardAccount.Companion.createCell|createCell(org.ton.kotlin.account.ShardAccount){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.kotlin.account/ShardAccount // org.ton.kotlin.account/ShardAccount.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.kotlin.account/ShardAccount // org.ton.kotlin.account/ShardAccount.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.kotlin.account/ShardAccount // org.ton.kotlin.account/ShardAccount.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.kotlin.account/ShardAccount) // org.ton.kotlin.account/ShardAccount.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.kotlin.account.ShardAccount){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.kotlin.account/ShardAccount, org.ton.kotlin.cell/CellContext) // org.ton.kotlin.account/ShardAccount.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.kotlin.account.ShardAccount;org.ton.kotlin.cell.CellContext){}[0]
    }
}

final class org.ton.kotlin.config/BurningConfig { // org.ton.kotlin.config/BurningConfig|null[0]
    constructor <init>(org.ton.block/AddrStd?, kotlin/Int, kotlin/Int) // org.ton.kotlin.config/BurningConfig.<init>|<init>(org.ton.block.AddrStd?;kotlin.Int;kotlin.Int){}[0]

    final val blackholeAddress // org.ton.kotlin.config/BurningConfig.blackholeAddress|{}blackholeAddress[0]
        final fun <get-blackholeAddress>(): org.ton.block/AddrStd? // org.ton.kotlin.config/BurningConfig.blackholeAddress.<get-blackholeAddress>|<get-blackholeAddress>(){}[0]
    final val feeBurnDenom // org.ton.kotlin.config/BurningConfig.feeBurnDenom|{}feeBurnDenom[0]
        final fun <get-feeBurnDenom>(): kotlin/Int // org.ton.kotlin.config/BurningConfig.feeBurnDenom.<get-feeBurnDenom>|<get-feeBurnDenom>(){}[0]
    final val feeBurnNum // org.ton.kotlin.config/BurningConfig.feeBurnNum|{}feeBurnNum[0]
        final fun <get-feeBurnNum>(): kotlin/Int // org.ton.kotlin.config/BurningConfig.feeBurnNum.<get-feeBurnNum>|<get-feeBurnNum>(){}[0]

    final fun calculateBurnedFees(org.ton.block/Coins): org.ton.block/Coins // org.ton.kotlin.config/BurningConfig.calculateBurnedFees|calculateBurnedFees(org.ton.block.Coins){}[0]
    final fun component1(): org.ton.block/AddrStd? // org.ton.kotlin.config/BurningConfig.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.kotlin.config/BurningConfig.component2|component2(){}[0]
    final fun component3(): kotlin/Int // org.ton.kotlin.config/BurningConfig.component3|component3(){}[0]
    final fun copy(org.ton.block/AddrStd? = ..., kotlin/Int = ..., kotlin/Int = ...): org.ton.kotlin.config/BurningConfig // org.ton.kotlin.config/BurningConfig.copy|copy(org.ton.block.AddrStd?;kotlin.Int;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.kotlin.config/BurningConfig.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.kotlin.config/BurningConfig.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.kotlin.config/BurningConfig.toString|toString(){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.kotlin.config/BurningConfig> { // org.ton.kotlin.config/BurningConfig.Companion|null[0]
        final fun createCell(org.ton.kotlin.config/BurningConfig): org.ton.cell/Cell // org.ton.kotlin.config/BurningConfig.Companion.createCell|createCell(org.ton.kotlin.config.BurningConfig){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.kotlin.config/BurningConfig // org.ton.kotlin.config/BurningConfig.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.kotlin.config/BurningConfig // org.ton.kotlin.config/BurningConfig.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.kotlin.config/BurningConfig // org.ton.kotlin.config/BurningConfig.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.kotlin.config/BurningConfig) // org.ton.kotlin.config/BurningConfig.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.kotlin.config.BurningConfig){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.kotlin.config/BurningConfig, org.ton.kotlin.cell/CellContext) // org.ton.kotlin.config/BurningConfig.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.kotlin.config.BurningConfig;org.ton.kotlin.cell.CellContext){}[0]
    }
}

final class org.ton.kotlin.currency/VarUInt248 : kotlin/Comparable<org.ton.kotlin.currency/VarUInt248>, kotlin/Number { // org.ton.kotlin.currency/VarUInt248|null[0]
    constructor <init>(kotlin/Long) // org.ton.kotlin.currency/VarUInt248.<init>|<init>(kotlin.Long){}[0]
    constructor <init>(kotlin/String, kotlin/Int) // org.ton.kotlin.currency/VarUInt248.<init>|<init>(kotlin.String;kotlin.Int){}[0]
    constructor <init>(org.ton.bigint/BigInt) // org.ton.kotlin.currency/VarUInt248.<init>|<init>(org.ton.bigint.BigInt){}[0]

    final val amount // org.ton.kotlin.currency/VarUInt248.amount|{}amount[0]
        final fun <get-amount>(): org.ton.bigint/BigInt // org.ton.kotlin.currency/VarUInt248.amount.<get-amount>|<get-amount>(){}[0]

    final fun compareTo(org.ton.kotlin.currency/VarUInt248): kotlin/Int // org.ton.kotlin.currency/VarUInt248.compareTo|compareTo(org.ton.kotlin.currency.VarUInt248){}[0]
    final fun component1(): org.ton.bigint/BigInt // org.ton.kotlin.currency/VarUInt248.component1|component1(){}[0]
    final fun copy(org.ton.bigint/BigInt = ...): org.ton.kotlin.currency/VarUInt248 // org.ton.kotlin.currency/VarUInt248.copy|copy(org.ton.bigint.BigInt){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.kotlin.currency/VarUInt248.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.kotlin.currency/VarUInt248.hashCode|hashCode(){}[0]
    final fun toByte(): kotlin/Byte // org.ton.kotlin.currency/VarUInt248.toByte|toByte(){}[0]
    final fun toDouble(): kotlin/Double // org.ton.kotlin.currency/VarUInt248.toDouble|toDouble(){}[0]
    final fun toFloat(): kotlin/Float // org.ton.kotlin.currency/VarUInt248.toFloat|toFloat(){}[0]
    final fun toInt(): kotlin/Int // org.ton.kotlin.currency/VarUInt248.toInt|toInt(){}[0]
    final fun toLong(): kotlin/Long // org.ton.kotlin.currency/VarUInt248.toLong|toLong(){}[0]
    final fun toShort(): kotlin/Short // org.ton.kotlin.currency/VarUInt248.toShort|toShort(){}[0]
    final fun toString(): kotlin/String // org.ton.kotlin.currency/VarUInt248.toString|toString(){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.kotlin.currency/VarUInt248> { // org.ton.kotlin.currency/VarUInt248.Companion|null[0]
        final val MIN // org.ton.kotlin.currency/VarUInt248.Companion.MIN|{}MIN[0]
            final fun <get-MIN>(): org.ton.kotlin.currency/VarUInt248 // org.ton.kotlin.currency/VarUInt248.Companion.MIN.<get-MIN>|<get-MIN>(){}[0]
        final val ONE // org.ton.kotlin.currency/VarUInt248.Companion.ONE|{}ONE[0]
            final fun <get-ONE>(): org.ton.kotlin.currency/VarUInt248 // org.ton.kotlin.currency/VarUInt248.Companion.ONE.<get-ONE>|<get-ONE>(){}[0]
        final val TEN // org.ton.kotlin.currency/VarUInt248.Companion.TEN|{}TEN[0]
            final fun <get-TEN>(): org.ton.kotlin.currency/VarUInt248 // org.ton.kotlin.currency/VarUInt248.Companion.TEN.<get-TEN>|<get-TEN>(){}[0]
        final val TWO // org.ton.kotlin.currency/VarUInt248.Companion.TWO|{}TWO[0]
            final fun <get-TWO>(): org.ton.kotlin.currency/VarUInt248 // org.ton.kotlin.currency/VarUInt248.Companion.TWO.<get-TWO>|<get-TWO>(){}[0]
        final val ZERO // org.ton.kotlin.currency/VarUInt248.Companion.ZERO|{}ZERO[0]
            final fun <get-ZERO>(): org.ton.kotlin.currency/VarUInt248 // org.ton.kotlin.currency/VarUInt248.Companion.ZERO.<get-ZERO>|<get-ZERO>(){}[0]

        final fun createCell(org.ton.kotlin.currency/VarUInt248): org.ton.cell/Cell // org.ton.kotlin.currency/VarUInt248.Companion.createCell|createCell(org.ton.kotlin.currency.VarUInt248){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.kotlin.currency/VarUInt248 // org.ton.kotlin.currency/VarUInt248.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.kotlin.currency/VarUInt248 // org.ton.kotlin.currency/VarUInt248.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.kotlin.currency/VarUInt248 // org.ton.kotlin.currency/VarUInt248.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.kotlin.currency/VarUInt248) // org.ton.kotlin.currency/VarUInt248.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.kotlin.currency.VarUInt248){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.kotlin.currency/VarUInt248, org.ton.kotlin.cell/CellContext) // org.ton.kotlin.currency/VarUInt248.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.kotlin.currency.VarUInt248;org.ton.kotlin.cell.CellContext){}[0]
    }
}

final class org.ton.kotlin.message/MessageLayout { // org.ton.kotlin.message/MessageLayout|null[0]
    constructor <init>(kotlin/Boolean, kotlin/Boolean) // org.ton.kotlin.message/MessageLayout.<init>|<init>(kotlin.Boolean;kotlin.Boolean){}[0]

    final val bodyToCell // org.ton.kotlin.message/MessageLayout.bodyToCell|{}bodyToCell[0]
        final fun <get-bodyToCell>(): kotlin/Boolean // org.ton.kotlin.message/MessageLayout.bodyToCell.<get-bodyToCell>|<get-bodyToCell>(){}[0]
    final val initToCell // org.ton.kotlin.message/MessageLayout.initToCell|{}initToCell[0]
        final fun <get-initToCell>(): kotlin/Boolean // org.ton.kotlin.message/MessageLayout.initToCell.<get-initToCell>|<get-initToCell>(){}[0]

    final fun <#A1: kotlin/Any?> eitherBody(#A1, org.ton.tlb/TlbCodec<#A1>): org.ton.block/Either<#A1, org.ton.tlb/CellRef<#A1>> // org.ton.kotlin.message/MessageLayout.eitherBody|eitherBody(0:0;org.ton.tlb.TlbCodec<0:0>){0§<kotlin.Any?>}[0]
    final fun component1(): kotlin/Boolean // org.ton.kotlin.message/MessageLayout.component1|component1(){}[0]
    final fun component2(): kotlin/Boolean // org.ton.kotlin.message/MessageLayout.component2|component2(){}[0]
    final fun copy(kotlin/Boolean = ..., kotlin/Boolean = ...): org.ton.kotlin.message/MessageLayout // org.ton.kotlin.message/MessageLayout.copy|copy(kotlin.Boolean;kotlin.Boolean){}[0]
    final fun eitherInit(org.ton.block/StateInit?): org.ton.block/Either<org.ton.block/StateInit, org.ton.tlb/CellRef<org.ton.block/StateInit>>? // org.ton.kotlin.message/MessageLayout.eitherInit|eitherInit(org.ton.block.StateInit?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.kotlin.message/MessageLayout.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.kotlin.message/MessageLayout.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.kotlin.message/MessageLayout.toString|toString(){}[0]

    final object Companion { // org.ton.kotlin.message/MessageLayout.Companion|null[0]
        final val PLAIN // org.ton.kotlin.message/MessageLayout.Companion.PLAIN|{}PLAIN[0]
            final fun <get-PLAIN>(): org.ton.kotlin.message/MessageLayout // org.ton.kotlin.message/MessageLayout.Companion.PLAIN.<get-PLAIN>|<get-PLAIN>(){}[0]

        final fun <#A2: kotlin/Any> compute(org.ton.block/CommonMsgInfo, org.ton.block/StateInit?, #A2, org.ton.tlb/TlbStorer<#A2>): org.ton.kotlin.message/MessageLayout // org.ton.kotlin.message/MessageLayout.Companion.compute|compute(org.ton.block.CommonMsgInfo;org.ton.block.StateInit?;0:0;org.ton.tlb.TlbStorer<0:0>){0§<kotlin.Any>}[0]
        final fun <#A2: kotlin/Any> compute(org.ton.block/CommonMsgInfoRelaxed, org.ton.block/StateInit?, #A2, org.ton.tlb/TlbStorer<#A2>): org.ton.kotlin.message/MessageLayout // org.ton.kotlin.message/MessageLayout.Companion.compute|compute(org.ton.block.CommonMsgInfoRelaxed;org.ton.block.StateInit?;0:0;org.ton.tlb.TlbStorer<0:0>){0§<kotlin.Any>}[0]
    }
}

final class org.ton.kotlin.transaction.phase/ActionPhase { // org.ton.kotlin.transaction.phase/ActionPhase|null[0]
    constructor <init>(kotlin/Boolean, kotlin/Boolean, kotlin/Boolean, org.ton.block/AccStatusChange, org.ton.block/Coins?, org.ton.block/Coins?, kotlin/Int, kotlin/Int?, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlinx.io.bytestring/ByteString, org.ton.block/StorageUsedShort) // org.ton.kotlin.transaction.phase/ActionPhase.<init>|<init>(kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;org.ton.block.AccStatusChange;org.ton.block.Coins?;org.ton.block.Coins?;kotlin.Int;kotlin.Int?;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlinx.io.bytestring.ByteString;org.ton.block.StorageUsedShort){}[0]

    final val actionListHash // org.ton.kotlin.transaction.phase/ActionPhase.actionListHash|{}actionListHash[0]
        final fun <get-actionListHash>(): kotlinx.io.bytestring/ByteString // org.ton.kotlin.transaction.phase/ActionPhase.actionListHash.<get-actionListHash>|<get-actionListHash>(){}[0]
    final val isValid // org.ton.kotlin.transaction.phase/ActionPhase.isValid|{}isValid[0]
        final fun <get-isValid>(): kotlin/Boolean // org.ton.kotlin.transaction.phase/ActionPhase.isValid.<get-isValid>|<get-isValid>(){}[0]
    final val messagesCreated // org.ton.kotlin.transaction.phase/ActionPhase.messagesCreated|{}messagesCreated[0]
        final fun <get-messagesCreated>(): kotlin/Int // org.ton.kotlin.transaction.phase/ActionPhase.messagesCreated.<get-messagesCreated>|<get-messagesCreated>(){}[0]
    final val noFunds // org.ton.kotlin.transaction.phase/ActionPhase.noFunds|{}noFunds[0]
        final fun <get-noFunds>(): kotlin/Boolean // org.ton.kotlin.transaction.phase/ActionPhase.noFunds.<get-noFunds>|<get-noFunds>(){}[0]
    final val resultArg // org.ton.kotlin.transaction.phase/ActionPhase.resultArg|{}resultArg[0]
        final fun <get-resultArg>(): kotlin/Int? // org.ton.kotlin.transaction.phase/ActionPhase.resultArg.<get-resultArg>|<get-resultArg>(){}[0]
    final val resultCode // org.ton.kotlin.transaction.phase/ActionPhase.resultCode|{}resultCode[0]
        final fun <get-resultCode>(): kotlin/Int // org.ton.kotlin.transaction.phase/ActionPhase.resultCode.<get-resultCode>|<get-resultCode>(){}[0]
    final val skippedActions // org.ton.kotlin.transaction.phase/ActionPhase.skippedActions|{}skippedActions[0]
        final fun <get-skippedActions>(): kotlin/Int // org.ton.kotlin.transaction.phase/ActionPhase.skippedActions.<get-skippedActions>|<get-skippedActions>(){}[0]
    final val specialActions // org.ton.kotlin.transaction.phase/ActionPhase.specialActions|{}specialActions[0]
        final fun <get-specialActions>(): kotlin/Int // org.ton.kotlin.transaction.phase/ActionPhase.specialActions.<get-specialActions>|<get-specialActions>(){}[0]
    final val statusChange // org.ton.kotlin.transaction.phase/ActionPhase.statusChange|{}statusChange[0]
        final fun <get-statusChange>(): org.ton.block/AccStatusChange // org.ton.kotlin.transaction.phase/ActionPhase.statusChange.<get-statusChange>|<get-statusChange>(){}[0]
    final val success // org.ton.kotlin.transaction.phase/ActionPhase.success|{}success[0]
        final fun <get-success>(): kotlin/Boolean // org.ton.kotlin.transaction.phase/ActionPhase.success.<get-success>|<get-success>(){}[0]
    final val totalActionFees // org.ton.kotlin.transaction.phase/ActionPhase.totalActionFees|{}totalActionFees[0]
        final fun <get-totalActionFees>(): org.ton.block/Coins? // org.ton.kotlin.transaction.phase/ActionPhase.totalActionFees.<get-totalActionFees>|<get-totalActionFees>(){}[0]
    final val totalActions // org.ton.kotlin.transaction.phase/ActionPhase.totalActions|{}totalActions[0]
        final fun <get-totalActions>(): kotlin/Int // org.ton.kotlin.transaction.phase/ActionPhase.totalActions.<get-totalActions>|<get-totalActions>(){}[0]
    final val totalFwdFees // org.ton.kotlin.transaction.phase/ActionPhase.totalFwdFees|{}totalFwdFees[0]
        final fun <get-totalFwdFees>(): org.ton.block/Coins? // org.ton.kotlin.transaction.phase/ActionPhase.totalFwdFees.<get-totalFwdFees>|<get-totalFwdFees>(){}[0]
    final val totalMessageSize // org.ton.kotlin.transaction.phase/ActionPhase.totalMessageSize|{}totalMessageSize[0]
        final fun <get-totalMessageSize>(): org.ton.block/StorageUsedShort // org.ton.kotlin.transaction.phase/ActionPhase.totalMessageSize.<get-totalMessageSize>|<get-totalMessageSize>(){}[0]

    final fun component1(): kotlin/Boolean // org.ton.kotlin.transaction.phase/ActionPhase.component1|component1(){}[0]
    final fun component10(): kotlin/Int // org.ton.kotlin.transaction.phase/ActionPhase.component10|component10(){}[0]
    final fun component11(): kotlin/Int // org.ton.kotlin.transaction.phase/ActionPhase.component11|component11(){}[0]
    final fun component12(): kotlin/Int // org.ton.kotlin.transaction.phase/ActionPhase.component12|component12(){}[0]
    final fun component13(): kotlinx.io.bytestring/ByteString // org.ton.kotlin.transaction.phase/ActionPhase.component13|component13(){}[0]
    final fun component14(): org.ton.block/StorageUsedShort // org.ton.kotlin.transaction.phase/ActionPhase.component14|component14(){}[0]
    final fun component2(): kotlin/Boolean // org.ton.kotlin.transaction.phase/ActionPhase.component2|component2(){}[0]
    final fun component3(): kotlin/Boolean // org.ton.kotlin.transaction.phase/ActionPhase.component3|component3(){}[0]
    final fun component4(): org.ton.block/AccStatusChange // org.ton.kotlin.transaction.phase/ActionPhase.component4|component4(){}[0]
    final fun component5(): org.ton.block/Coins? // org.ton.kotlin.transaction.phase/ActionPhase.component5|component5(){}[0]
    final fun component6(): org.ton.block/Coins? // org.ton.kotlin.transaction.phase/ActionPhase.component6|component6(){}[0]
    final fun component7(): kotlin/Int // org.ton.kotlin.transaction.phase/ActionPhase.component7|component7(){}[0]
    final fun component8(): kotlin/Int? // org.ton.kotlin.transaction.phase/ActionPhase.component8|component8(){}[0]
    final fun component9(): kotlin/Int // org.ton.kotlin.transaction.phase/ActionPhase.component9|component9(){}[0]
    final fun copy(kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., org.ton.block/AccStatusChange = ..., org.ton.block/Coins? = ..., org.ton.block/Coins? = ..., kotlin/Int = ..., kotlin/Int? = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., kotlinx.io.bytestring/ByteString = ..., org.ton.block/StorageUsedShort = ...): org.ton.kotlin.transaction.phase/ActionPhase // org.ton.kotlin.transaction.phase/ActionPhase.copy|copy(kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;org.ton.block.AccStatusChange;org.ton.block.Coins?;org.ton.block.Coins?;kotlin.Int;kotlin.Int?;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlinx.io.bytestring.ByteString;org.ton.block.StorageUsedShort){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.kotlin.transaction.phase/ActionPhase.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.kotlin.transaction.phase/ActionPhase.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.kotlin.transaction.phase/ActionPhase.toString|toString(){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.kotlin.transaction.phase/ActionPhase> { // org.ton.kotlin.transaction.phase/ActionPhase.Companion|null[0]
        final fun createCell(org.ton.kotlin.transaction.phase/ActionPhase): org.ton.cell/Cell // org.ton.kotlin.transaction.phase/ActionPhase.Companion.createCell|createCell(org.ton.kotlin.transaction.phase.ActionPhase){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.kotlin.transaction.phase/ActionPhase // org.ton.kotlin.transaction.phase/ActionPhase.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.kotlin.transaction.phase/ActionPhase // org.ton.kotlin.transaction.phase/ActionPhase.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.kotlin.transaction.phase/ActionPhase // org.ton.kotlin.transaction.phase/ActionPhase.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.kotlin.transaction.phase/ActionPhase) // org.ton.kotlin.transaction.phase/ActionPhase.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.kotlin.transaction.phase.ActionPhase){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.kotlin.transaction.phase/ActionPhase, org.ton.kotlin.cell/CellContext) // org.ton.kotlin.transaction.phase/ActionPhase.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.kotlin.transaction.phase.ActionPhase;org.ton.kotlin.cell.CellContext){}[0]
    }
}

final class org.ton.kotlin.transaction.phase/CreditPhase { // org.ton.kotlin.transaction.phase/CreditPhase|null[0]
    constructor <init>(org.ton.block/Coins?, org.ton.block/CurrencyCollection) // org.ton.kotlin.transaction.phase/CreditPhase.<init>|<init>(org.ton.block.Coins?;org.ton.block.CurrencyCollection){}[0]

    final val credit // org.ton.kotlin.transaction.phase/CreditPhase.credit|{}credit[0]
        final fun <get-credit>(): org.ton.block/CurrencyCollection // org.ton.kotlin.transaction.phase/CreditPhase.credit.<get-credit>|<get-credit>(){}[0]
    final val dueFeesCollected // org.ton.kotlin.transaction.phase/CreditPhase.dueFeesCollected|{}dueFeesCollected[0]
        final fun <get-dueFeesCollected>(): org.ton.block/Coins? // org.ton.kotlin.transaction.phase/CreditPhase.dueFeesCollected.<get-dueFeesCollected>|<get-dueFeesCollected>(){}[0]

    final fun component1(): org.ton.block/Coins? // org.ton.kotlin.transaction.phase/CreditPhase.component1|component1(){}[0]
    final fun component2(): org.ton.block/CurrencyCollection // org.ton.kotlin.transaction.phase/CreditPhase.component2|component2(){}[0]
    final fun copy(org.ton.block/Coins? = ..., org.ton.block/CurrencyCollection = ...): org.ton.kotlin.transaction.phase/CreditPhase // org.ton.kotlin.transaction.phase/CreditPhase.copy|copy(org.ton.block.Coins?;org.ton.block.CurrencyCollection){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.kotlin.transaction.phase/CreditPhase.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.kotlin.transaction.phase/CreditPhase.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.kotlin.transaction.phase/CreditPhase.toString|toString(){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.kotlin.transaction.phase/CreditPhase> { // org.ton.kotlin.transaction.phase/CreditPhase.Companion|null[0]
        final fun createCell(org.ton.kotlin.transaction.phase/CreditPhase): org.ton.cell/Cell // org.ton.kotlin.transaction.phase/CreditPhase.Companion.createCell|createCell(org.ton.kotlin.transaction.phase.CreditPhase){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.kotlin.transaction.phase/CreditPhase // org.ton.kotlin.transaction.phase/CreditPhase.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.kotlin.transaction.phase/CreditPhase // org.ton.kotlin.transaction.phase/CreditPhase.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.kotlin.transaction.phase/CreditPhase // org.ton.kotlin.transaction.phase/CreditPhase.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.kotlin.transaction.phase/CreditPhase) // org.ton.kotlin.transaction.phase/CreditPhase.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.kotlin.transaction.phase.CreditPhase){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.kotlin.transaction.phase/CreditPhase, org.ton.kotlin.cell/CellContext) // org.ton.kotlin.transaction.phase/CreditPhase.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.kotlin.transaction.phase.CreditPhase;org.ton.kotlin.cell.CellContext){}[0]
    }
}

final class org.ton.kotlin.transaction.phase/StoragePhase { // org.ton.kotlin.transaction.phase/StoragePhase|null[0]
    constructor <init>(org.ton.block/Coins, org.ton.block/Coins?, org.ton.block/AccStatusChange) // org.ton.kotlin.transaction.phase/StoragePhase.<init>|<init>(org.ton.block.Coins;org.ton.block.Coins?;org.ton.block.AccStatusChange){}[0]

    final val statusChange // org.ton.kotlin.transaction.phase/StoragePhase.statusChange|{}statusChange[0]
        final fun <get-statusChange>(): org.ton.block/AccStatusChange // org.ton.kotlin.transaction.phase/StoragePhase.statusChange.<get-statusChange>|<get-statusChange>(){}[0]
    final val storageFeesCollected // org.ton.kotlin.transaction.phase/StoragePhase.storageFeesCollected|{}storageFeesCollected[0]
        final fun <get-storageFeesCollected>(): org.ton.block/Coins // org.ton.kotlin.transaction.phase/StoragePhase.storageFeesCollected.<get-storageFeesCollected>|<get-storageFeesCollected>(){}[0]
    final val storageFeesDue // org.ton.kotlin.transaction.phase/StoragePhase.storageFeesDue|{}storageFeesDue[0]
        final fun <get-storageFeesDue>(): org.ton.block/Coins? // org.ton.kotlin.transaction.phase/StoragePhase.storageFeesDue.<get-storageFeesDue>|<get-storageFeesDue>(){}[0]

    final fun component1(): org.ton.block/Coins // org.ton.kotlin.transaction.phase/StoragePhase.component1|component1(){}[0]
    final fun component2(): org.ton.block/Coins? // org.ton.kotlin.transaction.phase/StoragePhase.component2|component2(){}[0]
    final fun component3(): org.ton.block/AccStatusChange // org.ton.kotlin.transaction.phase/StoragePhase.component3|component3(){}[0]
    final fun copy(org.ton.block/Coins = ..., org.ton.block/Coins? = ..., org.ton.block/AccStatusChange = ...): org.ton.kotlin.transaction.phase/StoragePhase // org.ton.kotlin.transaction.phase/StoragePhase.copy|copy(org.ton.block.Coins;org.ton.block.Coins?;org.ton.block.AccStatusChange){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.kotlin.transaction.phase/StoragePhase.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.kotlin.transaction.phase/StoragePhase.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.kotlin.transaction.phase/StoragePhase.toString|toString(){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.kotlin.transaction.phase/StoragePhase> { // org.ton.kotlin.transaction.phase/StoragePhase.Companion|null[0]
        final fun createCell(org.ton.kotlin.transaction.phase/StoragePhase): org.ton.cell/Cell // org.ton.kotlin.transaction.phase/StoragePhase.Companion.createCell|createCell(org.ton.kotlin.transaction.phase.StoragePhase){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.kotlin.transaction.phase/StoragePhase // org.ton.kotlin.transaction.phase/StoragePhase.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.kotlin.transaction.phase/StoragePhase // org.ton.kotlin.transaction.phase/StoragePhase.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.kotlin.transaction.phase/StoragePhase // org.ton.kotlin.transaction.phase/StoragePhase.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.kotlin.transaction.phase/StoragePhase) // org.ton.kotlin.transaction.phase/StoragePhase.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.kotlin.transaction.phase.StoragePhase){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.kotlin.transaction.phase/StoragePhase, org.ton.kotlin.cell/CellContext) // org.ton.kotlin.transaction.phase/StoragePhase.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.kotlin.transaction.phase.StoragePhase;org.ton.kotlin.cell.CellContext){}[0]
    }
}

final class org.ton.kotlin.transaction/Transaction { // org.ton.kotlin.transaction/Transaction|null[0]
    constructor <init>(kotlinx.io.bytestring/ByteString, kotlin/Long, kotlinx.io.bytestring/ByteString, kotlin/Long, kotlin/Long, kotlin/Int, org.ton.block/AccountStatus, org.ton.block/AccountStatus, org.ton.tlb/CellRef<org.ton.block/Message<org.ton.cell/CellSlice>>?, org.ton.kotlin.dict/Dictionary<kotlin/Int, org.ton.tlb/CellRef<org.ton.block/Message<org.ton.cell/CellSlice>>>, org.ton.block/CurrencyCollection, org.ton.tlb/CellRef<org.ton.block/HashUpdate>, org.ton.tlb/CellRef<org.ton.kotlin.transaction/TransactionInfo>) // org.ton.kotlin.transaction/Transaction.<init>|<init>(kotlinx.io.bytestring.ByteString;kotlin.Long;kotlinx.io.bytestring.ByteString;kotlin.Long;kotlin.Long;kotlin.Int;org.ton.block.AccountStatus;org.ton.block.AccountStatus;org.ton.tlb.CellRef<org.ton.block.Message<org.ton.cell.CellSlice>>?;org.ton.kotlin.dict.Dictionary<kotlin.Int,org.ton.tlb.CellRef<org.ton.block.Message<org.ton.cell.CellSlice>>>;org.ton.block.CurrencyCollection;org.ton.tlb.CellRef<org.ton.block.HashUpdate>;org.ton.tlb.CellRef<org.ton.kotlin.transaction.TransactionInfo>){}[0]

    final val account // org.ton.kotlin.transaction/Transaction.account|{}account[0]
        final fun <get-account>(): kotlinx.io.bytestring/ByteString // org.ton.kotlin.transaction/Transaction.account.<get-account>|<get-account>(){}[0]
    final val endStatus // org.ton.kotlin.transaction/Transaction.endStatus|{}endStatus[0]
        final fun <get-endStatus>(): org.ton.block/AccountStatus // org.ton.kotlin.transaction/Transaction.endStatus.<get-endStatus>|<get-endStatus>(){}[0]
    final val hashUpdate // org.ton.kotlin.transaction/Transaction.hashUpdate|{}hashUpdate[0]
        final fun <get-hashUpdate>(): org.ton.tlb/CellRef<org.ton.block/HashUpdate> // org.ton.kotlin.transaction/Transaction.hashUpdate.<get-hashUpdate>|<get-hashUpdate>(){}[0]
    final val inMsg // org.ton.kotlin.transaction/Transaction.inMsg|{}inMsg[0]
        final fun <get-inMsg>(): org.ton.tlb/CellRef<org.ton.block/Message<org.ton.cell/CellSlice>>? // org.ton.kotlin.transaction/Transaction.inMsg.<get-inMsg>|<get-inMsg>(){}[0]
    final val info // org.ton.kotlin.transaction/Transaction.info|{}info[0]
        final fun <get-info>(): org.ton.tlb/CellRef<org.ton.kotlin.transaction/TransactionInfo> // org.ton.kotlin.transaction/Transaction.info.<get-info>|<get-info>(){}[0]
    final val lt // org.ton.kotlin.transaction/Transaction.lt|{}lt[0]
        final fun <get-lt>(): kotlin/Long // org.ton.kotlin.transaction/Transaction.lt.<get-lt>|<get-lt>(){}[0]
    final val now // org.ton.kotlin.transaction/Transaction.now|{}now[0]
        final fun <get-now>(): kotlin/Long // org.ton.kotlin.transaction/Transaction.now.<get-now>|<get-now>(){}[0]
    final val originalStatus // org.ton.kotlin.transaction/Transaction.originalStatus|{}originalStatus[0]
        final fun <get-originalStatus>(): org.ton.block/AccountStatus // org.ton.kotlin.transaction/Transaction.originalStatus.<get-originalStatus>|<get-originalStatus>(){}[0]
    final val outMsgCount // org.ton.kotlin.transaction/Transaction.outMsgCount|{}outMsgCount[0]
        final fun <get-outMsgCount>(): kotlin/Int // org.ton.kotlin.transaction/Transaction.outMsgCount.<get-outMsgCount>|<get-outMsgCount>(){}[0]
    final val outMsgs // org.ton.kotlin.transaction/Transaction.outMsgs|{}outMsgs[0]
        final fun <get-outMsgs>(): org.ton.kotlin.dict/Dictionary<kotlin/Int, org.ton.tlb/CellRef<org.ton.block/Message<org.ton.cell/CellSlice>>> // org.ton.kotlin.transaction/Transaction.outMsgs.<get-outMsgs>|<get-outMsgs>(){}[0]
    final val prevTransactionHash // org.ton.kotlin.transaction/Transaction.prevTransactionHash|{}prevTransactionHash[0]
        final fun <get-prevTransactionHash>(): kotlinx.io.bytestring/ByteString // org.ton.kotlin.transaction/Transaction.prevTransactionHash.<get-prevTransactionHash>|<get-prevTransactionHash>(){}[0]
    final val prevTransactionLt // org.ton.kotlin.transaction/Transaction.prevTransactionLt|{}prevTransactionLt[0]
        final fun <get-prevTransactionLt>(): kotlin/Long // org.ton.kotlin.transaction/Transaction.prevTransactionLt.<get-prevTransactionLt>|<get-prevTransactionLt>(){}[0]
    final val totalFees // org.ton.kotlin.transaction/Transaction.totalFees|{}totalFees[0]
        final fun <get-totalFees>(): org.ton.block/CurrencyCollection // org.ton.kotlin.transaction/Transaction.totalFees.<get-totalFees>|<get-totalFees>(){}[0]

    final fun component1(): kotlinx.io.bytestring/ByteString // org.ton.kotlin.transaction/Transaction.component1|component1(){}[0]
    final fun component10(): org.ton.kotlin.dict/Dictionary<kotlin/Int, org.ton.tlb/CellRef<org.ton.block/Message<org.ton.cell/CellSlice>>> // org.ton.kotlin.transaction/Transaction.component10|component10(){}[0]
    final fun component11(): org.ton.block/CurrencyCollection // org.ton.kotlin.transaction/Transaction.component11|component11(){}[0]
    final fun component12(): org.ton.tlb/CellRef<org.ton.block/HashUpdate> // org.ton.kotlin.transaction/Transaction.component12|component12(){}[0]
    final fun component13(): org.ton.tlb/CellRef<org.ton.kotlin.transaction/TransactionInfo> // org.ton.kotlin.transaction/Transaction.component13|component13(){}[0]
    final fun component2(): kotlin/Long // org.ton.kotlin.transaction/Transaction.component2|component2(){}[0]
    final fun component3(): kotlinx.io.bytestring/ByteString // org.ton.kotlin.transaction/Transaction.component3|component3(){}[0]
    final fun component4(): kotlin/Long // org.ton.kotlin.transaction/Transaction.component4|component4(){}[0]
    final fun component5(): kotlin/Long // org.ton.kotlin.transaction/Transaction.component5|component5(){}[0]
    final fun component6(): kotlin/Int // org.ton.kotlin.transaction/Transaction.component6|component6(){}[0]
    final fun component7(): org.ton.block/AccountStatus // org.ton.kotlin.transaction/Transaction.component7|component7(){}[0]
    final fun component8(): org.ton.block/AccountStatus // org.ton.kotlin.transaction/Transaction.component8|component8(){}[0]
    final fun component9(): org.ton.tlb/CellRef<org.ton.block/Message<org.ton.cell/CellSlice>>? // org.ton.kotlin.transaction/Transaction.component9|component9(){}[0]
    final fun copy(kotlinx.io.bytestring/ByteString = ..., kotlin/Long = ..., kotlinx.io.bytestring/ByteString = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Int = ..., org.ton.block/AccountStatus = ..., org.ton.block/AccountStatus = ..., org.ton.tlb/CellRef<org.ton.block/Message<org.ton.cell/CellSlice>>? = ..., org.ton.kotlin.dict/Dictionary<kotlin/Int, org.ton.tlb/CellRef<org.ton.block/Message<org.ton.cell/CellSlice>>> = ..., org.ton.block/CurrencyCollection = ..., org.ton.tlb/CellRef<org.ton.block/HashUpdate> = ..., org.ton.tlb/CellRef<org.ton.kotlin.transaction/TransactionInfo> = ...): org.ton.kotlin.transaction/Transaction // org.ton.kotlin.transaction/Transaction.copy|copy(kotlinx.io.bytestring.ByteString;kotlin.Long;kotlinx.io.bytestring.ByteString;kotlin.Long;kotlin.Long;kotlin.Int;org.ton.block.AccountStatus;org.ton.block.AccountStatus;org.ton.tlb.CellRef<org.ton.block.Message<org.ton.cell.CellSlice>>?;org.ton.kotlin.dict.Dictionary<kotlin.Int,org.ton.tlb.CellRef<org.ton.block.Message<org.ton.cell.CellSlice>>>;org.ton.block.CurrencyCollection;org.ton.tlb.CellRef<org.ton.block.HashUpdate>;org.ton.tlb.CellRef<org.ton.kotlin.transaction.TransactionInfo>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.kotlin.transaction/Transaction.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.kotlin.transaction/Transaction.hashCode|hashCode(){}[0]
    final fun loadInMessage(org.ton.kotlin.cell/CellContext = ...): org.ton.block/Message<org.ton.cell/CellSlice>? // org.ton.kotlin.transaction/Transaction.loadInMessage|loadInMessage(org.ton.kotlin.cell.CellContext){}[0]
    final fun loadInfo(org.ton.kotlin.cell/CellContext = ...): org.ton.kotlin.transaction/TransactionInfo // org.ton.kotlin.transaction/Transaction.loadInfo|loadInfo(org.ton.kotlin.cell.CellContext){}[0]
    final fun toString(): kotlin/String // org.ton.kotlin.transaction/Transaction.toString|toString(){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.kotlin.transaction/Transaction> { // org.ton.kotlin.transaction/Transaction.Companion|null[0]
        final fun createCell(org.ton.kotlin.transaction/Transaction): org.ton.cell/Cell // org.ton.kotlin.transaction/Transaction.Companion.createCell|createCell(org.ton.kotlin.transaction.Transaction){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.kotlin.transaction/Transaction // org.ton.kotlin.transaction/Transaction.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.kotlin.transaction/Transaction // org.ton.kotlin.transaction/Transaction.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.kotlin.transaction/Transaction // org.ton.kotlin.transaction/Transaction.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.kotlin.transaction/Transaction) // org.ton.kotlin.transaction/Transaction.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.kotlin.transaction.Transaction){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.kotlin.transaction/Transaction, org.ton.kotlin.cell/CellContext) // org.ton.kotlin.transaction/Transaction.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.kotlin.transaction.Transaction;org.ton.kotlin.cell.CellContext){}[0]
    }
}

final value class org.ton.block/OldMcBlocksInfo : org.ton.tlb/TlbObject { // org.ton.block/OldMcBlocksInfo|null[0]
    constructor <init>(org.ton.hashmap/HashmapAugE<org.ton.block/KeyExtBlkRef, org.ton.block/KeyMaxLt>) // org.ton.block/OldMcBlocksInfo.<init>|<init>(org.ton.hashmap.HashmapAugE<org.ton.block.KeyExtBlkRef,org.ton.block.KeyMaxLt>){}[0]

    final val value // org.ton.block/OldMcBlocksInfo.value|{}value[0]
        final fun <get-value>(): org.ton.hashmap/HashmapAugE<org.ton.block/KeyExtBlkRef, org.ton.block/KeyMaxLt> // org.ton.block/OldMcBlocksInfo.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/OldMcBlocksInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/OldMcBlocksInfo.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/OldMcBlocksInfo.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/OldMcBlocksInfo.toString|toString(){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.block/OldMcBlocksInfo> { // org.ton.block/OldMcBlocksInfo.Companion|null[0]
        final fun createCell(org.ton.block/OldMcBlocksInfo): org.ton.cell/Cell // org.ton.block/OldMcBlocksInfo.Companion.createCell|createCell(org.ton.block.OldMcBlocksInfo){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/OldMcBlocksInfo // org.ton.block/OldMcBlocksInfo.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/OldMcBlocksInfo // org.ton.block/OldMcBlocksInfo.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/OldMcBlocksInfo // org.ton.block/OldMcBlocksInfo.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/OldMcBlocksInfo) // org.ton.block/OldMcBlocksInfo.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.OldMcBlocksInfo){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/OldMcBlocksInfo, org.ton.kotlin.cell/CellContext) // org.ton.block/OldMcBlocksInfo.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.OldMcBlocksInfo;org.ton.kotlin.cell.CellContext){}[0]
    }
}

final value class org.ton.block/ShardAccounts : org.ton.tlb/TlbObject { // org.ton.block/ShardAccounts|null[0]
    constructor <init>(org.ton.hashmap/HashmapAugE<org.ton.kotlin.account/ShardAccount, org.ton.block/DepthBalanceInfo>) // org.ton.block/ShardAccounts.<init>|<init>(org.ton.hashmap.HashmapAugE<org.ton.kotlin.account.ShardAccount,org.ton.block.DepthBalanceInfo>){}[0]

    final val x // org.ton.block/ShardAccounts.x|{}x[0]
        final fun <get-x>(): org.ton.hashmap/HashmapAugE<org.ton.kotlin.account/ShardAccount, org.ton.block/DepthBalanceInfo> // org.ton.block/ShardAccounts.x.<get-x>|<get-x>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/ShardAccounts.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/ShardAccounts.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/ShardAccounts.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/ShardAccounts.toString|toString(){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.block/ShardAccounts> { // org.ton.block/ShardAccounts.Companion|null[0]
        final fun createCell(org.ton.block/ShardAccounts): org.ton.cell/Cell // org.ton.block/ShardAccounts.Companion.createCell|createCell(org.ton.block.ShardAccounts){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/ShardAccounts // org.ton.block/ShardAccounts.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/ShardAccounts // org.ton.block/ShardAccounts.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/ShardAccounts // org.ton.block/ShardAccounts.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ShardAccounts) // org.ton.block/ShardAccounts.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ShardAccounts){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ShardAccounts, org.ton.kotlin.cell/CellContext) // org.ton.block/ShardAccounts.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ShardAccounts;org.ton.kotlin.cell.CellContext){}[0]
    }
}

final value class org.ton.block/ShardHashes : org.ton.tlb/TlbObject { // org.ton.block/ShardHashes|null[0]
    constructor <init>(org.ton.hashmap/HashMapE<org.ton.tlb/CellRef<org.ton.block/BinTree<org.ton.block/ShardDescr>>>) // org.ton.block/ShardHashes.<init>|<init>(org.ton.hashmap.HashMapE<org.ton.tlb.CellRef<org.ton.block.BinTree<org.ton.block.ShardDescr>>>){}[0]

    final val value // org.ton.block/ShardHashes.value|{}value[0]
        final fun <get-value>(): org.ton.hashmap/HashMapE<org.ton.tlb/CellRef<org.ton.block/BinTree<org.ton.block/ShardDescr>>> // org.ton.block/ShardHashes.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.block/ShardHashes.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.block/ShardHashes.hashCode|hashCode(){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/ShardHashes.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun toString(): kotlin/String // org.ton.block/ShardHashes.toString|toString(){}[0]

    final object Companion : org.ton.tlb/TlbCodec<org.ton.block/ShardHashes> { // org.ton.block/ShardHashes.Companion|null[0]
        final fun createCell(org.ton.block/ShardHashes): org.ton.cell/Cell // org.ton.block/ShardHashes.Companion.createCell|createCell(org.ton.block.ShardHashes){}[0]
        final fun loadTlb(org.ton.cell/Cell): org.ton.block/ShardHashes // org.ton.block/ShardHashes.Companion.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
        final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/ShardHashes // org.ton.block/ShardHashes.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
        final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/ShardHashes // org.ton.block/ShardHashes.Companion.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ShardHashes) // org.ton.block/ShardHashes.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ShardHashes){}[0]
        final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ShardHashes, org.ton.kotlin.cell/CellContext) // org.ton.block/ShardHashes.Companion.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ShardHashes;org.ton.kotlin.cell.CellContext){}[0]
    }
}

final object org.ton.block/AccountUninit : org.ton.block/AccountState, org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/AccountUninit> { // org.ton.block/AccountUninit|null[0]
    final val status // org.ton.block/AccountUninit.status|{}status[0]
        final fun <get-status>(): org.ton.block/AccountStatus // org.ton.block/AccountUninit.status.<get-status>|<get-status>(){}[0]

    final fun createCell(org.ton.block/AccountUninit): org.ton.cell/Cell // org.ton.block/AccountUninit.createCell|createCell(org.ton.block.AccountUninit){}[0]
    final fun loadTlb(org.ton.cell/Cell): org.ton.block/AccountUninit // org.ton.block/AccountUninit.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
    final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/AccountUninit // org.ton.block/AccountUninit.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
    final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/AccountUninit // org.ton.block/AccountUninit.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/AccountUninit.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/AccountUninit) // org.ton.block/AccountUninit.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.AccountUninit){}[0]
    final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/AccountUninit, org.ton.kotlin.cell/CellContext) // org.ton.block/AccountUninit.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.AccountUninit;org.ton.kotlin.cell.CellContext){}[0]
    final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/AccountUninit> // org.ton.block/AccountUninit.tlbConstructor|tlbConstructor(){}[0]
    final fun toString(): kotlin/String // org.ton.block/AccountUninit.toString|toString(){}[0]
}

final object org.ton.block/AddrNone : org.ton.block/MsgAddressExt, org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/AddrNone> { // org.ton.block/AddrNone|null[0]
    final val cellSize // org.ton.block/AddrNone.cellSize|{}cellSize[0]
        final fun <get-cellSize>(): org.ton.kotlin.cell/CellSize // org.ton.block/AddrNone.cellSize.<get-cellSize>|<get-cellSize>(){}[0]

    final fun createCell(org.ton.block/AddrNone): org.ton.cell/Cell // org.ton.block/AddrNone.createCell|createCell(org.ton.block.AddrNone){}[0]
    final fun loadTlb(org.ton.cell/Cell): org.ton.block/AddrNone // org.ton.block/AddrNone.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
    final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/AddrNone // org.ton.block/AddrNone.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
    final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/AddrNone // org.ton.block/AddrNone.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
    final fun print(org.ton.tlb/TlbPrettyPrinter): org.ton.tlb/TlbPrettyPrinter // org.ton.block/AddrNone.print|print(org.ton.tlb.TlbPrettyPrinter){}[0]
    final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/AddrNone) // org.ton.block/AddrNone.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.AddrNone){}[0]
    final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/AddrNone, org.ton.kotlin.cell/CellContext) // org.ton.block/AddrNone.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.AddrNone;org.ton.kotlin.cell.CellContext){}[0]
    final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/AddrNone> // org.ton.block/AddrNone.tlbConstructor|tlbConstructor(){}[0]
    final fun toString(): kotlin/String // org.ton.block/AddrNone.toString|toString(){}[0]
}

final object org.ton.block/ChunkRefEmpty : org.ton.block/TextChunkRef, org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/ChunkRefEmpty> { // org.ton.block/ChunkRefEmpty|null[0]
    final fun createCell(org.ton.block/ChunkRefEmpty): org.ton.cell/Cell // org.ton.block/ChunkRefEmpty.createCell|createCell(org.ton.block.ChunkRefEmpty){}[0]
    final fun loadTlb(org.ton.cell/Cell): org.ton.block/ChunkRefEmpty // org.ton.block/ChunkRefEmpty.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
    final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/ChunkRefEmpty // org.ton.block/ChunkRefEmpty.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
    final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/ChunkRefEmpty // org.ton.block/ChunkRefEmpty.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
    final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ChunkRefEmpty) // org.ton.block/ChunkRefEmpty.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ChunkRefEmpty){}[0]
    final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ChunkRefEmpty, org.ton.kotlin.cell/CellContext) // org.ton.block/ChunkRefEmpty.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ChunkRefEmpty;org.ton.kotlin.cell.CellContext){}[0]
    final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/ChunkRefEmpty> // org.ton.block/ChunkRefEmpty.tlbConstructor|tlbConstructor(){}[0]
}

final object org.ton.block/OutListEmpty : org.ton.block/OutList // org.ton.block/OutListEmpty|null[0]

final object org.ton.block/ProtoHttp : org.ton.block/Protocol, org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/ProtoHttp> { // org.ton.block/ProtoHttp|null[0]
    final fun createCell(org.ton.block/ProtoHttp): org.ton.cell/Cell // org.ton.block/ProtoHttp.createCell|createCell(org.ton.block.ProtoHttp){}[0]
    final fun loadTlb(org.ton.cell/Cell): org.ton.block/ProtoHttp // org.ton.block/ProtoHttp.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
    final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/ProtoHttp // org.ton.block/ProtoHttp.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
    final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/ProtoHttp // org.ton.block/ProtoHttp.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
    final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ProtoHttp) // org.ton.block/ProtoHttp.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ProtoHttp){}[0]
    final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ProtoHttp, org.ton.kotlin.cell/CellContext) // org.ton.block/ProtoHttp.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ProtoHttp;org.ton.kotlin.cell.CellContext){}[0]
    final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/ProtoHttp> // org.ton.block/ProtoHttp.tlbConstructor|tlbConstructor(){}[0]
}

final object org.ton.block/ProtoListNil : org.ton.block/ProtoList, org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/ProtoListNil> { // org.ton.block/ProtoListNil|null[0]
    final fun createCell(org.ton.block/ProtoListNil): org.ton.cell/Cell // org.ton.block/ProtoListNil.createCell|createCell(org.ton.block.ProtoListNil){}[0]
    final fun iterator(): kotlin.collections/Iterator<org.ton.block/Protocol> // org.ton.block/ProtoListNil.iterator|iterator(){}[0]
    final fun loadTlb(org.ton.cell/Cell): org.ton.block/ProtoListNil // org.ton.block/ProtoListNil.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
    final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/ProtoListNil // org.ton.block/ProtoListNil.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
    final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/ProtoListNil // org.ton.block/ProtoListNil.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
    final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ProtoListNil) // org.ton.block/ProtoListNil.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ProtoListNil){}[0]
    final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/ProtoListNil, org.ton.kotlin.cell/CellContext) // org.ton.block/ProtoListNil.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.ProtoListNil;org.ton.kotlin.cell.CellContext){}[0]
    final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/ProtoListNil> // org.ton.block/ProtoListNil.tlbConstructor|tlbConstructor(){}[0]
}

final object org.ton.block/TextChunkEmpty : org.ton.block/TextChunks, org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/TextChunkEmpty> { // org.ton.block/TextChunkEmpty|null[0]
    final fun createCell(org.ton.block/TextChunkEmpty): org.ton.cell/Cell // org.ton.block/TextChunkEmpty.createCell|createCell(org.ton.block.TextChunkEmpty){}[0]
    final fun loadTlb(org.ton.cell/Cell): org.ton.block/TextChunkEmpty // org.ton.block/TextChunkEmpty.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
    final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/TextChunkEmpty // org.ton.block/TextChunkEmpty.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
    final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/TextChunkEmpty // org.ton.block/TextChunkEmpty.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
    final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/TextChunkEmpty) // org.ton.block/TextChunkEmpty.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.TextChunkEmpty){}[0]
    final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/TextChunkEmpty, org.ton.kotlin.cell/CellContext) // org.ton.block/TextChunkEmpty.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.TextChunkEmpty;org.ton.kotlin.cell.CellContext){}[0]
    final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/TextChunkEmpty> // org.ton.block/TextChunkEmpty.tlbConstructor|tlbConstructor(){}[0]
}

final object org.ton.block/VmContQuitExc : org.ton.block/VmCont { // org.ton.block/VmContQuitExc|null[0]
    final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/VmContQuitExc> // org.ton.block/VmContQuitExc.tlbConstructor|tlbConstructor(){}[0]
}

final object org.ton.block/VmStackNan : org.ton.block/VmStackNumber, org.ton.block/VmStackValue, org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/VmStackNan> { // org.ton.block/VmStackNan|null[0]
    final fun createCell(org.ton.block/VmStackNan): org.ton.cell/Cell // org.ton.block/VmStackNan.createCell|createCell(org.ton.block.VmStackNan){}[0]
    final fun div(org.ton.block/VmStackNumber): org.ton.block/VmStackNumber // org.ton.block/VmStackNan.div|div(org.ton.block.VmStackNumber){}[0]
    final fun loadTlb(org.ton.cell/Cell): org.ton.block/VmStackNan // org.ton.block/VmStackNan.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
    final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/VmStackNan // org.ton.block/VmStackNan.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
    final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/VmStackNan // org.ton.block/VmStackNan.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
    final fun minus(org.ton.block/VmStackNumber): org.ton.block/VmStackNumber // org.ton.block/VmStackNan.minus|minus(org.ton.block.VmStackNumber){}[0]
    final fun plus(org.ton.block/VmStackNumber): org.ton.block/VmStackNumber // org.ton.block/VmStackNan.plus|plus(org.ton.block.VmStackNumber){}[0]
    final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmStackNan) // org.ton.block/VmStackNan.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmStackNan){}[0]
    final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmStackNan, org.ton.kotlin.cell/CellContext) // org.ton.block/VmStackNan.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmStackNan;org.ton.kotlin.cell.CellContext){}[0]
    final fun times(org.ton.block/VmStackNumber): org.ton.block/VmStackNumber // org.ton.block/VmStackNan.times|times(org.ton.block.VmStackNumber){}[0]
    final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/VmStackNan> // org.ton.block/VmStackNan.tlbConstructor|tlbConstructor(){}[0]
    final fun toBigInt(): org.ton.bigint/BigInt // org.ton.block/VmStackNan.toBigInt|toBigInt(){}[0]
    final fun toBoolean(): kotlin/Boolean // org.ton.block/VmStackNan.toBoolean|toBoolean(){}[0]
    final fun toInt(): kotlin/Int // org.ton.block/VmStackNan.toInt|toInt(){}[0]
    final fun toLong(): kotlin/Long // org.ton.block/VmStackNan.toLong|toLong(){}[0]
    final fun toString(): kotlin/String // org.ton.block/VmStackNan.toString|toString(){}[0]

    final class VmStackNanException : kotlin/RuntimeException { // org.ton.block/VmStackNan.VmStackNanException|null[0]
        constructor <init>() // org.ton.block/VmStackNan.VmStackNanException.<init>|<init>(){}[0]
    }
}

final object org.ton.block/VmStackNull : org.ton.block/VmStackValue, org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/VmStackNull> { // org.ton.block/VmStackNull|null[0]
    final fun createCell(org.ton.block/VmStackNull): org.ton.cell/Cell // org.ton.block/VmStackNull.createCell|createCell(org.ton.block.VmStackNull){}[0]
    final fun loadTlb(org.ton.cell/Cell): org.ton.block/VmStackNull // org.ton.block/VmStackNull.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
    final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/VmStackNull // org.ton.block/VmStackNull.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
    final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/VmStackNull // org.ton.block/VmStackNull.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
    final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmStackNull) // org.ton.block/VmStackNull.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmStackNull){}[0]
    final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmStackNull, org.ton.kotlin.cell/CellContext) // org.ton.block/VmStackNull.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmStackNull;org.ton.kotlin.cell.CellContext){}[0]
    final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/VmStackNull> // org.ton.block/VmStackNull.tlbConstructor|tlbConstructor(){}[0]
    final fun toString(): kotlin/String // org.ton.block/VmStackNull.toString|toString(){}[0]
}

final object org.ton.block/VmTupleNil : org.ton.block/VmTuple, org.ton.tlb.providers/TlbConstructorProvider<org.ton.block/VmTupleNil> { // org.ton.block/VmTupleNil|null[0]
    final fun createCell(org.ton.block/VmTupleNil): org.ton.cell/Cell // org.ton.block/VmTupleNil.createCell|createCell(org.ton.block.VmTupleNil){}[0]
    final fun depth(): kotlin/Int // org.ton.block/VmTupleNil.depth|depth(){}[0]
    final fun loadTlb(org.ton.cell/Cell): org.ton.block/VmTupleNil // org.ton.block/VmTupleNil.loadTlb|loadTlb(org.ton.cell.Cell){}[0]
    final fun loadTlb(org.ton.cell/CellSlice): org.ton.block/VmTupleNil // org.ton.block/VmTupleNil.loadTlb|loadTlb(org.ton.cell.CellSlice){}[0]
    final fun loadTlb(org.ton.cell/CellSlice, org.ton.kotlin.cell/CellContext): org.ton.block/VmTupleNil // org.ton.block/VmTupleNil.loadTlb|loadTlb(org.ton.cell.CellSlice;org.ton.kotlin.cell.CellContext){}[0]
    final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmTupleNil) // org.ton.block/VmTupleNil.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmTupleNil){}[0]
    final fun storeTlb(org.ton.cell/CellBuilder, org.ton.block/VmTupleNil, org.ton.kotlin.cell/CellContext) // org.ton.block/VmTupleNil.storeTlb|storeTlb(org.ton.cell.CellBuilder;org.ton.block.VmTupleNil;org.ton.kotlin.cell.CellContext){}[0]
    final fun tlbConstructor(): org.ton.tlb/TlbConstructor<org.ton.block/VmTupleNil> // org.ton.block/VmTupleNil.tlbConstructor|tlbConstructor(){}[0]
    final fun toString(): kotlin/String // org.ton.block/VmTupleNil.toString|toString(){}[0]
}

final object org.ton.block/VmTupleRefNil : org.ton.block/VmTupleRef { // org.ton.block/VmTupleRefNil|null[0]
    final fun depth(): kotlin/Int // org.ton.block/VmTupleRefNil.depth|depth(){}[0]
    final fun toString(): kotlin/String // org.ton.block/VmTupleRefNil.toString|toString(){}[0]
}

final val org.ton.block/value // org.ton.block/value|@org.ton.block.CommonMsgInfo?{}value[0]
    final fun (org.ton.block/CommonMsgInfo?).<get-value>(): org.ton.block/CurrencyCollection // org.ton.block/value.<get-value>|<get-value>@org.ton.block.CommonMsgInfo?(){}[0]
final val org.ton.kotlin.account/accountLastTransLt // org.ton.kotlin.account/accountLastTransLt|@org.ton.kotlin.account.Account?{}accountLastTransLt[0]
    final fun (org.ton.kotlin.account/Account?).<get-accountLastTransLt>(): kotlin/Long // org.ton.kotlin.account/accountLastTransLt.<get-accountLastTransLt>|<get-accountLastTransLt>@org.ton.kotlin.account.Account?(){}[0]
final val org.ton.kotlin.account/balance // org.ton.kotlin.account/balance|@org.ton.kotlin.account.Account?{}balance[0]
    final fun (org.ton.kotlin.account/Account?).<get-balance>(): org.ton.block/CurrencyCollection // org.ton.kotlin.account/balance.<get-balance>|<get-balance>@org.ton.kotlin.account.Account?(){}[0]
final val org.ton.kotlin.account/status // org.ton.kotlin.account/status|@org.ton.kotlin.account.Account?{}status[0]
    final fun (org.ton.kotlin.account/Account?).<get-status>(): org.ton.block/AccountStatus // org.ton.kotlin.account/status.<get-status>|<get-status>@org.ton.kotlin.account.Account?(){}[0]

final fun <#A: kotlin/Any> (org.ton.block/Message.Companion).org.ton.block/invoke(org.ton.tlb/TlbCodec<#A>): org.ton.tlb/TlbConstructor<org.ton.block/Message<#A>> // org.ton.block/invoke|invoke@org.ton.block.Message.Companion(org.ton.tlb.TlbCodec<0:0>){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (org.ton.block/Either.Companion).org.ton.block/invoke(org.ton.tlb/TlbCodec<#A>, org.ton.tlb/TlbCodec<#B>): org.ton.tlb/TlbCodec<org.ton.block/Either<#A, #B>> // org.ton.block/invoke|invoke@org.ton.block.Either.Companion(org.ton.tlb.TlbCodec<0:0>;org.ton.tlb.TlbCodec<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun (kotlin.collections/Iterable<org.ton.block/SmcCapability>).org.ton.block/toSmcCapList(): org.ton.block/SmcCapList // org.ton.block/toSmcCapList|toSmcCapList@kotlin.collections.Iterable<org.ton.block.SmcCapability>(){}[0]
final inline fun (kotlin/Array<org.ton.block/SmcCapability>).org.ton.block/toSmcCapList(): org.ton.block/SmcCapList // org.ton.block/toSmcCapList|toSmcCapList@kotlin.Array<org.ton.block.SmcCapability>(){}[0]
final inline fun (kotlin/Pair<kotlin/Boolean, kotlin/Boolean>).org.ton.block/toTickTock(): org.ton.block/TickTock // org.ton.block/toTickTock|toTickTock@kotlin.Pair<kotlin.Boolean,kotlin.Boolean>(){}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Pair<#A?, #B?>).org.ton.block/toEither(): org.ton.block/Either<#A, #B> // org.ton.block/toEither|toEither@kotlin.Pair<0:0?,0:1?>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (#A?).org.ton.block/toMaybe(): org.ton.block/Maybe<#A> // org.ton.block/toMaybe|toMaybe@0:0?(){0§<kotlin.Any?>}[0]
final inline fun org.ton.block/AddrStd(kotlin/String): org.ton.block/AddrStd // org.ton.block/AddrStd|AddrStd(kotlin.String){}[0]
final inline fun org.ton.block/MsgAddressExt(kotlin/ByteArray): org.ton.block/MsgAddressExt // org.ton.block/MsgAddressExt|MsgAddressExt(kotlin.ByteArray){}[0]
final inline fun org.ton.block/MsgAddressExt(org.ton.bitstring/BitString? = ...): org.ton.block/MsgAddressExt // org.ton.block/MsgAddressExt|MsgAddressExt(org.ton.bitstring.BitString?){}[0]
final inline fun org.ton.block/MsgAddressInt(kotlin/String): org.ton.block/MsgAddressInt // org.ton.block/MsgAddressInt|MsgAddressInt(kotlin.String){}[0]
final inline fun org.ton.block/MutableVmStack(): org.ton.block/MutableVmStack // org.ton.block/MutableVmStack|MutableVmStack(){}[0]
final inline fun org.ton.block/SmcCapList(kotlin.collections/Iterable<org.ton.block/SmcCapability>): org.ton.block/SmcCapList // org.ton.block/SmcCapList|SmcCapList(kotlin.collections.Iterable<org.ton.block.SmcCapability>){}[0]
final inline fun org.ton.block/SmcCapList(kotlin/Array<out org.ton.block/SmcCapability>...): org.ton.block/SmcCapList // org.ton.block/SmcCapList|SmcCapList(kotlin.Array<out|org.ton.block.SmcCapability>...){}[0]
final inline fun org.ton.block/VmStack(kotlin/Int, org.ton.block/VmStackList): org.ton.block/VmStack // org.ton.block/VmStack|VmStack(kotlin.Int;org.ton.block.VmStackList){}[0]
final inline fun org.ton.block/VmStack(org.ton.block/VmStackList): org.ton.block/VmStack // org.ton.block/VmStack|VmStack(org.ton.block.VmStackList){}[0]
final inline fun org.ton.block/VmStackList(kotlin.collections/Iterable<org.ton.block/VmStackValue>): org.ton.block/VmStackList // org.ton.block/VmStackList|VmStackList(kotlin.collections.Iterable<org.ton.block.VmStackValue>){}[0]
final inline fun org.ton.block/VmStackList(kotlin/Array<out org.ton.block/VmStackValue>...): org.ton.block/VmStackList // org.ton.block/VmStackList|VmStackList(kotlin.Array<out|org.ton.block.VmStackValue>...){}[0]
final inline fun org.ton.block/VmStackValue(): org.ton.block/VmStackValue // org.ton.block/VmStackValue|VmStackValue(){}[0]
final inline fun org.ton.block/VmStackValue(kotlin/Boolean): org.ton.block/VmStackTinyInt // org.ton.block/VmStackValue|VmStackValue(kotlin.Boolean){}[0]
final inline fun org.ton.block/VmStackValue(kotlin/Int): org.ton.block/VmStackTinyInt // org.ton.block/VmStackValue|VmStackValue(kotlin.Int){}[0]
final inline fun org.ton.block/VmStackValue(kotlin/Long): org.ton.block/VmStackTinyInt // org.ton.block/VmStackValue|VmStackValue(kotlin.Long){}[0]
final inline fun org.ton.block/VmStackValue(org.ton.bigint/BigInt): org.ton.block/VmStackInt // org.ton.block/VmStackValue|VmStackValue(org.ton.bigint.BigInt){}[0]
final inline fun org.ton.block/VmStackValue(org.ton.block/VmCont): org.ton.block/VmStackCont // org.ton.block/VmStackValue|VmStackValue(org.ton.block.VmCont){}[0]
final inline fun org.ton.block/VmStackValue(org.ton.block/VmTuple): org.ton.block/VmStackTuple // org.ton.block/VmStackValue|VmStackValue(org.ton.block.VmTuple){}[0]
final inline fun org.ton.block/VmStackValue(org.ton.cell/Cell): org.ton.block/VmStackCell // org.ton.block/VmStackValue|VmStackValue(org.ton.cell.Cell){}[0]
final inline fun org.ton.block/VmStackValue(org.ton.cell/CellBuilder): org.ton.block/VmStackBuilder // org.ton.block/VmStackValue|VmStackValue(org.ton.cell.CellBuilder){}[0]
final inline fun org.ton.block/VmStackValue(org.ton.cell/CellSlice): org.ton.block/VmCellSlice // org.ton.block/VmStackValue|VmStackValue(org.ton.cell.CellSlice){}[0]
final inline fun org.ton.block/VmTupleRef(): org.ton.block/VmTupleRef // org.ton.block/VmTupleRef|VmTupleRef(){}[0]
final inline fun org.ton.block/VmTupleRef(org.ton.block/VmStackValue): org.ton.block/VmTupleRef // org.ton.block/VmTupleRef|VmTupleRef(org.ton.block.VmStackValue){}[0]
final inline fun org.ton.block/VmTupleRef(org.ton.block/VmTuple): org.ton.block/VmTupleRef // org.ton.block/VmTupleRef|VmTupleRef(org.ton.block.VmTuple){}[0]
