name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  GRADLE_USER_HOME: ${{ github.workspace }}/.gradle
  JAVA_VERSION: '17'

jobs:
  validation-gate:
    name: Require Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Ensure validation workflow succeeded
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo
            const workflowId = 'validation.yml'

            let targetSha = context.sha
            if (context.ref && context.ref.startsWith('refs/tags/')) {
              const ref = context.ref.replace('refs/', '')
              const { data } = await github.rest.git.getRef({ owner, repo, ref })
              targetSha = data.object.sha
            }

            const runs = await github.paginate(
              github.rest.actions.listWorkflowRunsForWorkflow,
              { owner, repo, workflow_id: workflowId, per_page: 100 }
            )

            const match = runs.find(run => run.head_sha === targetSha && run.conclusion === 'success')
            if (!match) {
              const hint = runs.find(run => run.conclusion === 'success')
              const suggestion = hint ? `Latest successful validation is ${hint.head_sha} (${hint.html_url}).` : 'No successful runs recorded yet.'
              core.setFailed(`No successful "${workflowId}" run found for commit ${targetSha}. ${suggestion}`)
            } else {
              core.info(`Validation succeeded in ${match.html_url}`)
            }

  publish:
    name: Publish
    needs:
      - validation-gate
    runs-on: ubuntu-latest
    timeout-minutes: 60
    environment:
      name: release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
      - name: Install Kotlin/Native toolchain deps
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y build-essential libcurl4-openssl-dev libssl-dev zlib1g-dev
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-home-cache-cleanup: true
      - name: Publish artifacts
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.SIGNING_KEY }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.SIGNING_PASSWORD }}
          ORG_GRADLE_PROJECT_githubPackagesUsername: ${{ github.actor }}
          ORG_GRADLE_PROJECT_githubPackagesPassword: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./gradlew --stacktrace \
            publishAllPublicationsToGitHubPackagesRepository \
            publishAllPublicationsToMavenCentralRepository \
            closeAndReleaseSonatypeStagingRepository
      - name: Generate changelog
        id: changelog
        uses: orhun/git-cliff-action@v2
        with:
          config: git-cliff.toml
          args: --current --tag ${{ github.ref_name }}
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.changelog }}
          fail_if_release_exists: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
