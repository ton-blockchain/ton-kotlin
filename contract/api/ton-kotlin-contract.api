public final class org/ton/contract/CellStringTlbConstructor : org/ton/tlb/TlbConstructor {
	public static final field INSTANCE Lorg/ton/contract/CellStringTlbConstructor;
	public synthetic fun loadTlb (Lorg/ton/cell/CellSlice;)Ljava/lang/Object;
	public fun loadTlb (Lorg/ton/cell/CellSlice;)Lkotlinx/io/bytestring/ByteString;
	public synthetic fun storeTlb (Lorg/ton/cell/CellBuilder;Ljava/lang/Object;Lorg/ton/kotlin/cell/CellContext;)V
	public fun storeTlb (Lorg/ton/cell/CellBuilder;Lkotlinx/io/bytestring/ByteString;Lorg/ton/kotlin/cell/CellContext;)V
}

public final class org/ton/contract/ChunkedData {
	public static final field Companion Lorg/ton/contract/ChunkedData$Companion;
	public fun <init> (Lorg/ton/hashmap/HashMapE;)V
	public final fun component1 ()Lorg/ton/hashmap/HashMapE;
	public final fun copy (Lorg/ton/hashmap/HashMapE;)Lorg/ton/contract/ChunkedData;
	public static synthetic fun copy$default (Lorg/ton/contract/ChunkedData;Lorg/ton/hashmap/HashMapE;ILjava/lang/Object;)Lorg/ton/contract/ChunkedData;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getData ()Lorg/ton/hashmap/HashMapE;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class org/ton/contract/ChunkedData$Companion : org/ton/tlb/providers/TlbConstructorProvider {
	public synthetic fun createCell (Ljava/lang/Object;)Lorg/ton/cell/Cell;
	public fun createCell (Lorg/ton/contract/ChunkedData;)Lorg/ton/cell/Cell;
	public synthetic fun loadTlb (Lorg/ton/cell/Cell;)Ljava/lang/Object;
	public fun loadTlb (Lorg/ton/cell/Cell;)Lorg/ton/contract/ChunkedData;
	public synthetic fun loadTlb (Lorg/ton/cell/CellSlice;)Ljava/lang/Object;
	public fun loadTlb (Lorg/ton/cell/CellSlice;)Lorg/ton/contract/ChunkedData;
	public synthetic fun loadTlb (Lorg/ton/cell/CellSlice;Lorg/ton/kotlin/cell/CellContext;)Ljava/lang/Object;
	public fun loadTlb (Lorg/ton/cell/CellSlice;Lorg/ton/kotlin/cell/CellContext;)Lorg/ton/contract/ChunkedData;
	public synthetic fun storeTlb (Lorg/ton/cell/CellBuilder;Ljava/lang/Object;)V
	public synthetic fun storeTlb (Lorg/ton/cell/CellBuilder;Ljava/lang/Object;Lorg/ton/kotlin/cell/CellContext;)V
	public fun storeTlb (Lorg/ton/cell/CellBuilder;Lorg/ton/contract/ChunkedData;)V
	public fun storeTlb (Lorg/ton/cell/CellBuilder;Lorg/ton/contract/ChunkedData;Lorg/ton/kotlin/cell/CellContext;)V
	public fun tlbConstructor ()Lorg/ton/tlb/TlbConstructor;
}

public abstract interface class org/ton/contract/ContentData {
	public static final field Companion Lorg/ton/contract/ContentData$Companion;
}

public final class org/ton/contract/ContentData$Chunks : org/ton/contract/ContentData {
	public fun <init> (Lorg/ton/contract/ChunkedData;)V
	public final fun component1 ()Lorg/ton/contract/ChunkedData;
	public final fun copy (Lorg/ton/contract/ChunkedData;)Lorg/ton/contract/ContentData$Chunks;
	public static synthetic fun copy$default (Lorg/ton/contract/ContentData$Chunks;Lorg/ton/contract/ChunkedData;ILjava/lang/Object;)Lorg/ton/contract/ContentData$Chunks;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getData ()Lorg/ton/contract/ChunkedData;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class org/ton/contract/ContentData$Companion : org/ton/tlb/providers/TlbCombinatorProvider {
	public synthetic fun createCell (Ljava/lang/Object;)Lorg/ton/cell/Cell;
	public fun createCell (Lorg/ton/contract/ContentData;)Lorg/ton/cell/Cell;
	public synthetic fun loadTlb (Lorg/ton/cell/Cell;)Ljava/lang/Object;
	public fun loadTlb (Lorg/ton/cell/Cell;)Lorg/ton/contract/ContentData;
	public synthetic fun loadTlb (Lorg/ton/cell/CellSlice;)Ljava/lang/Object;
	public fun loadTlb (Lorg/ton/cell/CellSlice;)Lorg/ton/contract/ContentData;
	public synthetic fun loadTlb (Lorg/ton/cell/CellSlice;Lorg/ton/kotlin/cell/CellContext;)Ljava/lang/Object;
	public fun loadTlb (Lorg/ton/cell/CellSlice;Lorg/ton/kotlin/cell/CellContext;)Lorg/ton/contract/ContentData;
	public synthetic fun storeTlb (Lorg/ton/cell/CellBuilder;Ljava/lang/Object;)V
	public synthetic fun storeTlb (Lorg/ton/cell/CellBuilder;Ljava/lang/Object;Lorg/ton/kotlin/cell/CellContext;)V
	public fun storeTlb (Lorg/ton/cell/CellBuilder;Lorg/ton/contract/ContentData;)V
	public fun storeTlb (Lorg/ton/cell/CellBuilder;Lorg/ton/contract/ContentData;Lorg/ton/kotlin/cell/CellContext;)V
	public fun tlbCombinator ()Lorg/ton/tlb/TlbCombinator;
}

public final class org/ton/contract/ContentData$Snake : org/ton/contract/ContentData {
	public fun <init> (Lorg/ton/contract/SnakeData;)V
	public final fun component1 ()Lorg/ton/contract/SnakeData;
	public final fun copy (Lorg/ton/contract/SnakeData;)Lorg/ton/contract/ContentData$Snake;
	public static synthetic fun copy$default (Lorg/ton/contract/ContentData$Snake;Lorg/ton/contract/SnakeData;ILjava/lang/Object;)Lorg/ton/contract/ContentData$Snake;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getData ()Lorg/ton/contract/SnakeData;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class org/ton/contract/FullContent {
	public static final field Companion Lorg/ton/contract/FullContent$Companion;
}

public final class org/ton/contract/FullContent$Companion : org/ton/tlb/providers/TlbCombinatorProvider {
	public synthetic fun createCell (Ljava/lang/Object;)Lorg/ton/cell/Cell;
	public fun createCell (Lorg/ton/contract/FullContent;)Lorg/ton/cell/Cell;
	public synthetic fun loadTlb (Lorg/ton/cell/Cell;)Ljava/lang/Object;
	public fun loadTlb (Lorg/ton/cell/Cell;)Lorg/ton/contract/FullContent;
	public synthetic fun loadTlb (Lorg/ton/cell/CellSlice;)Ljava/lang/Object;
	public fun loadTlb (Lorg/ton/cell/CellSlice;)Lorg/ton/contract/FullContent;
	public synthetic fun loadTlb (Lorg/ton/cell/CellSlice;Lorg/ton/kotlin/cell/CellContext;)Ljava/lang/Object;
	public fun loadTlb (Lorg/ton/cell/CellSlice;Lorg/ton/kotlin/cell/CellContext;)Lorg/ton/contract/FullContent;
	public synthetic fun storeTlb (Lorg/ton/cell/CellBuilder;Ljava/lang/Object;)V
	public synthetic fun storeTlb (Lorg/ton/cell/CellBuilder;Ljava/lang/Object;Lorg/ton/kotlin/cell/CellContext;)V
	public fun storeTlb (Lorg/ton/cell/CellBuilder;Lorg/ton/contract/FullContent;)V
	public fun storeTlb (Lorg/ton/cell/CellBuilder;Lorg/ton/contract/FullContent;Lorg/ton/kotlin/cell/CellContext;)V
	public fun tlbCombinator ()Lorg/ton/tlb/TlbCombinator;
}

public final class org/ton/contract/FullContent$OffChain : org/ton/contract/FullContent {
	public fun <init> (Lorg/ton/contract/Text;)V
	public final fun component1 ()Lorg/ton/contract/Text;
	public final fun copy (Lorg/ton/contract/Text;)Lorg/ton/contract/FullContent$OffChain;
	public static synthetic fun copy$default (Lorg/ton/contract/FullContent$OffChain;Lorg/ton/contract/Text;ILjava/lang/Object;)Lorg/ton/contract/FullContent$OffChain;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getUri ()Lorg/ton/contract/Text;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class org/ton/contract/FullContent$OnChain : org/ton/contract/FullContent {
	public fun <init> (Lorg/ton/hashmap/HashMapE;)V
	public final fun component1 ()Lorg/ton/hashmap/HashMapE;
	public final fun copy (Lorg/ton/hashmap/HashMapE;)Lorg/ton/contract/FullContent$OnChain;
	public static synthetic fun copy$default (Lorg/ton/contract/FullContent$OnChain;Lorg/ton/hashmap/HashMapE;ILjava/lang/Object;)Lorg/ton/contract/FullContent$OnChain;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getData ()Lorg/ton/hashmap/HashMapE;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class org/ton/contract/SmartContract {
	public abstract fun getAddress ()Lorg/ton/block/AddrStd;
	public abstract fun getLiteClient ()Lorg/ton/lite/client/LiteClient;
}

public abstract interface class org/ton/contract/SnakeData {
	public static final field Companion Lorg/ton/contract/SnakeData$Companion;
}

public final class org/ton/contract/SnakeData$Companion : org/ton/tlb/providers/TlbCombinatorProvider {
	public synthetic fun createCell (Ljava/lang/Object;)Lorg/ton/cell/Cell;
	public fun createCell (Lorg/ton/contract/SnakeData;)Lorg/ton/cell/Cell;
	public synthetic fun loadTlb (Lorg/ton/cell/Cell;)Ljava/lang/Object;
	public fun loadTlb (Lorg/ton/cell/Cell;)Lorg/ton/contract/SnakeData;
	public synthetic fun loadTlb (Lorg/ton/cell/CellSlice;)Ljava/lang/Object;
	public fun loadTlb (Lorg/ton/cell/CellSlice;)Lorg/ton/contract/SnakeData;
	public synthetic fun loadTlb (Lorg/ton/cell/CellSlice;Lorg/ton/kotlin/cell/CellContext;)Ljava/lang/Object;
	public fun loadTlb (Lorg/ton/cell/CellSlice;Lorg/ton/kotlin/cell/CellContext;)Lorg/ton/contract/SnakeData;
	public synthetic fun storeTlb (Lorg/ton/cell/CellBuilder;Ljava/lang/Object;)V
	public synthetic fun storeTlb (Lorg/ton/cell/CellBuilder;Ljava/lang/Object;Lorg/ton/kotlin/cell/CellContext;)V
	public fun storeTlb (Lorg/ton/cell/CellBuilder;Lorg/ton/contract/SnakeData;)V
	public fun storeTlb (Lorg/ton/cell/CellBuilder;Lorg/ton/contract/SnakeData;Lorg/ton/kotlin/cell/CellContext;)V
	public fun tlbCombinator ()Lorg/ton/tlb/TlbCombinator;
}

public final class org/ton/contract/SnakeDataCons : org/ton/contract/SnakeData {
	public static final field Companion Lorg/ton/contract/SnakeDataCons$Companion;
	public fun <init> (Lorg/ton/bitstring/BitString;Lorg/ton/contract/SnakeData;)V
	public final fun component1 ()Lorg/ton/bitstring/BitString;
	public final fun component2 ()Lorg/ton/contract/SnakeData;
	public final fun copy (Lorg/ton/bitstring/BitString;Lorg/ton/contract/SnakeData;)Lorg/ton/contract/SnakeDataCons;
	public static synthetic fun copy$default (Lorg/ton/contract/SnakeDataCons;Lorg/ton/bitstring/BitString;Lorg/ton/contract/SnakeData;ILjava/lang/Object;)Lorg/ton/contract/SnakeDataCons;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getBits ()Lorg/ton/bitstring/BitString;
	public final fun getNext ()Lorg/ton/contract/SnakeData;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class org/ton/contract/SnakeDataCons$Companion : org/ton/tlb/providers/TlbConstructorProvider {
	public synthetic fun createCell (Ljava/lang/Object;)Lorg/ton/cell/Cell;
	public fun createCell (Lorg/ton/contract/SnakeDataCons;)Lorg/ton/cell/Cell;
	public synthetic fun loadTlb (Lorg/ton/cell/Cell;)Ljava/lang/Object;
	public fun loadTlb (Lorg/ton/cell/Cell;)Lorg/ton/contract/SnakeDataCons;
	public synthetic fun loadTlb (Lorg/ton/cell/CellSlice;)Ljava/lang/Object;
	public fun loadTlb (Lorg/ton/cell/CellSlice;)Lorg/ton/contract/SnakeDataCons;
	public synthetic fun loadTlb (Lorg/ton/cell/CellSlice;Lorg/ton/kotlin/cell/CellContext;)Ljava/lang/Object;
	public fun loadTlb (Lorg/ton/cell/CellSlice;Lorg/ton/kotlin/cell/CellContext;)Lorg/ton/contract/SnakeDataCons;
	public synthetic fun storeTlb (Lorg/ton/cell/CellBuilder;Ljava/lang/Object;)V
	public synthetic fun storeTlb (Lorg/ton/cell/CellBuilder;Ljava/lang/Object;Lorg/ton/kotlin/cell/CellContext;)V
	public fun storeTlb (Lorg/ton/cell/CellBuilder;Lorg/ton/contract/SnakeDataCons;)V
	public fun storeTlb (Lorg/ton/cell/CellBuilder;Lorg/ton/contract/SnakeDataCons;Lorg/ton/kotlin/cell/CellContext;)V
	public fun tlbConstructor ()Lorg/ton/tlb/TlbConstructor;
}

public final class org/ton/contract/SnakeDataTail : org/ton/contract/SnakeData {
	public static final field Companion Lorg/ton/contract/SnakeDataTail$Companion;
	public fun <init> (Lorg/ton/bitstring/BitString;)V
	public final fun component1 ()Lorg/ton/bitstring/BitString;
	public final fun copy (Lorg/ton/bitstring/BitString;)Lorg/ton/contract/SnakeDataTail;
	public static synthetic fun copy$default (Lorg/ton/contract/SnakeDataTail;Lorg/ton/bitstring/BitString;ILjava/lang/Object;)Lorg/ton/contract/SnakeDataTail;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getBits ()Lorg/ton/bitstring/BitString;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class org/ton/contract/SnakeDataTail$Companion : org/ton/tlb/providers/TlbConstructorProvider {
	public synthetic fun createCell (Ljava/lang/Object;)Lorg/ton/cell/Cell;
	public fun createCell (Lorg/ton/contract/SnakeDataTail;)Lorg/ton/cell/Cell;
	public synthetic fun loadTlb (Lorg/ton/cell/Cell;)Ljava/lang/Object;
	public fun loadTlb (Lorg/ton/cell/Cell;)Lorg/ton/contract/SnakeDataTail;
	public synthetic fun loadTlb (Lorg/ton/cell/CellSlice;)Ljava/lang/Object;
	public fun loadTlb (Lorg/ton/cell/CellSlice;)Lorg/ton/contract/SnakeDataTail;
	public synthetic fun loadTlb (Lorg/ton/cell/CellSlice;Lorg/ton/kotlin/cell/CellContext;)Ljava/lang/Object;
	public fun loadTlb (Lorg/ton/cell/CellSlice;Lorg/ton/kotlin/cell/CellContext;)Lorg/ton/contract/SnakeDataTail;
	public synthetic fun storeTlb (Lorg/ton/cell/CellBuilder;Ljava/lang/Object;)V
	public synthetic fun storeTlb (Lorg/ton/cell/CellBuilder;Ljava/lang/Object;Lorg/ton/kotlin/cell/CellContext;)V
	public fun storeTlb (Lorg/ton/cell/CellBuilder;Lorg/ton/contract/SnakeDataTail;)V
	public fun storeTlb (Lorg/ton/cell/CellBuilder;Lorg/ton/contract/SnakeDataTail;Lorg/ton/kotlin/cell/CellContext;)V
	public fun tlbConstructor ()Lorg/ton/tlb/TlbConstructor;
}

public final class org/ton/contract/Text {
	public static final field Companion Lorg/ton/contract/Text$Companion;
	public fun <init> (Lorg/ton/contract/SnakeData;)V
	public final fun component1 ()Lorg/ton/contract/SnakeData;
	public final fun copy (Lorg/ton/contract/SnakeData;)Lorg/ton/contract/Text;
	public static synthetic fun copy$default (Lorg/ton/contract/Text;Lorg/ton/contract/SnakeData;ILjava/lang/Object;)Lorg/ton/contract/Text;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getData ()Lorg/ton/contract/SnakeData;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class org/ton/contract/Text$Companion : org/ton/tlb/providers/TlbConstructorProvider {
	public synthetic fun createCell (Ljava/lang/Object;)Lorg/ton/cell/Cell;
	public fun createCell (Lorg/ton/contract/Text;)Lorg/ton/cell/Cell;
	public synthetic fun loadTlb (Lorg/ton/cell/Cell;)Ljava/lang/Object;
	public fun loadTlb (Lorg/ton/cell/Cell;)Lorg/ton/contract/Text;
	public synthetic fun loadTlb (Lorg/ton/cell/CellSlice;)Ljava/lang/Object;
	public fun loadTlb (Lorg/ton/cell/CellSlice;)Lorg/ton/contract/Text;
	public synthetic fun loadTlb (Lorg/ton/cell/CellSlice;Lorg/ton/kotlin/cell/CellContext;)Ljava/lang/Object;
	public fun loadTlb (Lorg/ton/cell/CellSlice;Lorg/ton/kotlin/cell/CellContext;)Lorg/ton/contract/Text;
	public synthetic fun storeTlb (Lorg/ton/cell/CellBuilder;Ljava/lang/Object;)V
	public synthetic fun storeTlb (Lorg/ton/cell/CellBuilder;Ljava/lang/Object;Lorg/ton/kotlin/cell/CellContext;)V
	public fun storeTlb (Lorg/ton/cell/CellBuilder;Lorg/ton/contract/Text;)V
	public fun storeTlb (Lorg/ton/cell/CellBuilder;Lorg/ton/contract/Text;Lorg/ton/kotlin/cell/CellContext;)V
	public fun tlbConstructor ()Lorg/ton/tlb/TlbConstructor;
}

public final class org/ton/contract/exception/AccountNotInitializedException : java/lang/RuntimeException {
	public fun <init> (Lorg/ton/block/MsgAddressInt;)V
	public final fun getAddress ()Lorg/ton/block/MsgAddressInt;
}

