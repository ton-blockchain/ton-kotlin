// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, watchosArm32, watchosArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <org.ton:ton-kotlin-liteapi-tl>
abstract interface org.ton.lite.api/LiteApi { // org.ton.lite.api/LiteApi|null[0]
    abstract suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetAccountState, kotlin/Int = ...): org.ton.lite.api.liteserver/LiteServerAccountState // org.ton.lite.api/LiteApi.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetAccountState;kotlin.Int){}[0]
    abstract suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo): org.ton.lite.api.liteserver/LiteServerAllShardsInfo // org.ton.lite.api/LiteApi.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetAllShardsInfo){}[0]
    abstract suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetBlock): org.ton.lite.api.liteserver/LiteServerBlockData // org.ton.lite.api/LiteApi.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetBlock){}[0]
    abstract suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader): org.ton.lite.api.liteserver/LiteServerBlockHeader // org.ton.lite.api/LiteApi.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetBlockHeader){}[0]
    abstract suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof): org.ton.lite.api.liteserver/LiteServerPartialBlockProof // org.ton.lite.api/LiteApi.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetBlockProof){}[0]
    abstract suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll): org.ton.lite.api.liteserver/LiteServerConfigInfo // org.ton.lite.api/LiteApi.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetConfigAll){}[0]
    abstract suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams): org.ton.lite.api.liteserver/LiteServerConfigInfo // org.ton.lite.api/LiteApi.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetConfigParams){}[0]
    abstract suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo, kotlin/Int = ...): org.ton.lite.api.liteserver/LiteServerMasterchainInfo // org.ton.lite.api/LiteApi.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetMasterchainInfo;kotlin.Int){}[0]
    abstract suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt, kotlin/Int = ...): org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt // org.ton.lite.api/LiteApi.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetMasterchainInfoExt;kotlin.Int){}[0]
    abstract suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction): org.ton.lite.api.liteserver/LiteServerTransactionInfo // org.ton.lite.api/LiteApi.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetOneTransaction){}[0]
    abstract suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo): org.ton.lite.api.liteserver/LiteServerShardInfo // org.ton.lite.api/LiteApi.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetShardInfo){}[0]
    abstract suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetState): org.ton.lite.api.liteserver/LiteServerBlockState // org.ton.lite.api/LiteApi.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetState){}[0]
    abstract suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetTime): org.ton.lite.api.liteserver/LiteServerCurrentTime // org.ton.lite.api/LiteApi.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetTime){}[0]
    abstract suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetTransactions): org.ton.lite.api.liteserver/LiteServerTransactionList // org.ton.lite.api/LiteApi.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetTransactions){}[0]
    abstract suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats): org.ton.lite.api.liteserver/LiteServerValidatorStats // org.ton.lite.api/LiteApi.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetValidatorStats){}[0]
    abstract suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetVersion): org.ton.lite.api.liteserver/LiteServerVersion // org.ton.lite.api/LiteApi.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetVersion){}[0]
    abstract suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions): org.ton.lite.api.liteserver/LiteServerBlockTransactions // org.ton.lite.api/LiteApi.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerListBlockTransactions){}[0]
    abstract suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerLookupBlock, kotlin/Int = ...): org.ton.lite.api.liteserver/LiteServerBlockHeader // org.ton.lite.api/LiteApi.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerLookupBlock;kotlin.Int){}[0]
    abstract suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod): org.ton.lite.api.liteserver/LiteServerRunMethodResult // org.ton.lite.api/LiteApi.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerRunSmcMethod){}[0]
    abstract suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerSendMessage): org.ton.lite.api.liteserver/LiteServerSendMsgStatus // org.ton.lite.api/LiteApi.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerSendMessage){}[0]
}

abstract interface org.ton.lite.api/LiteApiClient : org.ton.lite.api/LiteApi { // org.ton.lite.api/LiteApiClient|null[0]
    abstract suspend fun sendRawQuery(kotlin/ByteArray): kotlin/ByteArray // org.ton.lite.api/LiteApiClient.sendRawQuery|sendRawQuery(kotlin.ByteArray){}[0]
    open suspend fun <#A1: kotlin/Any?, #B1: kotlin/Any?> sendQuery(org.ton.tl/TlCodec<#A1>, org.ton.tl/TlCodec<#B1>, #A1, kotlin/Int = ...): #B1 // org.ton.lite.api/LiteApiClient.sendQuery|sendQuery(org.ton.tl.TlCodec<0:0>;org.ton.tl.TlCodec<0:1>;0:0;kotlin.Int){0ยง<kotlin.Any?>;1ยง<kotlin.Any?>}[0]
    open suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetAccountState, kotlin/Int): org.ton.lite.api.liteserver/LiteServerAccountState // org.ton.lite.api/LiteApiClient.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetAccountState;kotlin.Int){}[0]
    open suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo): org.ton.lite.api.liteserver/LiteServerAllShardsInfo // org.ton.lite.api/LiteApiClient.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetAllShardsInfo){}[0]
    open suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetBlock): org.ton.lite.api.liteserver/LiteServerBlockData // org.ton.lite.api/LiteApiClient.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetBlock){}[0]
    open suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader): org.ton.lite.api.liteserver/LiteServerBlockHeader // org.ton.lite.api/LiteApiClient.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetBlockHeader){}[0]
    open suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof): org.ton.lite.api.liteserver/LiteServerPartialBlockProof // org.ton.lite.api/LiteApiClient.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetBlockProof){}[0]
    open suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll): org.ton.lite.api.liteserver/LiteServerConfigInfo // org.ton.lite.api/LiteApiClient.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetConfigAll){}[0]
    open suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams): org.ton.lite.api.liteserver/LiteServerConfigInfo // org.ton.lite.api/LiteApiClient.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetConfigParams){}[0]
    open suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo, kotlin/Int): org.ton.lite.api.liteserver/LiteServerMasterchainInfo // org.ton.lite.api/LiteApiClient.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetMasterchainInfo;kotlin.Int){}[0]
    open suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt, kotlin/Int): org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt // org.ton.lite.api/LiteApiClient.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetMasterchainInfoExt;kotlin.Int){}[0]
    open suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction): org.ton.lite.api.liteserver/LiteServerTransactionInfo // org.ton.lite.api/LiteApiClient.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetOneTransaction){}[0]
    open suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo): org.ton.lite.api.liteserver/LiteServerShardInfo // org.ton.lite.api/LiteApiClient.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetShardInfo){}[0]
    open suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetState): org.ton.lite.api.liteserver/LiteServerBlockState // org.ton.lite.api/LiteApiClient.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetState){}[0]
    open suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetTime): org.ton.lite.api.liteserver/LiteServerCurrentTime // org.ton.lite.api/LiteApiClient.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetTime){}[0]
    open suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetTransactions): org.ton.lite.api.liteserver/LiteServerTransactionList // org.ton.lite.api/LiteApiClient.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetTransactions){}[0]
    open suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats): org.ton.lite.api.liteserver/LiteServerValidatorStats // org.ton.lite.api/LiteApiClient.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetValidatorStats){}[0]
    open suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerGetVersion): org.ton.lite.api.liteserver/LiteServerVersion // org.ton.lite.api/LiteApiClient.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerGetVersion){}[0]
    open suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions): org.ton.lite.api.liteserver/LiteServerBlockTransactions // org.ton.lite.api/LiteApiClient.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerListBlockTransactions){}[0]
    open suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerLookupBlock, kotlin/Int): org.ton.lite.api.liteserver/LiteServerBlockHeader // org.ton.lite.api/LiteApiClient.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerLookupBlock;kotlin.Int){}[0]
    open suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod): org.ton.lite.api.liteserver/LiteServerRunMethodResult // org.ton.lite.api/LiteApiClient.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerRunSmcMethod){}[0]
    open suspend fun invoke(org.ton.lite.api.liteserver.functions/LiteServerSendMessage): org.ton.lite.api.liteserver/LiteServerSendMsgStatus // org.ton.lite.api/LiteApiClient.invoke|invoke(org.ton.lite.api.liteserver.functions.LiteServerSendMessage){}[0]
}

sealed interface org.ton.lite.api.liteserver/LiteServerBlockLink { // org.ton.lite.api.liteserver/LiteServerBlockLink|null[0]
    abstract val from // org.ton.lite.api.liteserver/LiteServerBlockLink.from|{}from[0]
        abstract fun <get-from>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerBlockLink.from.<get-from>|<get-from>(){}[0]
    abstract val to // org.ton.lite.api.liteserver/LiteServerBlockLink.to|{}to[0]
        abstract fun <get-to>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerBlockLink.to.<get-to>|<get-to>(){}[0]
    abstract val toKeyBlock // org.ton.lite.api.liteserver/LiteServerBlockLink.toKeyBlock|{}toKeyBlock[0]
        abstract fun <get-toKeyBlock>(): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerBlockLink.toKeyBlock.<get-toKeyBlock>|<get-toKeyBlock>(){}[0]

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerBlockLink> { // org.ton.lite.api.liteserver/LiteServerBlockLink.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerBlockLink // org.ton.lite.api.liteserver/LiteServerBlockLink.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerBlockLink // org.ton.lite.api.liteserver/LiteServerBlockLink.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerBlockLink // org.ton.lite.api.liteserver/LiteServerBlockLink.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerBlockLink // org.ton.lite.api.liteserver/LiteServerBlockLink.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerBlockLink // org.ton.lite.api.liteserver/LiteServerBlockLink.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerBlockLink // org.ton.lite.api.liteserver/LiteServerBlockLink.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerBlockLink // org.ton.lite.api.liteserver/LiteServerBlockLink.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerBlockLink // org.ton.lite.api.liteserver/LiteServerBlockLink.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerBlockLink) // org.ton.lite.api.liteserver/LiteServerBlockLink.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerBlockLink){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerBlockLink) // org.ton.lite.api.liteserver/LiteServerBlockLink.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerBlockLink){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerBlockLink) // org.ton.lite.api.liteserver/LiteServerBlockLink.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerBlockLink){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerBlockLink) // org.ton.lite.api.liteserver/LiteServerBlockLink.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerBlockLink){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver/LiteServerBlockLink, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerBlockLink.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.LiteServerBlockLink;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver/LiteServerBlockLink, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerBlockLink.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.LiteServerBlockLink;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver/LiteServerBlockLink): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerBlockLink.Companion.hash|hash(org.ton.lite.api.liteserver.LiteServerBlockLink){}[0]
    }
}

final class org.ton.lite.api.exception/LiteServerCancelledException : org.ton.lite.api.exception/LiteServerException { // org.ton.lite.api.exception/LiteServerCancelledException|null[0]
    constructor <init>(kotlin/String) // org.ton.lite.api.exception/LiteServerCancelledException.<init>|<init>(kotlin.String){}[0]

    final object Companion { // org.ton.lite.api.exception/LiteServerCancelledException.Companion|null[0]
        final const val ERROR_CODE // org.ton.lite.api.exception/LiteServerCancelledException.Companion.ERROR_CODE|{}ERROR_CODE[0]
            final fun <get-ERROR_CODE>(): kotlin/Int // org.ton.lite.api.exception/LiteServerCancelledException.Companion.ERROR_CODE.<get-ERROR_CODE>|<get-ERROR_CODE>(){}[0]
    }
}

final class org.ton.lite.api.exception/LiteServerErrorException : org.ton.lite.api.exception/LiteServerException { // org.ton.lite.api.exception/LiteServerErrorException|null[0]
    constructor <init>(kotlin/String) // org.ton.lite.api.exception/LiteServerErrorException.<init>|<init>(kotlin.String){}[0]

    final object Companion { // org.ton.lite.api.exception/LiteServerErrorException.Companion|null[0]
        final const val ERROR_CODE // org.ton.lite.api.exception/LiteServerErrorException.Companion.ERROR_CODE|{}ERROR_CODE[0]
            final fun <get-ERROR_CODE>(): kotlin/Int // org.ton.lite.api.exception/LiteServerErrorException.Companion.ERROR_CODE.<get-ERROR_CODE>|<get-ERROR_CODE>(){}[0]
    }
}

final class org.ton.lite.api.exception/LiteServerFailureException : org.ton.lite.api.exception/LiteServerException { // org.ton.lite.api.exception/LiteServerFailureException|null[0]
    constructor <init>(kotlin/String) // org.ton.lite.api.exception/LiteServerFailureException.<init>|<init>(kotlin.String){}[0]

    final object Companion { // org.ton.lite.api.exception/LiteServerFailureException.Companion|null[0]
        final const val ERROR_CODE // org.ton.lite.api.exception/LiteServerFailureException.Companion.ERROR_CODE|{}ERROR_CODE[0]
            final fun <get-ERROR_CODE>(): kotlin/Int // org.ton.lite.api.exception/LiteServerFailureException.Companion.ERROR_CODE.<get-ERROR_CODE>|<get-ERROR_CODE>(){}[0]
    }
}

final class org.ton.lite.api.exception/LiteServerNotReadyException : org.ton.lite.api.exception/LiteServerException { // org.ton.lite.api.exception/LiteServerNotReadyException|null[0]
    constructor <init>(kotlin/String) // org.ton.lite.api.exception/LiteServerNotReadyException.<init>|<init>(kotlin.String){}[0]

    final object Companion { // org.ton.lite.api.exception/LiteServerNotReadyException.Companion|null[0]
        final const val ERROR_CODE // org.ton.lite.api.exception/LiteServerNotReadyException.Companion.ERROR_CODE|{}ERROR_CODE[0]
            final fun <get-ERROR_CODE>(): kotlin/Int // org.ton.lite.api.exception/LiteServerNotReadyException.Companion.ERROR_CODE.<get-ERROR_CODE>|<get-ERROR_CODE>(){}[0]
    }
}

final class org.ton.lite.api.exception/LiteServerProtoviolationException : org.ton.lite.api.exception/LiteServerException { // org.ton.lite.api.exception/LiteServerProtoviolationException|null[0]
    constructor <init>(kotlin/String) // org.ton.lite.api.exception/LiteServerProtoviolationException.<init>|<init>(kotlin.String){}[0]

    final object Companion { // org.ton.lite.api.exception/LiteServerProtoviolationException.Companion|null[0]
        final const val ERROR_CODE // org.ton.lite.api.exception/LiteServerProtoviolationException.Companion.ERROR_CODE|{}ERROR_CODE[0]
            final fun <get-ERROR_CODE>(): kotlin/Int // org.ton.lite.api.exception/LiteServerProtoviolationException.Companion.ERROR_CODE.<get-ERROR_CODE>|<get-ERROR_CODE>(){}[0]
    }
}

final class org.ton.lite.api.exception/LiteServerTimeoutException : org.ton.lite.api.exception/LiteServerException { // org.ton.lite.api.exception/LiteServerTimeoutException|null[0]
    constructor <init>(kotlin/String) // org.ton.lite.api.exception/LiteServerTimeoutException.<init>|<init>(kotlin.String){}[0]

    final object Companion { // org.ton.lite.api.exception/LiteServerTimeoutException.Companion|null[0]
        final const val ERROR_CODE // org.ton.lite.api.exception/LiteServerTimeoutException.Companion.ERROR_CODE|{}ERROR_CODE[0]
            final fun <get-ERROR_CODE>(): kotlin/Int // org.ton.lite.api.exception/LiteServerTimeoutException.Companion.ERROR_CODE.<get-ERROR_CODE>|<get-ERROR_CODE>(){}[0]
    }
}

final class org.ton.lite.api.exception/LiteServerUnknownException : org.ton.lite.api.exception/LiteServerException { // org.ton.lite.api.exception/LiteServerUnknownException|null[0]
    constructor <init>(kotlin/Int, kotlin/String) // org.ton.lite.api.exception/LiteServerUnknownException.<init>|<init>(kotlin.Int;kotlin.String){}[0]
}

final class org.ton.lite.api.exception/LiteServerWarningException : org.ton.lite.api.exception/LiteServerException { // org.ton.lite.api.exception/LiteServerWarningException|null[0]
    constructor <init>(kotlin/String) // org.ton.lite.api.exception/LiteServerWarningException.<init>|<init>(kotlin.String){}[0]

    final object Companion { // org.ton.lite.api.exception/LiteServerWarningException.Companion|null[0]
        final const val ERROR_CODE // org.ton.lite.api.exception/LiteServerWarningException.Companion.ERROR_CODE|{}ERROR_CODE[0]
            final fun <get-ERROR_CODE>(): kotlin/Int // org.ton.lite.api.exception/LiteServerWarningException.Companion.ERROR_CODE.<get-ERROR_CODE>|<get-ERROR_CODE>(){}[0]
    }
}

final class org.ton.lite.api.liteserver.functions/LiteServerGetAccountState : org.ton.tl/TLFunction<org.ton.lite.api.liteserver.functions/LiteServerGetAccountState, org.ton.lite.api.liteserver/LiteServerAccountState> { // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState|null[0]
    constructor <init>(org.ton.api.tonnode/TonNodeBlockIdExt, org.ton.lite.api.liteserver/LiteServerAccountId) // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.<init>|<init>(org.ton.api.tonnode.TonNodeBlockIdExt;org.ton.lite.api.liteserver.LiteServerAccountId){}[0]

    final val account // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.account|{}account[0]
        final fun <get-account>(): org.ton.lite.api.liteserver/LiteServerAccountId // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.account.<get-account>|<get-account>(){}[0]
    final val id // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.id|{}id[0]
        final fun <get-id>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.id.<get-id>|<get-id>(){}[0]

    final fun component1(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.component1|component1(){}[0]
    final fun component2(): org.ton.lite.api.liteserver/LiteServerAccountId // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.component2|component2(){}[0]
    final fun copy(org.ton.api.tonnode/TonNodeBlockIdExt = ..., org.ton.lite.api.liteserver/LiteServerAccountId = ...): org.ton.lite.api.liteserver.functions/LiteServerGetAccountState // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.copy|copy(org.ton.api.tonnode.TonNodeBlockIdExt;org.ton.lite.api.liteserver.LiteServerAccountId){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.hashCode|hashCode(){}[0]
    final fun resultTlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerAccountState> // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.resultTlCodec|resultTlCodec(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetAccountState> // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver.functions/LiteServerGetAccountState> { // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver.functions/LiteServerGetAccountState // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver.functions/LiteServerGetAccountState) // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.functions.LiteServerGetAccountState){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetAccountState> { // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetAccountState // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetAccountState // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetAccountState // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetAccountState // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetAccountState // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetAccountState // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetAccountState // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetAccountState // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetAccountState) // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetAccountState){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetAccountState) // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetAccountState){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetAccountState) // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetAccountState){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetAccountState) // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetAccountState){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver.functions/LiteServerGetAccountState, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.functions.LiteServerGetAccountState;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver.functions/LiteServerGetAccountState, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.functions.LiteServerGetAccountState;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver.functions/LiteServerGetAccountState): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.Companion.hash|hash(org.ton.lite.api.liteserver.functions.LiteServerGetAccountState){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver.functions/LiteServerGetAccountState> // org.ton.lite.api.liteserver.functions/LiteServerGetAccountState.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo : org.ton.tl/TLFunction<org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo, org.ton.lite.api.liteserver/LiteServerAllShardsInfo> { // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo|null[0]
    constructor <init>(org.ton.api.tonnode/TonNodeBlockIdExt) // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.<init>|<init>(org.ton.api.tonnode.TonNodeBlockIdExt){}[0]

    final val id // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.id|{}id[0]
        final fun <get-id>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.id.<get-id>|<get-id>(){}[0]

    final fun component1(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.component1|component1(){}[0]
    final fun copy(org.ton.api.tonnode/TonNodeBlockIdExt = ...): org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.copy|copy(org.ton.api.tonnode.TonNodeBlockIdExt){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.hashCode|hashCode(){}[0]
    final fun resultTlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerAllShardsInfo> // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.resultTlCodec|resultTlCodec(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo> // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo> { // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo) // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.functions.LiteServerGetAllShardsInfo){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo> { // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo) // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetAllShardsInfo){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo) // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetAllShardsInfo){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo) // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetAllShardsInfo){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo) // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetAllShardsInfo){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.functions.LiteServerGetAllShardsInfo;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.functions.LiteServerGetAllShardsInfo;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.Companion.hash|hash(org.ton.lite.api.liteserver.functions.LiteServerGetAllShardsInfo){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo> // org.ton.lite.api.liteserver.functions/LiteServerGetAllShardsInfo.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver.functions/LiteServerGetBlock : org.ton.tl/TLFunction<org.ton.lite.api.liteserver.functions/LiteServerGetBlock, org.ton.lite.api.liteserver/LiteServerBlockData> { // org.ton.lite.api.liteserver.functions/LiteServerGetBlock|null[0]
    constructor <init>(org.ton.api.tonnode/TonNodeBlockIdExt) // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.<init>|<init>(org.ton.api.tonnode.TonNodeBlockIdExt){}[0]

    final val id // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.id|{}id[0]
        final fun <get-id>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.id.<get-id>|<get-id>(){}[0]

    final fun component1(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.component1|component1(){}[0]
    final fun copy(org.ton.api.tonnode/TonNodeBlockIdExt = ...): org.ton.lite.api.liteserver.functions/LiteServerGetBlock // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.copy|copy(org.ton.api.tonnode.TonNodeBlockIdExt){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.hashCode|hashCode(){}[0]
    final fun resultTlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerBlockData> // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.resultTlCodec|resultTlCodec(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetBlock> // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver.functions/LiteServerGetBlock> { // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver.functions/LiteServerGetBlock // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver.functions/LiteServerGetBlock) // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.functions.LiteServerGetBlock){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetBlock> { // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetBlock // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetBlock // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetBlock // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetBlock // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetBlock // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetBlock // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetBlock // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetBlock // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetBlock) // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetBlock){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetBlock) // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetBlock){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetBlock) // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetBlock){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetBlock) // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetBlock){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver.functions/LiteServerGetBlock, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.functions.LiteServerGetBlock;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver.functions/LiteServerGetBlock, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.functions.LiteServerGetBlock;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver.functions/LiteServerGetBlock): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.Companion.hash|hash(org.ton.lite.api.liteserver.functions.LiteServerGetBlock){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver.functions/LiteServerGetBlock> // org.ton.lite.api.liteserver.functions/LiteServerGetBlock.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader : org.ton.tl/TLFunction<org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader, org.ton.lite.api.liteserver/LiteServerBlockHeader> { // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader|null[0]
    constructor <init>(org.ton.api.tonnode/TonNodeBlockIdExt, kotlin/Int) // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.<init>|<init>(org.ton.api.tonnode.TonNodeBlockIdExt;kotlin.Int){}[0]

    final val id // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.id|{}id[0]
        final fun <get-id>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.id.<get-id>|<get-id>(){}[0]
    final val mode // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.mode|{}mode[0]
        final fun <get-mode>(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.mode.<get-mode>|<get-mode>(){}[0]

    final fun component1(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.component2|component2(){}[0]
    final fun copy(org.ton.api.tonnode/TonNodeBlockIdExt = ..., kotlin/Int = ...): org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.copy|copy(org.ton.api.tonnode.TonNodeBlockIdExt;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.hashCode|hashCode(){}[0]
    final fun resultTlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerBlockHeader> // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.resultTlCodec|resultTlCodec(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader> // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader> { // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader) // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.functions.LiteServerGetBlockHeader){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader> { // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader) // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetBlockHeader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader) // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetBlockHeader){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader) // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetBlockHeader){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader) // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetBlockHeader){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.functions.LiteServerGetBlockHeader;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.functions.LiteServerGetBlockHeader;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.Companion.hash|hash(org.ton.lite.api.liteserver.functions.LiteServerGetBlockHeader){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader> // org.ton.lite.api.liteserver.functions/LiteServerGetBlockHeader.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof : org.ton.tl/TLFunction<org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof, org.ton.lite.api.liteserver/LiteServerPartialBlockProof> { // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof|null[0]
    constructor <init>(kotlin/Int, org.ton.api.tonnode/TonNodeBlockIdExt, org.ton.api.tonnode/TonNodeBlockIdExt?) // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.<init>|<init>(kotlin.Int;org.ton.api.tonnode.TonNodeBlockIdExt;org.ton.api.tonnode.TonNodeBlockIdExt?){}[0]
    constructor <init>(org.ton.api.tonnode/TonNodeBlockIdExt, org.ton.api.tonnode/TonNodeBlockIdExt? = ...) // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.<init>|<init>(org.ton.api.tonnode.TonNodeBlockIdExt;org.ton.api.tonnode.TonNodeBlockIdExt?){}[0]

    final val knownBlock // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.knownBlock|{}knownBlock[0]
        final fun <get-knownBlock>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.knownBlock.<get-knownBlock>|<get-knownBlock>(){}[0]
    final val mode // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.mode|{}mode[0]
        final fun <get-mode>(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.mode.<get-mode>|<get-mode>(){}[0]
    final val targetBlock // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.targetBlock|{}targetBlock[0]
        final fun <get-targetBlock>(): org.ton.api.tonnode/TonNodeBlockIdExt? // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.targetBlock.<get-targetBlock>|<get-targetBlock>(){}[0]

    final fun component1(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.component1|component1(){}[0]
    final fun component2(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.component2|component2(){}[0]
    final fun component3(): org.ton.api.tonnode/TonNodeBlockIdExt? // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.component3|component3(){}[0]
    final fun copy(kotlin/Int = ..., org.ton.api.tonnode/TonNodeBlockIdExt = ..., org.ton.api.tonnode/TonNodeBlockIdExt? = ...): org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.copy|copy(kotlin.Int;org.ton.api.tonnode.TonNodeBlockIdExt;org.ton.api.tonnode.TonNodeBlockIdExt?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.hashCode|hashCode(){}[0]
    final fun resultTlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerPartialBlockProof> // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.resultTlCodec|resultTlCodec(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof> // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof> { // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof) // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.functions.LiteServerGetBlockProof){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof> { // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof) // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetBlockProof){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof) // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetBlockProof){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof) // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetBlockProof){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof) // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetBlockProof){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.functions.LiteServerGetBlockProof;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.functions.LiteServerGetBlockProof;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.Companion.hash|hash(org.ton.lite.api.liteserver.functions.LiteServerGetBlockProof){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof> // org.ton.lite.api.liteserver.functions/LiteServerGetBlockProof.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll : org.ton.tl/TLFunction<org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll, org.ton.lite.api.liteserver/LiteServerConfigInfo> { // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll|null[0]
    constructor <init>(kotlin/Int, org.ton.api.tonnode/TonNodeBlockIdExt) // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.<init>|<init>(kotlin.Int;org.ton.api.tonnode.TonNodeBlockIdExt){}[0]

    final val id // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.id|{}id[0]
        final fun <get-id>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.id.<get-id>|<get-id>(){}[0]
    final val mode // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.mode|{}mode[0]
        final fun <get-mode>(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.mode.<get-mode>|<get-mode>(){}[0]

    final fun component1(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.component1|component1(){}[0]
    final fun component2(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.component2|component2(){}[0]
    final fun copy(kotlin/Int = ..., org.ton.api.tonnode/TonNodeBlockIdExt = ...): org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.copy|copy(kotlin.Int;org.ton.api.tonnode.TonNodeBlockIdExt){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.hashCode|hashCode(){}[0]
    final fun resultTlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerConfigInfo> // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.resultTlCodec|resultTlCodec(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll> // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll> { // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll) // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.functions.LiteServerGetConfigAll){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll> { // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll) // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetConfigAll){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll) // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetConfigAll){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll) // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetConfigAll){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll) // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetConfigAll){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.functions.LiteServerGetConfigAll;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.functions.LiteServerGetConfigAll;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.Companion.hash|hash(org.ton.lite.api.liteserver.functions.LiteServerGetConfigAll){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll> // org.ton.lite.api.liteserver.functions/LiteServerGetConfigAll.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams : org.ton.tl/TLFunction<org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams, org.ton.lite.api.liteserver/LiteServerConfigInfo> { // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams|null[0]
    constructor <init>(kotlin/Int, org.ton.api.tonnode/TonNodeBlockIdExt, kotlin.collections/List<kotlin/Int>) // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.<init>|<init>(kotlin.Int;org.ton.api.tonnode.TonNodeBlockIdExt;kotlin.collections.List<kotlin.Int>){}[0]

    final val id // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.id|{}id[0]
        final fun <get-id>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.id.<get-id>|<get-id>(){}[0]
    final val mode // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.mode|{}mode[0]
        final fun <get-mode>(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.mode.<get-mode>|<get-mode>(){}[0]
    final val paramList // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.paramList|{}paramList[0]
        final fun <get-paramList>(): kotlin.collections/List<kotlin/Int> // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.paramList.<get-paramList>|<get-paramList>(){}[0]

    final fun component1(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.component1|component1(){}[0]
    final fun component2(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.component2|component2(){}[0]
    final fun component3(): kotlin.collections/List<kotlin/Int> // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.component3|component3(){}[0]
    final fun copy(kotlin/Int = ..., org.ton.api.tonnode/TonNodeBlockIdExt = ..., kotlin.collections/List<kotlin/Int> = ...): org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.copy|copy(kotlin.Int;org.ton.api.tonnode.TonNodeBlockIdExt;kotlin.collections.List<kotlin.Int>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.hashCode|hashCode(){}[0]
    final fun resultTlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerConfigInfo> // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.resultTlCodec|resultTlCodec(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams> // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams> { // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams) // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.functions.LiteServerGetConfigParams){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams> { // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.Companion|null[0]
        final val $childSerializers // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.Companion.$childSerializers|{}$childSerializers[0]

        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams) // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetConfigParams){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams) // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetConfigParams){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams) // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetConfigParams){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams) // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetConfigParams){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.functions.LiteServerGetConfigParams;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.functions.LiteServerGetConfigParams;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.Companion.hash|hash(org.ton.lite.api.liteserver.functions.LiteServerGetConfigParams){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams> // org.ton.lite.api.liteserver.functions/LiteServerGetConfigParams.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt : org.ton.tl/TLFunction<org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt, org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt> { // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt|null[0]
    constructor <init>(kotlin/Int) // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.<init>|<init>(kotlin.Int){}[0]

    final val mode // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.mode|{}mode[0]
        final fun <get-mode>(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.mode.<get-mode>|<get-mode>(){}[0]

    final fun component1(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.component1|component1(){}[0]
    final fun copy(kotlin/Int = ...): org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.copy|copy(kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.hashCode|hashCode(){}[0]
    final fun resultTlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt> // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.resultTlCodec|resultTlCodec(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt> // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt> { // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt) // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.functions.LiteServerGetMasterchainInfoExt){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt> { // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt) // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetMasterchainInfoExt){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt) // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetMasterchainInfoExt){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt) // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetMasterchainInfoExt){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt) // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetMasterchainInfoExt){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.functions.LiteServerGetMasterchainInfoExt;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.functions.LiteServerGetMasterchainInfoExt;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.Companion.hash|hash(org.ton.lite.api.liteserver.functions.LiteServerGetMasterchainInfoExt){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt> // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfoExt.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction : org.ton.tl/TLFunction<org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction, org.ton.lite.api.liteserver/LiteServerTransactionInfo> { // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction|null[0]
    constructor <init>(org.ton.api.tonnode/TonNodeBlockIdExt, org.ton.lite.api.liteserver/LiteServerAccountId, kotlin/Long) // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.<init>|<init>(org.ton.api.tonnode.TonNodeBlockIdExt;org.ton.lite.api.liteserver.LiteServerAccountId;kotlin.Long){}[0]

    final val account // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.account|{}account[0]
        final fun <get-account>(): org.ton.lite.api.liteserver/LiteServerAccountId // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.account.<get-account>|<get-account>(){}[0]
    final val id // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.id|{}id[0]
        final fun <get-id>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.id.<get-id>|<get-id>(){}[0]
    final val lt // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.lt|{}lt[0]
        final fun <get-lt>(): kotlin/Long // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.lt.<get-lt>|<get-lt>(){}[0]

    final fun component1(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.component1|component1(){}[0]
    final fun component2(): org.ton.lite.api.liteserver/LiteServerAccountId // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.component2|component2(){}[0]
    final fun component3(): kotlin/Long // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.component3|component3(){}[0]
    final fun copy(org.ton.api.tonnode/TonNodeBlockIdExt = ..., org.ton.lite.api.liteserver/LiteServerAccountId = ..., kotlin/Long = ...): org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.copy|copy(org.ton.api.tonnode.TonNodeBlockIdExt;org.ton.lite.api.liteserver.LiteServerAccountId;kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.hashCode|hashCode(){}[0]
    final fun resultTlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerTransactionInfo> // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.resultTlCodec|resultTlCodec(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction> // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction> { // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction) // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.functions.LiteServerGetOneTransaction){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction> { // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction) // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetOneTransaction){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction) // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetOneTransaction){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction) // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetOneTransaction){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction) // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetOneTransaction){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.functions.LiteServerGetOneTransaction;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.functions.LiteServerGetOneTransaction;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.Companion.hash|hash(org.ton.lite.api.liteserver.functions.LiteServerGetOneTransaction){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction> // org.ton.lite.api.liteserver.functions/LiteServerGetOneTransaction.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo : org.ton.tl/TLFunction<org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo, org.ton.lite.api.liteserver/LiteServerShardInfo> { // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo|null[0]
    constructor <init>(org.ton.api.tonnode/TonNodeBlockIdExt, kotlin/Int, kotlin/Long, kotlin/Boolean) // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.<init>|<init>(org.ton.api.tonnode.TonNodeBlockIdExt;kotlin.Int;kotlin.Long;kotlin.Boolean){}[0]

    final val exact // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.exact|{}exact[0]
        final fun <get-exact>(): kotlin/Boolean // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.exact.<get-exact>|<get-exact>(){}[0]
    final val id // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.id|{}id[0]
        final fun <get-id>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.id.<get-id>|<get-id>(){}[0]
    final val shard // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.shard|{}shard[0]
        final fun <get-shard>(): kotlin/Long // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.shard.<get-shard>|<get-shard>(){}[0]
    final val workchain // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.workchain|{}workchain[0]
        final fun <get-workchain>(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.workchain.<get-workchain>|<get-workchain>(){}[0]

    final fun component1(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.component2|component2(){}[0]
    final fun component3(): kotlin/Long // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.component3|component3(){}[0]
    final fun component4(): kotlin/Boolean // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.component4|component4(){}[0]
    final fun copy(org.ton.api.tonnode/TonNodeBlockIdExt = ..., kotlin/Int = ..., kotlin/Long = ..., kotlin/Boolean = ...): org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.copy|copy(org.ton.api.tonnode.TonNodeBlockIdExt;kotlin.Int;kotlin.Long;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.hashCode|hashCode(){}[0]
    final fun resultTlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerShardInfo> // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.resultTlCodec|resultTlCodec(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo> // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo> { // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo) // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.functions.LiteServerGetShardInfo){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo> { // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo) // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetShardInfo){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo) // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetShardInfo){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo) // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetShardInfo){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo) // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetShardInfo){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.functions.LiteServerGetShardInfo;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.functions.LiteServerGetShardInfo;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.Companion.hash|hash(org.ton.lite.api.liteserver.functions.LiteServerGetShardInfo){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo> // org.ton.lite.api.liteserver.functions/LiteServerGetShardInfo.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver.functions/LiteServerGetState : org.ton.tl/TLFunction<org.ton.lite.api.liteserver.functions/LiteServerGetState, org.ton.lite.api.liteserver/LiteServerBlockState> { // org.ton.lite.api.liteserver.functions/LiteServerGetState|null[0]
    constructor <init>(org.ton.api.tonnode/TonNodeBlockIdExt) // org.ton.lite.api.liteserver.functions/LiteServerGetState.<init>|<init>(org.ton.api.tonnode.TonNodeBlockIdExt){}[0]

    final val id // org.ton.lite.api.liteserver.functions/LiteServerGetState.id|{}id[0]
        final fun <get-id>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver.functions/LiteServerGetState.id.<get-id>|<get-id>(){}[0]

    final fun component1(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver.functions/LiteServerGetState.component1|component1(){}[0]
    final fun copy(org.ton.api.tonnode/TonNodeBlockIdExt = ...): org.ton.lite.api.liteserver.functions/LiteServerGetState // org.ton.lite.api.liteserver.functions/LiteServerGetState.copy|copy(org.ton.api.tonnode.TonNodeBlockIdExt){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver.functions/LiteServerGetState.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetState.hashCode|hashCode(){}[0]
    final fun resultTlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerBlockState> // org.ton.lite.api.liteserver.functions/LiteServerGetState.resultTlCodec|resultTlCodec(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetState> // org.ton.lite.api.liteserver.functions/LiteServerGetState.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver.functions/LiteServerGetState.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver.functions/LiteServerGetState> { // org.ton.lite.api.liteserver.functions/LiteServerGetState.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver.functions/LiteServerGetState.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver.functions/LiteServerGetState.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver.functions/LiteServerGetState.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver.functions/LiteServerGetState // org.ton.lite.api.liteserver.functions/LiteServerGetState.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver.functions/LiteServerGetState) // org.ton.lite.api.liteserver.functions/LiteServerGetState.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.functions.LiteServerGetState){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetState> { // org.ton.lite.api.liteserver.functions/LiteServerGetState.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetState // org.ton.lite.api.liteserver.functions/LiteServerGetState.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetState // org.ton.lite.api.liteserver.functions/LiteServerGetState.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetState // org.ton.lite.api.liteserver.functions/LiteServerGetState.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetState // org.ton.lite.api.liteserver.functions/LiteServerGetState.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetState // org.ton.lite.api.liteserver.functions/LiteServerGetState.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetState // org.ton.lite.api.liteserver.functions/LiteServerGetState.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetState // org.ton.lite.api.liteserver.functions/LiteServerGetState.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetState // org.ton.lite.api.liteserver.functions/LiteServerGetState.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetState) // org.ton.lite.api.liteserver.functions/LiteServerGetState.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetState){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetState) // org.ton.lite.api.liteserver.functions/LiteServerGetState.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetState){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetState) // org.ton.lite.api.liteserver.functions/LiteServerGetState.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetState){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetState) // org.ton.lite.api.liteserver.functions/LiteServerGetState.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetState){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver.functions/LiteServerGetState, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetState.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.functions.LiteServerGetState;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver.functions/LiteServerGetState, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver.functions/LiteServerGetState.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.functions.LiteServerGetState;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver.functions/LiteServerGetState): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetState.Companion.hash|hash(org.ton.lite.api.liteserver.functions.LiteServerGetState){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver.functions/LiteServerGetState> // org.ton.lite.api.liteserver.functions/LiteServerGetState.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver.functions/LiteServerGetTransactions : org.ton.tl/TLFunction<org.ton.lite.api.liteserver.functions/LiteServerGetTransactions, org.ton.lite.api.liteserver/LiteServerTransactionList> { // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions|null[0]
    constructor <init>(kotlin/Int, org.ton.lite.api.liteserver/LiteServerAccountId, kotlin/Long, kotlinx.io.bytestring/ByteString) // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.<init>|<init>(kotlin.Int;org.ton.lite.api.liteserver.LiteServerAccountId;kotlin.Long;kotlinx.io.bytestring.ByteString){}[0]

    final val account // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.account|{}account[0]
        final fun <get-account>(): org.ton.lite.api.liteserver/LiteServerAccountId // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.account.<get-account>|<get-account>(){}[0]
    final val count // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.count|{}count[0]
        final fun <get-count>(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.count.<get-count>|<get-count>(){}[0]
    final val hash // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.hash|{}hash[0]
        final fun <get-hash>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.hash.<get-hash>|<get-hash>(){}[0]
    final val lt // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.lt|{}lt[0]
        final fun <get-lt>(): kotlin/Long // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.lt.<get-lt>|<get-lt>(){}[0]

    final fun component1(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.component1|component1(){}[0]
    final fun component2(): org.ton.lite.api.liteserver/LiteServerAccountId // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.component2|component2(){}[0]
    final fun component3(): kotlin/Long // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.component3|component3(){}[0]
    final fun component4(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.component4|component4(){}[0]
    final fun copy(kotlin/Int = ..., org.ton.lite.api.liteserver/LiteServerAccountId = ..., kotlin/Long = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.lite.api.liteserver.functions/LiteServerGetTransactions // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.copy|copy(kotlin.Int;org.ton.lite.api.liteserver.LiteServerAccountId;kotlin.Long;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.hashCode|hashCode(){}[0]
    final fun resultTlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerTransactionList> // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.resultTlCodec|resultTlCodec(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetTransactions> // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver.functions/LiteServerGetTransactions> { // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver.functions/LiteServerGetTransactions // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver.functions/LiteServerGetTransactions) // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.functions.LiteServerGetTransactions){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetTransactions> { // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetTransactions // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetTransactions // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetTransactions // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetTransactions // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetTransactions // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetTransactions // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetTransactions // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetTransactions // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetTransactions) // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetTransactions){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetTransactions) // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetTransactions){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetTransactions) // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetTransactions){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetTransactions) // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetTransactions){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver.functions/LiteServerGetTransactions, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.functions.LiteServerGetTransactions;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver.functions/LiteServerGetTransactions, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.functions.LiteServerGetTransactions;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver.functions/LiteServerGetTransactions): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.Companion.hash|hash(org.ton.lite.api.liteserver.functions.LiteServerGetTransactions){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver.functions/LiteServerGetTransactions> // org.ton.lite.api.liteserver.functions/LiteServerGetTransactions.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats : org.ton.tl/TLFunction<org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats, org.ton.lite.api.liteserver/LiteServerValidatorStats> { // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats|null[0]
    constructor <init>(kotlin/Int, org.ton.api.tonnode/TonNodeBlockIdExt, kotlin/Int, kotlinx.io.bytestring/ByteString?, kotlin/Int?) // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.<init>|<init>(kotlin.Int;org.ton.api.tonnode.TonNodeBlockIdExt;kotlin.Int;kotlinx.io.bytestring.ByteString?;kotlin.Int?){}[0]

    final val id // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.id|{}id[0]
        final fun <get-id>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.id.<get-id>|<get-id>(){}[0]
    final val limit // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.limit|{}limit[0]
        final fun <get-limit>(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.limit.<get-limit>|<get-limit>(){}[0]
    final val mode // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.mode|{}mode[0]
        final fun <get-mode>(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.mode.<get-mode>|<get-mode>(){}[0]
    final val modifiedAfter // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.modifiedAfter|{}modifiedAfter[0]
        final fun <get-modifiedAfter>(): kotlin/Int? // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.modifiedAfter.<get-modifiedAfter>|<get-modifiedAfter>(){}[0]
    final val startAfter // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.startAfter|{}startAfter[0]
        final fun <get-startAfter>(): kotlinx.io.bytestring/ByteString? // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.startAfter.<get-startAfter>|<get-startAfter>(){}[0]

    final fun component1(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.component1|component1(){}[0]
    final fun component2(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.component2|component2(){}[0]
    final fun component3(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.component3|component3(){}[0]
    final fun component4(): kotlinx.io.bytestring/ByteString? // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.component4|component4(){}[0]
    final fun component5(): kotlin/Int? // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.component5|component5(){}[0]
    final fun copy(kotlin/Int = ..., org.ton.api.tonnode/TonNodeBlockIdExt = ..., kotlin/Int = ..., kotlinx.io.bytestring/ByteString? = ..., kotlin/Int? = ...): org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.copy|copy(kotlin.Int;org.ton.api.tonnode.TonNodeBlockIdExt;kotlin.Int;kotlinx.io.bytestring.ByteString?;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.hashCode|hashCode(){}[0]
    final fun resultTlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerValidatorStats> // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.resultTlCodec|resultTlCodec(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats> // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats> { // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats) // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.functions.LiteServerGetValidatorStats){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats> { // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats) // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetValidatorStats){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats) // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetValidatorStats){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats) // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetValidatorStats){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats) // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetValidatorStats){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.functions.LiteServerGetValidatorStats;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.functions.LiteServerGetValidatorStats;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.Companion.hash|hash(org.ton.lite.api.liteserver.functions.LiteServerGetValidatorStats){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats> // org.ton.lite.api.liteserver.functions/LiteServerGetValidatorStats.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions : org.ton.tl/TLFunction<org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions, org.ton.lite.api.liteserver/LiteServerBlockTransactions> { // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions|null[0]
    constructor <init>(org.ton.api.tonnode/TonNodeBlockIdExt, kotlin/Int, kotlin/Int, org.ton.lite.api.liteserver/LiteServerTransactionId3?, kotlin/Boolean = ..., kotlin/Boolean = ...) // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.<init>|<init>(org.ton.api.tonnode.TonNodeBlockIdExt;kotlin.Int;kotlin.Int;org.ton.lite.api.liteserver.LiteServerTransactionId3?;kotlin.Boolean;kotlin.Boolean){}[0]

    final val after // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.after|{}after[0]
        final fun <get-after>(): org.ton.lite.api.liteserver/LiteServerTransactionId3? // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.after.<get-after>|<get-after>(){}[0]
    final val count // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.count|{}count[0]
        final fun <get-count>(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.count.<get-count>|<get-count>(){}[0]
    final val id // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.id|{}id[0]
        final fun <get-id>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.id.<get-id>|<get-id>(){}[0]
    final val mode // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.mode|{}mode[0]
        final fun <get-mode>(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.mode.<get-mode>|<get-mode>(){}[0]
    final val reverseOrder // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.reverseOrder|{}reverseOrder[0]
        final fun <get-reverseOrder>(): kotlin/Boolean // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.reverseOrder.<get-reverseOrder>|<get-reverseOrder>(){}[0]
    final val wantProof // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.wantProof|{}wantProof[0]
        final fun <get-wantProof>(): kotlin/Boolean // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.wantProof.<get-wantProof>|<get-wantProof>(){}[0]

    final fun component1(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.component2|component2(){}[0]
    final fun component3(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.component3|component3(){}[0]
    final fun component4(): org.ton.lite.api.liteserver/LiteServerTransactionId3? // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.component4|component4(){}[0]
    final fun component5(): kotlin/Boolean // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.component5|component5(){}[0]
    final fun component6(): kotlin/Boolean // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.component6|component6(){}[0]
    final fun copy(org.ton.api.tonnode/TonNodeBlockIdExt = ..., kotlin/Int = ..., kotlin/Int = ..., org.ton.lite.api.liteserver/LiteServerTransactionId3? = ..., kotlin/Boolean = ..., kotlin/Boolean = ...): org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.copy|copy(org.ton.api.tonnode.TonNodeBlockIdExt;kotlin.Int;kotlin.Int;org.ton.lite.api.liteserver.LiteServerTransactionId3?;kotlin.Boolean;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.hashCode|hashCode(){}[0]
    final fun resultTlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerBlockTransactions> // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.resultTlCodec|resultTlCodec(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions> // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions> { // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions) // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.functions.LiteServerListBlockTransactions){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions> { // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions) // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerListBlockTransactions){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions) // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerListBlockTransactions){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions) // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerListBlockTransactions){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions) // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerListBlockTransactions){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.functions.LiteServerListBlockTransactions;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.functions.LiteServerListBlockTransactions;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.Companion.hash|hash(org.ton.lite.api.liteserver.functions.LiteServerListBlockTransactions){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions> // org.ton.lite.api.liteserver.functions/LiteServerListBlockTransactions.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver.functions/LiteServerLookupBlock : org.ton.tl/TLFunction<org.ton.lite.api.liteserver.functions/LiteServerLookupBlock, org.ton.lite.api.liteserver/LiteServerBlockHeader> { // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock|null[0]
    constructor <init>(kotlin/Int, org.ton.api.tonnode/TonNodeBlockId, kotlin/Long?, kotlin/Int?) // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.<init>|<init>(kotlin.Int;org.ton.api.tonnode.TonNodeBlockId;kotlin.Long?;kotlin.Int?){}[0]

    final val id // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.id|{}id[0]
        final fun <get-id>(): org.ton.api.tonnode/TonNodeBlockId // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.id.<get-id>|<get-id>(){}[0]
    final val lt // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.lt|{}lt[0]
        final fun <get-lt>(): kotlin/Long? // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.lt.<get-lt>|<get-lt>(){}[0]
    final val mode // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.mode|{}mode[0]
        final fun <get-mode>(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.mode.<get-mode>|<get-mode>(){}[0]
    final val utime // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.utime|{}utime[0]
        final fun <get-utime>(): kotlin/Int? // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.utime.<get-utime>|<get-utime>(){}[0]

    final fun component1(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.component1|component1(){}[0]
    final fun component2(): org.ton.api.tonnode/TonNodeBlockId // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.component2|component2(){}[0]
    final fun component3(): kotlin/Long? // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.component3|component3(){}[0]
    final fun component4(): kotlin/Int? // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.component4|component4(){}[0]
    final fun copy(kotlin/Int = ..., org.ton.api.tonnode/TonNodeBlockId = ..., kotlin/Long? = ..., kotlin/Int? = ...): org.ton.lite.api.liteserver.functions/LiteServerLookupBlock // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.copy|copy(kotlin.Int;org.ton.api.tonnode.TonNodeBlockId;kotlin.Long?;kotlin.Int?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.hashCode|hashCode(){}[0]
    final fun resultTlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerBlockHeader> // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.resultTlCodec|resultTlCodec(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerLookupBlock> // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver.functions/LiteServerLookupBlock> { // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver.functions/LiteServerLookupBlock // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver.functions/LiteServerLookupBlock) // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.functions.LiteServerLookupBlock){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerLookupBlock> { // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.Companion|null[0]
        final const val ID_MASK // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.Companion.ID_MASK|{}ID_MASK[0]
            final fun <get-ID_MASK>(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.Companion.ID_MASK.<get-ID_MASK>|<get-ID_MASK>(){}[0]
        final const val LT_MASK // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.Companion.LT_MASK|{}LT_MASK[0]
            final fun <get-LT_MASK>(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.Companion.LT_MASK.<get-LT_MASK>|<get-LT_MASK>(){}[0]
        final const val UTIME_MASK // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.Companion.UTIME_MASK|{}UTIME_MASK[0]
            final fun <get-UTIME_MASK>(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.Companion.UTIME_MASK.<get-UTIME_MASK>|<get-UTIME_MASK>(){}[0]

        final val $childSerializers // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.Companion.$childSerializers|{}$childSerializers[0]

        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerLookupBlock // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerLookupBlock // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerLookupBlock // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerLookupBlock // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerLookupBlock // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerLookupBlock // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerLookupBlock // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerLookupBlock // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerLookupBlock) // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerLookupBlock){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerLookupBlock) // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerLookupBlock){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerLookupBlock) // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerLookupBlock){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerLookupBlock) // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerLookupBlock){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver.functions/LiteServerLookupBlock, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.functions.LiteServerLookupBlock;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver.functions/LiteServerLookupBlock, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.functions.LiteServerLookupBlock;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver.functions/LiteServerLookupBlock): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.Companion.hash|hash(org.ton.lite.api.liteserver.functions.LiteServerLookupBlock){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver.functions/LiteServerLookupBlock> // org.ton.lite.api.liteserver.functions/LiteServerLookupBlock.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver.functions/LiteServerQuery { // org.ton.lite.api.liteserver.functions/LiteServerQuery|null[0]
    constructor <init>(kotlinx.io.bytestring/ByteString) // org.ton.lite.api.liteserver.functions/LiteServerQuery.<init>|<init>(kotlinx.io.bytestring.ByteString){}[0]

    final val data // org.ton.lite.api.liteserver.functions/LiteServerQuery.data|{}data[0]
        final fun <get-data>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver.functions/LiteServerQuery.data.<get-data>|<get-data>(){}[0]

    final fun component1(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver.functions/LiteServerQuery.component1|component1(){}[0]
    final fun copy(kotlinx.io.bytestring/ByteString = ...): org.ton.lite.api.liteserver.functions/LiteServerQuery // org.ton.lite.api.liteserver.functions/LiteServerQuery.copy|copy(kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver.functions/LiteServerQuery.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerQuery.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver.functions/LiteServerQuery.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver.functions/LiteServerQuery> { // org.ton.lite.api.liteserver.functions/LiteServerQuery.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver.functions/LiteServerQuery.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver.functions/LiteServerQuery.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver.functions/LiteServerQuery.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver.functions/LiteServerQuery // org.ton.lite.api.liteserver.functions/LiteServerQuery.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver.functions/LiteServerQuery) // org.ton.lite.api.liteserver.functions/LiteServerQuery.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.functions.LiteServerQuery){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerQuery> { // org.ton.lite.api.liteserver.functions/LiteServerQuery.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerQuery // org.ton.lite.api.liteserver.functions/LiteServerQuery.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerQuery // org.ton.lite.api.liteserver.functions/LiteServerQuery.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerQuery // org.ton.lite.api.liteserver.functions/LiteServerQuery.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerQuery // org.ton.lite.api.liteserver.functions/LiteServerQuery.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerQuery // org.ton.lite.api.liteserver.functions/LiteServerQuery.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerQuery // org.ton.lite.api.liteserver.functions/LiteServerQuery.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerQuery // org.ton.lite.api.liteserver.functions/LiteServerQuery.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerQuery // org.ton.lite.api.liteserver.functions/LiteServerQuery.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerQuery) // org.ton.lite.api.liteserver.functions/LiteServerQuery.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerQuery){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerQuery) // org.ton.lite.api.liteserver.functions/LiteServerQuery.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerQuery){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerQuery) // org.ton.lite.api.liteserver.functions/LiteServerQuery.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerQuery){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerQuery) // org.ton.lite.api.liteserver.functions/LiteServerQuery.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerQuery){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver.functions/LiteServerQuery, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerQuery.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.functions.LiteServerQuery;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver.functions/LiteServerQuery, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver.functions/LiteServerQuery.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.functions.LiteServerQuery;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver.functions/LiteServerQuery): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerQuery.Companion.hash|hash(org.ton.lite.api.liteserver.functions.LiteServerQuery){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver.functions/LiteServerQuery> // org.ton.lite.api.liteserver.functions/LiteServerQuery.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod : org.ton.tl/TLFunction<org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod, org.ton.lite.api.liteserver/LiteServerRunMethodResult> { // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod|null[0]
    constructor <init>(kotlin/Int, org.ton.api.tonnode/TonNodeBlockIdExt, org.ton.lite.api.liteserver/LiteServerAccountId, kotlin/Long, kotlinx.io.bytestring/ByteString) // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.<init>|<init>(kotlin.Int;org.ton.api.tonnode.TonNodeBlockIdExt;org.ton.lite.api.liteserver.LiteServerAccountId;kotlin.Long;kotlinx.io.bytestring.ByteString){}[0]

    final val account // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.account|{}account[0]
        final fun <get-account>(): org.ton.lite.api.liteserver/LiteServerAccountId // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.account.<get-account>|<get-account>(){}[0]
    final val id // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.id|{}id[0]
        final fun <get-id>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.id.<get-id>|<get-id>(){}[0]
    final val methodId // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.methodId|{}methodId[0]
        final fun <get-methodId>(): kotlin/Long // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.methodId.<get-methodId>|<get-methodId>(){}[0]
    final val mode // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.mode|{}mode[0]
        final fun <get-mode>(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.mode.<get-mode>|<get-mode>(){}[0]
    final val params // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.params|{}params[0]
        final fun <get-params>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.params.<get-params>|<get-params>(){}[0]

    final fun component1(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.component1|component1(){}[0]
    final fun component2(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.component2|component2(){}[0]
    final fun component3(): org.ton.lite.api.liteserver/LiteServerAccountId // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.component3|component3(){}[0]
    final fun component4(): kotlin/Long // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.component4|component4(){}[0]
    final fun component5(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.component5|component5(){}[0]
    final fun copy(kotlin/Int = ..., org.ton.api.tonnode/TonNodeBlockIdExt = ..., org.ton.lite.api.liteserver/LiteServerAccountId = ..., kotlin/Long = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.copy|copy(kotlin.Int;org.ton.api.tonnode.TonNodeBlockIdExt;org.ton.lite.api.liteserver.LiteServerAccountId;kotlin.Long;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.hashCode|hashCode(){}[0]
    final fun resultTlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerRunMethodResult> // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.resultTlCodec|resultTlCodec(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod> // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod> { // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod) // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.functions.LiteServerRunSmcMethod){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod> { // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod) // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerRunSmcMethod){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod) // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerRunSmcMethod){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod) // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerRunSmcMethod){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod) // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerRunSmcMethod){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.functions.LiteServerRunSmcMethod;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.functions.LiteServerRunSmcMethod;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.Companion.hash|hash(org.ton.lite.api.liteserver.functions.LiteServerRunSmcMethod){}[0]
        final fun methodId(kotlin/String): kotlin/Long // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.Companion.methodId|methodId(kotlin.String){}[0]
        final fun params(kotlin.collections/Iterable<org.ton.block/VmStackValue>): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.Companion.params|params(kotlin.collections.Iterable<org.ton.block.VmStackValue>){}[0]
        final fun params(kotlin/Array<out org.ton.block/VmStackValue>...): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.Companion.params|params(kotlin.Array<out|org.ton.block.VmStackValue>...){}[0]
        final fun params(org.ton.block/VmStack): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.Companion.params|params(org.ton.block.VmStack){}[0]
        final fun params(org.ton.block/VmStackList?): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.Companion.params|params(org.ton.block.VmStackList?){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod> // org.ton.lite.api.liteserver.functions/LiteServerRunSmcMethod.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver.functions/LiteServerSendMessage : org.ton.tl/TLFunction<org.ton.lite.api.liteserver.functions/LiteServerSendMessage, org.ton.lite.api.liteserver/LiteServerSendMsgStatus> { // org.ton.lite.api.liteserver.functions/LiteServerSendMessage|null[0]
    constructor <init>(kotlinx.io.bytestring/ByteString) // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.<init>|<init>(kotlinx.io.bytestring.ByteString){}[0]

    final val body // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.body|{}body[0]
        final fun <get-body>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.body.<get-body>|<get-body>(){}[0]

    final fun component1(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.component1|component1(){}[0]
    final fun copy(kotlinx.io.bytestring/ByteString = ...): org.ton.lite.api.liteserver.functions/LiteServerSendMessage // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.copy|copy(kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.hashCode|hashCode(){}[0]
    final fun resultTlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerSendMsgStatus> // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.resultTlCodec|resultTlCodec(){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerSendMessage> // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.tlCodec|tlCodec(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver.functions/LiteServerSendMessage> { // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver.functions/LiteServerSendMessage // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver.functions/LiteServerSendMessage) // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.functions.LiteServerSendMessage){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerSendMessage> { // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerSendMessage // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerSendMessage // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerSendMessage // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerSendMessage // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerSendMessage // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerSendMessage // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerSendMessage // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerSendMessage // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerSendMessage) // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerSendMessage){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerSendMessage) // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerSendMessage){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerSendMessage) // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerSendMessage){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerSendMessage) // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerSendMessage){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver.functions/LiteServerSendMessage, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.functions.LiteServerSendMessage;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver.functions/LiteServerSendMessage, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.functions.LiteServerSendMessage;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver.functions/LiteServerSendMessage): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.Companion.hash|hash(org.ton.lite.api.liteserver.functions.LiteServerSendMessage){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver.functions/LiteServerSendMessage> // org.ton.lite.api.liteserver.functions/LiteServerSendMessage.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno { // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno|null[0]
    constructor <init>(kotlin/Int, kotlin/Int) // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.<init>|<init>(kotlin.Int;kotlin.Int){}[0]

    final val seqno // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.seqno|{}seqno[0]
        final fun <get-seqno>(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.seqno.<get-seqno>|<get-seqno>(){}[0]
    final val timeoutMs // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.timeoutMs|{}timeoutMs[0]
        final fun <get-timeoutMs>(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.timeoutMs.<get-timeoutMs>|<get-timeoutMs>(){}[0]

    final fun component1(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.component2|component2(){}[0]
    final fun copy(kotlin/Int = ..., kotlin/Int = ...): org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.copy|copy(kotlin.Int;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno> { // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno) // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.functions.LiteServerWaitMasterchainSeqno){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno> { // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno) // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerWaitMasterchainSeqno){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno) // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerWaitMasterchainSeqno){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno) // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerWaitMasterchainSeqno){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno) // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerWaitMasterchainSeqno){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.functions.LiteServerWaitMasterchainSeqno;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.functions.LiteServerWaitMasterchainSeqno;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.Companion.hash|hash(org.ton.lite.api.liteserver.functions.LiteServerWaitMasterchainSeqno){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno> // org.ton.lite.api.liteserver.functions/LiteServerWaitMasterchainSeqno.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver/LiteServerAccountId { // org.ton.lite.api.liteserver/LiteServerAccountId|null[0]
    constructor <init>(kotlin/Int, kotlinx.io.bytestring/ByteString) // org.ton.lite.api.liteserver/LiteServerAccountId.<init>|<init>(kotlin.Int;kotlinx.io.bytestring.ByteString){}[0]

    final val id // org.ton.lite.api.liteserver/LiteServerAccountId.id|{}id[0]
        final fun <get-id>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerAccountId.id.<get-id>|<get-id>(){}[0]
    final val workchain // org.ton.lite.api.liteserver/LiteServerAccountId.workchain|{}workchain[0]
        final fun <get-workchain>(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerAccountId.workchain.<get-workchain>|<get-workchain>(){}[0]

    final fun component1(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerAccountId.component1|component1(){}[0]
    final fun component2(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerAccountId.component2|component2(){}[0]
    final fun copy(kotlin/Int = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.lite.api.liteserver/LiteServerAccountId // org.ton.lite.api.liteserver/LiteServerAccountId.copy|copy(kotlin.Int;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerAccountId.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerAccountId.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver/LiteServerAccountId.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver/LiteServerAccountId> { // org.ton.lite.api.liteserver/LiteServerAccountId.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver/LiteServerAccountId.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver/LiteServerAccountId.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver/LiteServerAccountId.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver/LiteServerAccountId // org.ton.lite.api.liteserver/LiteServerAccountId.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver/LiteServerAccountId) // org.ton.lite.api.liteserver/LiteServerAccountId.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.LiteServerAccountId){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.lite.api.liteserver/LiteServerAccountId> { // org.ton.lite.api.liteserver/LiteServerAccountId.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerAccountId // org.ton.lite.api.liteserver/LiteServerAccountId.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerAccountId) // org.ton.lite.api.liteserver/LiteServerAccountId.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerAccountId){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver/LiteServerAccountId> // org.ton.lite.api.liteserver/LiteServerAccountId.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver/LiteServerAccountState { // org.ton.lite.api.liteserver/LiteServerAccountState|null[0]
    constructor <init>(org.ton.api.tonnode/TonNodeBlockIdExt, org.ton.api.tonnode/TonNodeBlockIdExt, kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString) // org.ton.lite.api.liteserver/LiteServerAccountState.<init>|<init>(org.ton.api.tonnode.TonNodeBlockIdExt;org.ton.api.tonnode.TonNodeBlockIdExt;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]

    final val id // org.ton.lite.api.liteserver/LiteServerAccountState.id|{}id[0]
        final fun <get-id>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerAccountState.id.<get-id>|<get-id>(){}[0]
    final val proof // org.ton.lite.api.liteserver/LiteServerAccountState.proof|{}proof[0]
        final fun <get-proof>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerAccountState.proof.<get-proof>|<get-proof>(){}[0]
    final val shardBlock // org.ton.lite.api.liteserver/LiteServerAccountState.shardBlock|{}shardBlock[0]
        final fun <get-shardBlock>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerAccountState.shardBlock.<get-shardBlock>|<get-shardBlock>(){}[0]
    final val shardProof // org.ton.lite.api.liteserver/LiteServerAccountState.shardProof|{}shardProof[0]
        final fun <get-shardProof>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerAccountState.shardProof.<get-shardProof>|<get-shardProof>(){}[0]
    final val state // org.ton.lite.api.liteserver/LiteServerAccountState.state|{}state[0]
        final fun <get-state>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerAccountState.state.<get-state>|<get-state>(){}[0]

    final fun component1(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerAccountState.component1|component1(){}[0]
    final fun component2(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerAccountState.component2|component2(){}[0]
    final fun component3(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerAccountState.component3|component3(){}[0]
    final fun component4(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerAccountState.component4|component4(){}[0]
    final fun component5(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerAccountState.component5|component5(){}[0]
    final fun copy(org.ton.api.tonnode/TonNodeBlockIdExt = ..., org.ton.api.tonnode/TonNodeBlockIdExt = ..., kotlinx.io.bytestring/ByteString = ..., kotlinx.io.bytestring/ByteString = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.lite.api.liteserver/LiteServerAccountState // org.ton.lite.api.liteserver/LiteServerAccountState.copy|copy(org.ton.api.tonnode.TonNodeBlockIdExt;org.ton.api.tonnode.TonNodeBlockIdExt;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerAccountState.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerAccountState.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver/LiteServerAccountState.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver/LiteServerAccountState> { // org.ton.lite.api.liteserver/LiteServerAccountState.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver/LiteServerAccountState.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver/LiteServerAccountState.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver/LiteServerAccountState.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver/LiteServerAccountState // org.ton.lite.api.liteserver/LiteServerAccountState.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver/LiteServerAccountState) // org.ton.lite.api.liteserver/LiteServerAccountState.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.LiteServerAccountState){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.lite.api.liteserver/LiteServerAccountState> { // org.ton.lite.api.liteserver/LiteServerAccountState.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerAccountState // org.ton.lite.api.liteserver/LiteServerAccountState.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerAccountState) // org.ton.lite.api.liteserver/LiteServerAccountState.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerAccountState){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver/LiteServerAccountState> // org.ton.lite.api.liteserver/LiteServerAccountState.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver/LiteServerAllShardsInfo { // org.ton.lite.api.liteserver/LiteServerAllShardsInfo|null[0]
    constructor <init>(org.ton.api.tonnode/TonNodeBlockIdExt, kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString) // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.<init>|<init>(org.ton.api.tonnode.TonNodeBlockIdExt;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]

    final val data // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.data|{}data[0]
        final fun <get-data>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.data.<get-data>|<get-data>(){}[0]
    final val id // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.id|{}id[0]
        final fun <get-id>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.id.<get-id>|<get-id>(){}[0]
    final val proof // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.proof|{}proof[0]
        final fun <get-proof>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.proof.<get-proof>|<get-proof>(){}[0]

    final fun component1(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.component1|component1(){}[0]
    final fun component2(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.component2|component2(){}[0]
    final fun component3(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.component3|component3(){}[0]
    final fun copy(org.ton.api.tonnode/TonNodeBlockIdExt = ..., kotlinx.io.bytestring/ByteString = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.lite.api.liteserver/LiteServerAllShardsInfo // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.copy|copy(org.ton.api.tonnode.TonNodeBlockIdExt;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver/LiteServerAllShardsInfo> { // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver/LiteServerAllShardsInfo // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver/LiteServerAllShardsInfo) // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.LiteServerAllShardsInfo){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerAllShardsInfo> { // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerAllShardsInfo // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerAllShardsInfo // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerAllShardsInfo // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerAllShardsInfo // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerAllShardsInfo // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerAllShardsInfo // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerAllShardsInfo // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerAllShardsInfo // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerAllShardsInfo) // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerAllShardsInfo){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerAllShardsInfo) // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerAllShardsInfo){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerAllShardsInfo) // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerAllShardsInfo){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerAllShardsInfo) // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerAllShardsInfo){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver/LiteServerAllShardsInfo, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.LiteServerAllShardsInfo;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver/LiteServerAllShardsInfo, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.LiteServerAllShardsInfo;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver/LiteServerAllShardsInfo): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.Companion.hash|hash(org.ton.lite.api.liteserver.LiteServerAllShardsInfo){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver/LiteServerAllShardsInfo> // org.ton.lite.api.liteserver/LiteServerAllShardsInfo.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver/LiteServerBlockData { // org.ton.lite.api.liteserver/LiteServerBlockData|null[0]
    constructor <init>(org.ton.api.tonnode/TonNodeBlockIdExt, kotlinx.io.bytestring/ByteString) // org.ton.lite.api.liteserver/LiteServerBlockData.<init>|<init>(org.ton.api.tonnode.TonNodeBlockIdExt;kotlinx.io.bytestring.ByteString){}[0]

    final val data // org.ton.lite.api.liteserver/LiteServerBlockData.data|{}data[0]
        final fun <get-data>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerBlockData.data.<get-data>|<get-data>(){}[0]
    final val id // org.ton.lite.api.liteserver/LiteServerBlockData.id|{}id[0]
        final fun <get-id>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerBlockData.id.<get-id>|<get-id>(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver/LiteServerBlockData> { // org.ton.lite.api.liteserver/LiteServerBlockData.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver/LiteServerBlockData.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver/LiteServerBlockData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver/LiteServerBlockData.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver/LiteServerBlockData // org.ton.lite.api.liteserver/LiteServerBlockData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver/LiteServerBlockData) // org.ton.lite.api.liteserver/LiteServerBlockData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.LiteServerBlockData){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.lite.api.liteserver/LiteServerBlockData> { // org.ton.lite.api.liteserver/LiteServerBlockData.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerBlockData // org.ton.lite.api.liteserver/LiteServerBlockData.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerBlockData) // org.ton.lite.api.liteserver/LiteServerBlockData.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerBlockData){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver/LiteServerBlockData> // org.ton.lite.api.liteserver/LiteServerBlockData.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver/LiteServerBlockHeader { // org.ton.lite.api.liteserver/LiteServerBlockHeader|null[0]
    constructor <init>(org.ton.api.tonnode/TonNodeBlockIdExt, kotlin/Int, kotlinx.io.bytestring/ByteString) // org.ton.lite.api.liteserver/LiteServerBlockHeader.<init>|<init>(org.ton.api.tonnode.TonNodeBlockIdExt;kotlin.Int;kotlinx.io.bytestring.ByteString){}[0]

    final val headerProof // org.ton.lite.api.liteserver/LiteServerBlockHeader.headerProof|{}headerProof[0]
        final fun <get-headerProof>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerBlockHeader.headerProof.<get-headerProof>|<get-headerProof>(){}[0]
    final val id // org.ton.lite.api.liteserver/LiteServerBlockHeader.id|{}id[0]
        final fun <get-id>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerBlockHeader.id.<get-id>|<get-id>(){}[0]
    final val mode // org.ton.lite.api.liteserver/LiteServerBlockHeader.mode|{}mode[0]
        final fun <get-mode>(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerBlockHeader.mode.<get-mode>|<get-mode>(){}[0]

    final fun component1(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerBlockHeader.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerBlockHeader.component2|component2(){}[0]
    final fun component3(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerBlockHeader.component3|component3(){}[0]
    final fun copy(org.ton.api.tonnode/TonNodeBlockIdExt = ..., kotlin/Int = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.lite.api.liteserver/LiteServerBlockHeader // org.ton.lite.api.liteserver/LiteServerBlockHeader.copy|copy(org.ton.api.tonnode.TonNodeBlockIdExt;kotlin.Int;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerBlockHeader.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerBlockHeader.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver/LiteServerBlockHeader.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver/LiteServerBlockHeader> { // org.ton.lite.api.liteserver/LiteServerBlockHeader.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver/LiteServerBlockHeader.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver/LiteServerBlockHeader.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver/LiteServerBlockHeader.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver/LiteServerBlockHeader // org.ton.lite.api.liteserver/LiteServerBlockHeader.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver/LiteServerBlockHeader) // org.ton.lite.api.liteserver/LiteServerBlockHeader.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.LiteServerBlockHeader){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerBlockHeader> { // org.ton.lite.api.liteserver/LiteServerBlockHeader.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerBlockHeader // org.ton.lite.api.liteserver/LiteServerBlockHeader.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerBlockHeader // org.ton.lite.api.liteserver/LiteServerBlockHeader.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerBlockHeader // org.ton.lite.api.liteserver/LiteServerBlockHeader.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerBlockHeader // org.ton.lite.api.liteserver/LiteServerBlockHeader.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerBlockHeader // org.ton.lite.api.liteserver/LiteServerBlockHeader.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerBlockHeader // org.ton.lite.api.liteserver/LiteServerBlockHeader.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerBlockHeader // org.ton.lite.api.liteserver/LiteServerBlockHeader.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerBlockHeader // org.ton.lite.api.liteserver/LiteServerBlockHeader.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerBlockHeader) // org.ton.lite.api.liteserver/LiteServerBlockHeader.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerBlockHeader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerBlockHeader) // org.ton.lite.api.liteserver/LiteServerBlockHeader.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerBlockHeader){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerBlockHeader) // org.ton.lite.api.liteserver/LiteServerBlockHeader.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerBlockHeader){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerBlockHeader) // org.ton.lite.api.liteserver/LiteServerBlockHeader.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerBlockHeader){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver/LiteServerBlockHeader, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerBlockHeader.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.LiteServerBlockHeader;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver/LiteServerBlockHeader, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerBlockHeader.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.LiteServerBlockHeader;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver/LiteServerBlockHeader): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerBlockHeader.Companion.hash|hash(org.ton.lite.api.liteserver.LiteServerBlockHeader){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver/LiteServerBlockHeader> // org.ton.lite.api.liteserver/LiteServerBlockHeader.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver/LiteServerBlockLinkBack : org.ton.lite.api.liteserver/LiteServerBlockLink { // org.ton.lite.api.liteserver/LiteServerBlockLinkBack|null[0]
    constructor <init>(kotlin/Boolean, org.ton.api.tonnode/TonNodeBlockIdExt, org.ton.api.tonnode/TonNodeBlockIdExt, kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString) // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.<init>|<init>(kotlin.Boolean;org.ton.api.tonnode.TonNodeBlockIdExt;org.ton.api.tonnode.TonNodeBlockIdExt;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]

    final val destProof // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.destProof|{}destProof[0]
        final fun <get-destProof>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.destProof.<get-destProof>|<get-destProof>(){}[0]
    final val from // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.from|{}from[0]
        final fun <get-from>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.from.<get-from>|<get-from>(){}[0]
    final val proof // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.proof|{}proof[0]
        final fun <get-proof>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.proof.<get-proof>|<get-proof>(){}[0]
    final val stateProof // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.stateProof|{}stateProof[0]
        final fun <get-stateProof>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.stateProof.<get-stateProof>|<get-stateProof>(){}[0]
    final val to // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.to|{}to[0]
        final fun <get-to>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.to.<get-to>|<get-to>(){}[0]
    final val toKeyBlock // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.toKeyBlock|{}toKeyBlock[0]
        final fun <get-toKeyBlock>(): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.toKeyBlock.<get-toKeyBlock>|<get-toKeyBlock>(){}[0]

    final fun component1(): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.component1|component1(){}[0]
    final fun component2(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.component2|component2(){}[0]
    final fun component3(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.component3|component3(){}[0]
    final fun component4(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.component4|component4(){}[0]
    final fun component5(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.component5|component5(){}[0]
    final fun component6(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.component6|component6(){}[0]
    final fun copy(kotlin/Boolean = ..., org.ton.api.tonnode/TonNodeBlockIdExt = ..., org.ton.api.tonnode/TonNodeBlockIdExt = ..., kotlinx.io.bytestring/ByteString = ..., kotlinx.io.bytestring/ByteString = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.lite.api.liteserver/LiteServerBlockLinkBack // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.copy|copy(kotlin.Boolean;org.ton.api.tonnode.TonNodeBlockIdExt;org.ton.api.tonnode.TonNodeBlockIdExt;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver/LiteServerBlockLinkBack> { // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver/LiteServerBlockLinkBack // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver/LiteServerBlockLinkBack) // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.LiteServerBlockLinkBack){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerBlockLinkBack> { // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerBlockLinkBack // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerBlockLinkBack // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerBlockLinkBack // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerBlockLinkBack // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerBlockLinkBack // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerBlockLinkBack // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerBlockLinkBack // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerBlockLinkBack // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerBlockLinkBack) // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerBlockLinkBack){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerBlockLinkBack) // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerBlockLinkBack){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerBlockLinkBack) // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerBlockLinkBack){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerBlockLinkBack) // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerBlockLinkBack){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver/LiteServerBlockLinkBack, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.LiteServerBlockLinkBack;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver/LiteServerBlockLinkBack, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.LiteServerBlockLinkBack;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver/LiteServerBlockLinkBack): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.Companion.hash|hash(org.ton.lite.api.liteserver.LiteServerBlockLinkBack){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver/LiteServerBlockLinkBack> // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.Companion.serializer|serializer(){}[0]
        final fun tlConstructor(): org.ton.tl/TlConstructor<org.ton.lite.api.liteserver/LiteServerBlockLinkBack> // org.ton.lite.api.liteserver/LiteServerBlockLinkBack.Companion.tlConstructor|tlConstructor(){}[0]
    }
}

final class org.ton.lite.api.liteserver/LiteServerBlockLinkForward : org.ton.lite.api.liteserver/LiteServerBlockLink { // org.ton.lite.api.liteserver/LiteServerBlockLinkForward|null[0]
    constructor <init>(kotlin/Boolean, org.ton.api.tonnode/TonNodeBlockIdExt, org.ton.api.tonnode/TonNodeBlockIdExt, kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString, org.ton.lite.api.liteserver/LiteServerSignatureSet) // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.<init>|<init>(kotlin.Boolean;org.ton.api.tonnode.TonNodeBlockIdExt;org.ton.api.tonnode.TonNodeBlockIdExt;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString;org.ton.lite.api.liteserver.LiteServerSignatureSet){}[0]

    final val configProof // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.configProof|{}configProof[0]
        final fun <get-configProof>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.configProof.<get-configProof>|<get-configProof>(){}[0]
    final val destProof // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.destProof|{}destProof[0]
        final fun <get-destProof>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.destProof.<get-destProof>|<get-destProof>(){}[0]
    final val from // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.from|{}from[0]
        final fun <get-from>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.from.<get-from>|<get-from>(){}[0]
    final val signatures // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.signatures|{}signatures[0]
        final fun <get-signatures>(): org.ton.lite.api.liteserver/LiteServerSignatureSet // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.signatures.<get-signatures>|<get-signatures>(){}[0]
    final val to // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.to|{}to[0]
        final fun <get-to>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.to.<get-to>|<get-to>(){}[0]
    final val toKeyBlock // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.toKeyBlock|{}toKeyBlock[0]
        final fun <get-toKeyBlock>(): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.toKeyBlock.<get-toKeyBlock>|<get-toKeyBlock>(){}[0]

    final fun component1(): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.component1|component1(){}[0]
    final fun component2(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.component2|component2(){}[0]
    final fun component3(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.component3|component3(){}[0]
    final fun component4(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.component4|component4(){}[0]
    final fun component5(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.component5|component5(){}[0]
    final fun component6(): org.ton.lite.api.liteserver/LiteServerSignatureSet // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.component6|component6(){}[0]
    final fun copy(kotlin/Boolean = ..., org.ton.api.tonnode/TonNodeBlockIdExt = ..., org.ton.api.tonnode/TonNodeBlockIdExt = ..., kotlinx.io.bytestring/ByteString = ..., kotlinx.io.bytestring/ByteString = ..., org.ton.lite.api.liteserver/LiteServerSignatureSet = ...): org.ton.lite.api.liteserver/LiteServerBlockLinkForward // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.copy|copy(kotlin.Boolean;org.ton.api.tonnode.TonNodeBlockIdExt;org.ton.api.tonnode.TonNodeBlockIdExt;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString;org.ton.lite.api.liteserver.LiteServerSignatureSet){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver/LiteServerBlockLinkForward> { // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver/LiteServerBlockLinkForward // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver/LiteServerBlockLinkForward) // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.LiteServerBlockLinkForward){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerBlockLinkForward> { // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerBlockLinkForward // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerBlockLinkForward // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerBlockLinkForward // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerBlockLinkForward // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerBlockLinkForward // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerBlockLinkForward // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerBlockLinkForward // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerBlockLinkForward // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerBlockLinkForward) // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerBlockLinkForward){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerBlockLinkForward) // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerBlockLinkForward){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerBlockLinkForward) // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerBlockLinkForward){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerBlockLinkForward) // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerBlockLinkForward){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver/LiteServerBlockLinkForward, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.LiteServerBlockLinkForward;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver/LiteServerBlockLinkForward, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.LiteServerBlockLinkForward;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver/LiteServerBlockLinkForward): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.Companion.hash|hash(org.ton.lite.api.liteserver.LiteServerBlockLinkForward){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver/LiteServerBlockLinkForward> // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.Companion.serializer|serializer(){}[0]
        final fun tlConstructor(): org.ton.tl/TlConstructor<org.ton.lite.api.liteserver/LiteServerBlockLinkForward> // org.ton.lite.api.liteserver/LiteServerBlockLinkForward.Companion.tlConstructor|tlConstructor(){}[0]
    }
}

final class org.ton.lite.api.liteserver/LiteServerBlockState { // org.ton.lite.api.liteserver/LiteServerBlockState|null[0]
    constructor <init>(org.ton.api.tonnode/TonNodeBlockIdExt, kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString) // org.ton.lite.api.liteserver/LiteServerBlockState.<init>|<init>(org.ton.api.tonnode.TonNodeBlockIdExt;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]

    final val data // org.ton.lite.api.liteserver/LiteServerBlockState.data|{}data[0]
        final fun <get-data>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerBlockState.data.<get-data>|<get-data>(){}[0]
    final val fileHash // org.ton.lite.api.liteserver/LiteServerBlockState.fileHash|{}fileHash[0]
        final fun <get-fileHash>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerBlockState.fileHash.<get-fileHash>|<get-fileHash>(){}[0]
    final val id // org.ton.lite.api.liteserver/LiteServerBlockState.id|{}id[0]
        final fun <get-id>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerBlockState.id.<get-id>|<get-id>(){}[0]
    final val rootHash // org.ton.lite.api.liteserver/LiteServerBlockState.rootHash|{}rootHash[0]
        final fun <get-rootHash>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerBlockState.rootHash.<get-rootHash>|<get-rootHash>(){}[0]

    final fun component1(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerBlockState.component1|component1(){}[0]
    final fun component2(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerBlockState.component2|component2(){}[0]
    final fun component3(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerBlockState.component3|component3(){}[0]
    final fun component4(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerBlockState.component4|component4(){}[0]
    final fun copy(org.ton.api.tonnode/TonNodeBlockIdExt = ..., kotlinx.io.bytestring/ByteString = ..., kotlinx.io.bytestring/ByteString = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.lite.api.liteserver/LiteServerBlockState // org.ton.lite.api.liteserver/LiteServerBlockState.copy|copy(org.ton.api.tonnode.TonNodeBlockIdExt;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerBlockState.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerBlockState.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver/LiteServerBlockState.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver/LiteServerBlockState> { // org.ton.lite.api.liteserver/LiteServerBlockState.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver/LiteServerBlockState.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver/LiteServerBlockState.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver/LiteServerBlockState.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver/LiteServerBlockState // org.ton.lite.api.liteserver/LiteServerBlockState.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver/LiteServerBlockState) // org.ton.lite.api.liteserver/LiteServerBlockState.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.LiteServerBlockState){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerBlockState> { // org.ton.lite.api.liteserver/LiteServerBlockState.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerBlockState // org.ton.lite.api.liteserver/LiteServerBlockState.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerBlockState // org.ton.lite.api.liteserver/LiteServerBlockState.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerBlockState // org.ton.lite.api.liteserver/LiteServerBlockState.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerBlockState // org.ton.lite.api.liteserver/LiteServerBlockState.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerBlockState // org.ton.lite.api.liteserver/LiteServerBlockState.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerBlockState // org.ton.lite.api.liteserver/LiteServerBlockState.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerBlockState // org.ton.lite.api.liteserver/LiteServerBlockState.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerBlockState // org.ton.lite.api.liteserver/LiteServerBlockState.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerBlockState) // org.ton.lite.api.liteserver/LiteServerBlockState.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerBlockState){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerBlockState) // org.ton.lite.api.liteserver/LiteServerBlockState.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerBlockState){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerBlockState) // org.ton.lite.api.liteserver/LiteServerBlockState.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerBlockState){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerBlockState) // org.ton.lite.api.liteserver/LiteServerBlockState.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerBlockState){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver/LiteServerBlockState, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerBlockState.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.LiteServerBlockState;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver/LiteServerBlockState, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerBlockState.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.LiteServerBlockState;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver/LiteServerBlockState): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerBlockState.Companion.hash|hash(org.ton.lite.api.liteserver.LiteServerBlockState){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver/LiteServerBlockState> // org.ton.lite.api.liteserver/LiteServerBlockState.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver/LiteServerBlockTransactions { // org.ton.lite.api.liteserver/LiteServerBlockTransactions|null[0]
    constructor <init>(org.ton.api.tonnode/TonNodeBlockIdExt, kotlin/Int, kotlin/Boolean, kotlin.collections/List<org.ton.lite.api.liteserver/LiteServerTransactionId>, kotlinx.io.bytestring/ByteString) // org.ton.lite.api.liteserver/LiteServerBlockTransactions.<init>|<init>(org.ton.api.tonnode.TonNodeBlockIdExt;kotlin.Int;kotlin.Boolean;kotlin.collections.List<org.ton.lite.api.liteserver.LiteServerTransactionId>;kotlinx.io.bytestring.ByteString){}[0]

    final val id // org.ton.lite.api.liteserver/LiteServerBlockTransactions.id|{}id[0]
        final fun <get-id>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerBlockTransactions.id.<get-id>|<get-id>(){}[0]
    final val ids // org.ton.lite.api.liteserver/LiteServerBlockTransactions.ids|{}ids[0]
        final fun <get-ids>(): kotlin.collections/List<org.ton.lite.api.liteserver/LiteServerTransactionId> // org.ton.lite.api.liteserver/LiteServerBlockTransactions.ids.<get-ids>|<get-ids>(){}[0]
    final val incomplete // org.ton.lite.api.liteserver/LiteServerBlockTransactions.incomplete|{}incomplete[0]
        final fun <get-incomplete>(): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerBlockTransactions.incomplete.<get-incomplete>|<get-incomplete>(){}[0]
    final val proof // org.ton.lite.api.liteserver/LiteServerBlockTransactions.proof|{}proof[0]
        final fun <get-proof>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerBlockTransactions.proof.<get-proof>|<get-proof>(){}[0]
    final val reqCount // org.ton.lite.api.liteserver/LiteServerBlockTransactions.reqCount|{}reqCount[0]
        final fun <get-reqCount>(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerBlockTransactions.reqCount.<get-reqCount>|<get-reqCount>(){}[0]

    final fun component1(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerBlockTransactions.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerBlockTransactions.component2|component2(){}[0]
    final fun component3(): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerBlockTransactions.component3|component3(){}[0]
    final fun component4(): kotlin.collections/List<org.ton.lite.api.liteserver/LiteServerTransactionId> // org.ton.lite.api.liteserver/LiteServerBlockTransactions.component4|component4(){}[0]
    final fun component5(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerBlockTransactions.component5|component5(){}[0]
    final fun copy(org.ton.api.tonnode/TonNodeBlockIdExt = ..., kotlin/Int = ..., kotlin/Boolean = ..., kotlin.collections/List<org.ton.lite.api.liteserver/LiteServerTransactionId> = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.lite.api.liteserver/LiteServerBlockTransactions // org.ton.lite.api.liteserver/LiteServerBlockTransactions.copy|copy(org.ton.api.tonnode.TonNodeBlockIdExt;kotlin.Int;kotlin.Boolean;kotlin.collections.List<org.ton.lite.api.liteserver.LiteServerTransactionId>;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerBlockTransactions.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerBlockTransactions.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver/LiteServerBlockTransactions.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver/LiteServerBlockTransactions> { // org.ton.lite.api.liteserver/LiteServerBlockTransactions.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver/LiteServerBlockTransactions.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver/LiteServerBlockTransactions.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver/LiteServerBlockTransactions.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver/LiteServerBlockTransactions // org.ton.lite.api.liteserver/LiteServerBlockTransactions.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver/LiteServerBlockTransactions) // org.ton.lite.api.liteserver/LiteServerBlockTransactions.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.LiteServerBlockTransactions){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerBlockTransactions> { // org.ton.lite.api.liteserver/LiteServerBlockTransactions.Companion|null[0]
        final val $childSerializers // org.ton.lite.api.liteserver/LiteServerBlockTransactions.Companion.$childSerializers|{}$childSerializers[0]

        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerBlockTransactions // org.ton.lite.api.liteserver/LiteServerBlockTransactions.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerBlockTransactions // org.ton.lite.api.liteserver/LiteServerBlockTransactions.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerBlockTransactions // org.ton.lite.api.liteserver/LiteServerBlockTransactions.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerBlockTransactions // org.ton.lite.api.liteserver/LiteServerBlockTransactions.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerBlockTransactions // org.ton.lite.api.liteserver/LiteServerBlockTransactions.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerBlockTransactions // org.ton.lite.api.liteserver/LiteServerBlockTransactions.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerBlockTransactions // org.ton.lite.api.liteserver/LiteServerBlockTransactions.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerBlockTransactions // org.ton.lite.api.liteserver/LiteServerBlockTransactions.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerBlockTransactions) // org.ton.lite.api.liteserver/LiteServerBlockTransactions.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerBlockTransactions){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerBlockTransactions) // org.ton.lite.api.liteserver/LiteServerBlockTransactions.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerBlockTransactions){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerBlockTransactions) // org.ton.lite.api.liteserver/LiteServerBlockTransactions.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerBlockTransactions){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerBlockTransactions) // org.ton.lite.api.liteserver/LiteServerBlockTransactions.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerBlockTransactions){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver/LiteServerBlockTransactions, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerBlockTransactions.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.LiteServerBlockTransactions;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver/LiteServerBlockTransactions, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerBlockTransactions.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.LiteServerBlockTransactions;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver/LiteServerBlockTransactions): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerBlockTransactions.Companion.hash|hash(org.ton.lite.api.liteserver.LiteServerBlockTransactions){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver/LiteServerBlockTransactions> // org.ton.lite.api.liteserver/LiteServerBlockTransactions.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver/LiteServerConfigInfo { // org.ton.lite.api.liteserver/LiteServerConfigInfo|null[0]
    constructor <init>(kotlin/Int, org.ton.api.tonnode/TonNodeBlockIdExt, kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString) // org.ton.lite.api.liteserver/LiteServerConfigInfo.<init>|<init>(kotlin.Int;org.ton.api.tonnode.TonNodeBlockIdExt;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]

    final val configProof // org.ton.lite.api.liteserver/LiteServerConfigInfo.configProof|{}configProof[0]
        final fun <get-configProof>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerConfigInfo.configProof.<get-configProof>|<get-configProof>(){}[0]
    final val id // org.ton.lite.api.liteserver/LiteServerConfigInfo.id|{}id[0]
        final fun <get-id>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerConfigInfo.id.<get-id>|<get-id>(){}[0]
    final val mode // org.ton.lite.api.liteserver/LiteServerConfigInfo.mode|{}mode[0]
        final fun <get-mode>(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerConfigInfo.mode.<get-mode>|<get-mode>(){}[0]
    final val stateProof // org.ton.lite.api.liteserver/LiteServerConfigInfo.stateProof|{}stateProof[0]
        final fun <get-stateProof>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerConfigInfo.stateProof.<get-stateProof>|<get-stateProof>(){}[0]

    final fun component1(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerConfigInfo.component1|component1(){}[0]
    final fun component2(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerConfigInfo.component2|component2(){}[0]
    final fun component3(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerConfigInfo.component3|component3(){}[0]
    final fun component4(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerConfigInfo.component4|component4(){}[0]
    final fun copy(kotlin/Int = ..., org.ton.api.tonnode/TonNodeBlockIdExt = ..., kotlinx.io.bytestring/ByteString = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.lite.api.liteserver/LiteServerConfigInfo // org.ton.lite.api.liteserver/LiteServerConfigInfo.copy|copy(kotlin.Int;org.ton.api.tonnode.TonNodeBlockIdExt;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerConfigInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerConfigInfo.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver/LiteServerConfigInfo.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver/LiteServerConfigInfo> { // org.ton.lite.api.liteserver/LiteServerConfigInfo.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver/LiteServerConfigInfo.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver/LiteServerConfigInfo.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver/LiteServerConfigInfo.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver/LiteServerConfigInfo // org.ton.lite.api.liteserver/LiteServerConfigInfo.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver/LiteServerConfigInfo) // org.ton.lite.api.liteserver/LiteServerConfigInfo.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.LiteServerConfigInfo){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerConfigInfo> { // org.ton.lite.api.liteserver/LiteServerConfigInfo.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerConfigInfo // org.ton.lite.api.liteserver/LiteServerConfigInfo.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerConfigInfo // org.ton.lite.api.liteserver/LiteServerConfigInfo.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerConfigInfo // org.ton.lite.api.liteserver/LiteServerConfigInfo.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerConfigInfo // org.ton.lite.api.liteserver/LiteServerConfigInfo.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerConfigInfo // org.ton.lite.api.liteserver/LiteServerConfigInfo.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerConfigInfo // org.ton.lite.api.liteserver/LiteServerConfigInfo.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerConfigInfo // org.ton.lite.api.liteserver/LiteServerConfigInfo.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerConfigInfo // org.ton.lite.api.liteserver/LiteServerConfigInfo.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerConfigInfo) // org.ton.lite.api.liteserver/LiteServerConfigInfo.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerConfigInfo){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerConfigInfo) // org.ton.lite.api.liteserver/LiteServerConfigInfo.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerConfigInfo){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerConfigInfo) // org.ton.lite.api.liteserver/LiteServerConfigInfo.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerConfigInfo){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerConfigInfo) // org.ton.lite.api.liteserver/LiteServerConfigInfo.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerConfigInfo){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver/LiteServerConfigInfo, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerConfigInfo.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.LiteServerConfigInfo;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver/LiteServerConfigInfo, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerConfigInfo.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.LiteServerConfigInfo;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver/LiteServerConfigInfo): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerConfigInfo.Companion.hash|hash(org.ton.lite.api.liteserver.LiteServerConfigInfo){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver/LiteServerConfigInfo> // org.ton.lite.api.liteserver/LiteServerConfigInfo.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver/LiteServerCurrentTime { // org.ton.lite.api.liteserver/LiteServerCurrentTime|null[0]
    constructor <init>(kotlin/Int) // org.ton.lite.api.liteserver/LiteServerCurrentTime.<init>|<init>(kotlin.Int){}[0]

    final val now // org.ton.lite.api.liteserver/LiteServerCurrentTime.now|{}now[0]
        final fun <get-now>(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerCurrentTime.now.<get-now>|<get-now>(){}[0]

    final fun component1(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerCurrentTime.component1|component1(){}[0]
    final fun copy(kotlin/Int = ...): org.ton.lite.api.liteserver/LiteServerCurrentTime // org.ton.lite.api.liteserver/LiteServerCurrentTime.copy|copy(kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerCurrentTime.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerCurrentTime.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver/LiteServerCurrentTime.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver/LiteServerCurrentTime> { // org.ton.lite.api.liteserver/LiteServerCurrentTime.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver/LiteServerCurrentTime.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver/LiteServerCurrentTime.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver/LiteServerCurrentTime.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver/LiteServerCurrentTime // org.ton.lite.api.liteserver/LiteServerCurrentTime.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver/LiteServerCurrentTime) // org.ton.lite.api.liteserver/LiteServerCurrentTime.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.LiteServerCurrentTime){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.lite.api.liteserver/LiteServerCurrentTime> { // org.ton.lite.api.liteserver/LiteServerCurrentTime.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerCurrentTime // org.ton.lite.api.liteserver/LiteServerCurrentTime.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerCurrentTime) // org.ton.lite.api.liteserver/LiteServerCurrentTime.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerCurrentTime){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver/LiteServerCurrentTime> // org.ton.lite.api.liteserver/LiteServerCurrentTime.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver/LiteServerDebugVerbosity { // org.ton.lite.api.liteserver/LiteServerDebugVerbosity|null[0]
    constructor <init>(kotlin/Int) // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.<init>|<init>(kotlin.Int){}[0]

    final val value // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.value|{}value[0]
        final fun <get-value>(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.value.<get-value>|<get-value>(){}[0]

    final fun component1(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.component1|component1(){}[0]
    final fun copy(kotlin/Int = ...): org.ton.lite.api.liteserver/LiteServerDebugVerbosity // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.copy|copy(kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver/LiteServerDebugVerbosity> { // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver/LiteServerDebugVerbosity // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver/LiteServerDebugVerbosity) // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.LiteServerDebugVerbosity){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerDebugVerbosity> { // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerDebugVerbosity // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerDebugVerbosity // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerDebugVerbosity // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerDebugVerbosity // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerDebugVerbosity // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerDebugVerbosity // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerDebugVerbosity // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerDebugVerbosity // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerDebugVerbosity) // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerDebugVerbosity){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerDebugVerbosity) // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerDebugVerbosity){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerDebugVerbosity) // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerDebugVerbosity){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerDebugVerbosity) // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerDebugVerbosity){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver/LiteServerDebugVerbosity, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.LiteServerDebugVerbosity;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver/LiteServerDebugVerbosity, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.LiteServerDebugVerbosity;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver/LiteServerDebugVerbosity): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.Companion.hash|hash(org.ton.lite.api.liteserver.LiteServerDebugVerbosity){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver/LiteServerDebugVerbosity> // org.ton.lite.api.liteserver/LiteServerDebugVerbosity.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver/LiteServerError { // org.ton.lite.api.liteserver/LiteServerError|null[0]
    constructor <init>(kotlin/Int, kotlin/String) // org.ton.lite.api.liteserver/LiteServerError.<init>|<init>(kotlin.Int;kotlin.String){}[0]

    final val code // org.ton.lite.api.liteserver/LiteServerError.code|{}code[0]
        final fun <get-code>(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerError.code.<get-code>|<get-code>(){}[0]
    final val message // org.ton.lite.api.liteserver/LiteServerError.message|{}message[0]
        final fun <get-message>(): kotlin/String // org.ton.lite.api.liteserver/LiteServerError.message.<get-message>|<get-message>(){}[0]

    final fun component1(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerError.component1|component1(){}[0]
    final fun component2(): kotlin/String // org.ton.lite.api.liteserver/LiteServerError.component2|component2(){}[0]
    final fun copy(kotlin/Int = ..., kotlin/String = ...): org.ton.lite.api.liteserver/LiteServerError // org.ton.lite.api.liteserver/LiteServerError.copy|copy(kotlin.Int;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerError.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerError.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver/LiteServerError.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver/LiteServerError> { // org.ton.lite.api.liteserver/LiteServerError.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver/LiteServerError.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver/LiteServerError.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver/LiteServerError.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver/LiteServerError // org.ton.lite.api.liteserver/LiteServerError.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver/LiteServerError) // org.ton.lite.api.liteserver/LiteServerError.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.LiteServerError){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.lite.api.liteserver/LiteServerError> { // org.ton.lite.api.liteserver/LiteServerError.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerError // org.ton.lite.api.liteserver/LiteServerError.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerError) // org.ton.lite.api.liteserver/LiteServerError.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerError){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver/LiteServerError> // org.ton.lite.api.liteserver/LiteServerError.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver/LiteServerMasterchainInfo { // org.ton.lite.api.liteserver/LiteServerMasterchainInfo|null[0]
    constructor <init>(org.ton.api.tonnode/TonNodeBlockIdExt, kotlinx.io.bytestring/ByteString, org.ton.api.tonnode/TonNodeZeroStateIdExt) // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.<init>|<init>(org.ton.api.tonnode.TonNodeBlockIdExt;kotlinx.io.bytestring.ByteString;org.ton.api.tonnode.TonNodeZeroStateIdExt){}[0]

    final val init // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.init|{}init[0]
        final fun <get-init>(): org.ton.api.tonnode/TonNodeZeroStateIdExt // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.init.<get-init>|<get-init>(){}[0]
    final val last // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.last|{}last[0]
        final fun <get-last>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.last.<get-last>|<get-last>(){}[0]
    final val stateRootHash // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.stateRootHash|{}stateRootHash[0]
        final fun <get-stateRootHash>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.stateRootHash.<get-stateRootHash>|<get-stateRootHash>(){}[0]

    final fun component1(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.component1|component1(){}[0]
    final fun component2(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.component2|component2(){}[0]
    final fun component3(): org.ton.api.tonnode/TonNodeZeroStateIdExt // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.component3|component3(){}[0]
    final fun copy(org.ton.api.tonnode/TonNodeBlockIdExt = ..., kotlinx.io.bytestring/ByteString = ..., org.ton.api.tonnode/TonNodeZeroStateIdExt = ...): org.ton.lite.api.liteserver/LiteServerMasterchainInfo // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.copy|copy(org.ton.api.tonnode.TonNodeBlockIdExt;kotlinx.io.bytestring.ByteString;org.ton.api.tonnode.TonNodeZeroStateIdExt){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver/LiteServerMasterchainInfo> { // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver/LiteServerMasterchainInfo // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver/LiteServerMasterchainInfo) // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.LiteServerMasterchainInfo){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerMasterchainInfo> { // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerMasterchainInfo // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerMasterchainInfo // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerMasterchainInfo // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerMasterchainInfo // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerMasterchainInfo // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerMasterchainInfo // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerMasterchainInfo // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerMasterchainInfo // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerMasterchainInfo) // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerMasterchainInfo){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerMasterchainInfo) // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerMasterchainInfo){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerMasterchainInfo) // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerMasterchainInfo){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerMasterchainInfo) // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerMasterchainInfo){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver/LiteServerMasterchainInfo, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.LiteServerMasterchainInfo;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver/LiteServerMasterchainInfo, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.LiteServerMasterchainInfo;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver/LiteServerMasterchainInfo): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.Companion.hash|hash(org.ton.lite.api.liteserver.LiteServerMasterchainInfo){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver/LiteServerMasterchainInfo> // org.ton.lite.api.liteserver/LiteServerMasterchainInfo.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt { // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt|null[0]
    constructor <init>(kotlin/Int, kotlin/Int, kotlin/Long, org.ton.api.tonnode/TonNodeBlockIdExt, kotlin/Int, kotlin/Int, kotlinx.io.bytestring/ByteString, org.ton.api.tonnode/TonNodeZeroStateIdExt) // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.<init>|<init>(kotlin.Int;kotlin.Int;kotlin.Long;org.ton.api.tonnode.TonNodeBlockIdExt;kotlin.Int;kotlin.Int;kotlinx.io.bytestring.ByteString;org.ton.api.tonnode.TonNodeZeroStateIdExt){}[0]

    final val capabilities // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.capabilities|{}capabilities[0]
        final fun <get-capabilities>(): kotlin/Long // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.capabilities.<get-capabilities>|<get-capabilities>(){}[0]
    final val init // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.init|{}init[0]
        final fun <get-init>(): org.ton.api.tonnode/TonNodeZeroStateIdExt // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.init.<get-init>|<get-init>(){}[0]
    final val last // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.last|{}last[0]
        final fun <get-last>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.last.<get-last>|<get-last>(){}[0]
    final val lastUTime // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.lastUTime|{}lastUTime[0]
        final fun <get-lastUTime>(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.lastUTime.<get-lastUTime>|<get-lastUTime>(){}[0]
    final val mode // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.mode|{}mode[0]
        final fun <get-mode>(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.mode.<get-mode>|<get-mode>(){}[0]
    final val now // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.now|{}now[0]
        final fun <get-now>(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.now.<get-now>|<get-now>(){}[0]
    final val stateRootHash // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.stateRootHash|{}stateRootHash[0]
        final fun <get-stateRootHash>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.stateRootHash.<get-stateRootHash>|<get-stateRootHash>(){}[0]
    final val version // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.version|{}version[0]
        final fun <get-version>(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.version.<get-version>|<get-version>(){}[0]

    final fun component1(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.component2|component2(){}[0]
    final fun component3(): kotlin/Long // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.component3|component3(){}[0]
    final fun component4(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.component4|component4(){}[0]
    final fun component5(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.component5|component5(){}[0]
    final fun component6(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.component6|component6(){}[0]
    final fun component7(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.component7|component7(){}[0]
    final fun component8(): org.ton.api.tonnode/TonNodeZeroStateIdExt // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.component8|component8(){}[0]
    final fun copy(kotlin/Int = ..., kotlin/Int = ..., kotlin/Long = ..., org.ton.api.tonnode/TonNodeBlockIdExt = ..., kotlin/Int = ..., kotlin/Int = ..., kotlinx.io.bytestring/ByteString = ..., org.ton.api.tonnode/TonNodeZeroStateIdExt = ...): org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.copy|copy(kotlin.Int;kotlin.Int;kotlin.Long;org.ton.api.tonnode.TonNodeBlockIdExt;kotlin.Int;kotlin.Int;kotlinx.io.bytestring.ByteString;org.ton.api.tonnode.TonNodeZeroStateIdExt){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt> { // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt) // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.LiteServerMasterchainInfoExt){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt> { // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt) // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerMasterchainInfoExt){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt> // org.ton.lite.api.liteserver/LiteServerMasterchainInfoExt.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver/LiteServerPartialBlockProof { // org.ton.lite.api.liteserver/LiteServerPartialBlockProof|null[0]
    constructor <init>(kotlin/Boolean, org.ton.api.tonnode/TonNodeBlockIdExt, org.ton.api.tonnode/TonNodeBlockIdExt, kotlin.collections/List<org.ton.lite.api.liteserver/LiteServerBlockLink>) // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.<init>|<init>(kotlin.Boolean;org.ton.api.tonnode.TonNodeBlockIdExt;org.ton.api.tonnode.TonNodeBlockIdExt;kotlin.collections.List<org.ton.lite.api.liteserver.LiteServerBlockLink>){}[0]

    final val complete // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.complete|{}complete[0]
        final fun <get-complete>(): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.complete.<get-complete>|<get-complete>(){}[0]
    final val from // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.from|{}from[0]
        final fun <get-from>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.from.<get-from>|<get-from>(){}[0]
    final val steps // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.steps|{}steps[0]
        final fun <get-steps>(): kotlin.collections/List<org.ton.lite.api.liteserver/LiteServerBlockLink> // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.steps.<get-steps>|<get-steps>(){}[0]
    final val to // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.to|{}to[0]
        final fun <get-to>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.to.<get-to>|<get-to>(){}[0]

    final fun component1(): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.component1|component1(){}[0]
    final fun component2(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.component2|component2(){}[0]
    final fun component3(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.component3|component3(){}[0]
    final fun component4(): kotlin.collections/List<org.ton.lite.api.liteserver/LiteServerBlockLink> // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.component4|component4(){}[0]
    final fun copy(kotlin/Boolean = ..., org.ton.api.tonnode/TonNodeBlockIdExt = ..., org.ton.api.tonnode/TonNodeBlockIdExt = ..., kotlin.collections/List<org.ton.lite.api.liteserver/LiteServerBlockLink> = ...): org.ton.lite.api.liteserver/LiteServerPartialBlockProof // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.copy|copy(kotlin.Boolean;org.ton.api.tonnode.TonNodeBlockIdExt;org.ton.api.tonnode.TonNodeBlockIdExt;kotlin.collections.List<org.ton.lite.api.liteserver.LiteServerBlockLink>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver/LiteServerPartialBlockProof> { // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver/LiteServerPartialBlockProof // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver/LiteServerPartialBlockProof) // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.LiteServerPartialBlockProof){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerPartialBlockProof> { // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.Companion|null[0]
        final val $childSerializers // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.Companion.$childSerializers|{}$childSerializers[0]

        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerPartialBlockProof // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerPartialBlockProof // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerPartialBlockProof // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerPartialBlockProof // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerPartialBlockProof // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerPartialBlockProof // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerPartialBlockProof // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerPartialBlockProof // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerPartialBlockProof) // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerPartialBlockProof){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerPartialBlockProof) // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerPartialBlockProof){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerPartialBlockProof) // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerPartialBlockProof){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerPartialBlockProof) // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerPartialBlockProof){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver/LiteServerPartialBlockProof, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.LiteServerPartialBlockProof;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver/LiteServerPartialBlockProof, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.LiteServerPartialBlockProof;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver/LiteServerPartialBlockProof): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.Companion.hash|hash(org.ton.lite.api.liteserver.LiteServerPartialBlockProof){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver/LiteServerPartialBlockProof> // org.ton.lite.api.liteserver/LiteServerPartialBlockProof.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver/LiteServerRunMethodResult { // org.ton.lite.api.liteserver/LiteServerRunMethodResult|null[0]
    final val exitCode // org.ton.lite.api.liteserver/LiteServerRunMethodResult.exitCode|{}exitCode[0]
        final fun <get-exitCode>(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerRunMethodResult.exitCode.<get-exitCode>|<get-exitCode>(){}[0]
    final val id // org.ton.lite.api.liteserver/LiteServerRunMethodResult.id|{}id[0]
        final fun <get-id>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerRunMethodResult.id.<get-id>|<get-id>(){}[0]
    final val initC7 // org.ton.lite.api.liteserver/LiteServerRunMethodResult.initC7|{}initC7[0]
        final fun <get-initC7>(): kotlinx.io.bytestring/ByteString? // org.ton.lite.api.liteserver/LiteServerRunMethodResult.initC7.<get-initC7>|<get-initC7>(){}[0]
    final val libExtras // org.ton.lite.api.liteserver/LiteServerRunMethodResult.libExtras|{}libExtras[0]
        final fun <get-libExtras>(): kotlinx.io.bytestring/ByteString? // org.ton.lite.api.liteserver/LiteServerRunMethodResult.libExtras.<get-libExtras>|<get-libExtras>(){}[0]
    final val mode // org.ton.lite.api.liteserver/LiteServerRunMethodResult.mode|{}mode[0]
        final fun <get-mode>(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerRunMethodResult.mode.<get-mode>|<get-mode>(){}[0]
    final val proof // org.ton.lite.api.liteserver/LiteServerRunMethodResult.proof|{}proof[0]
        final fun <get-proof>(): kotlinx.io.bytestring/ByteString? // org.ton.lite.api.liteserver/LiteServerRunMethodResult.proof.<get-proof>|<get-proof>(){}[0]
    final val result // org.ton.lite.api.liteserver/LiteServerRunMethodResult.result|{}result[0]
        final fun <get-result>(): kotlinx.io.bytestring/ByteString? // org.ton.lite.api.liteserver/LiteServerRunMethodResult.result.<get-result>|<get-result>(){}[0]
    final val shardBlock // org.ton.lite.api.liteserver/LiteServerRunMethodResult.shardBlock|{}shardBlock[0]
        final fun <get-shardBlock>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerRunMethodResult.shardBlock.<get-shardBlock>|<get-shardBlock>(){}[0]
    final val shardProof // org.ton.lite.api.liteserver/LiteServerRunMethodResult.shardProof|{}shardProof[0]
        final fun <get-shardProof>(): kotlinx.io.bytestring/ByteString? // org.ton.lite.api.liteserver/LiteServerRunMethodResult.shardProof.<get-shardProof>|<get-shardProof>(){}[0]
    final val stateProof // org.ton.lite.api.liteserver/LiteServerRunMethodResult.stateProof|{}stateProof[0]
        final fun <get-stateProof>(): kotlinx.io.bytestring/ByteString? // org.ton.lite.api.liteserver/LiteServerRunMethodResult.stateProof.<get-stateProof>|<get-stateProof>(){}[0]

    final fun component1(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerRunMethodResult.component1|component1(){}[0]
    final fun component10(): kotlinx.io.bytestring/ByteString? // org.ton.lite.api.liteserver/LiteServerRunMethodResult.component10|component10(){}[0]
    final fun component2(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerRunMethodResult.component2|component2(){}[0]
    final fun component3(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerRunMethodResult.component3|component3(){}[0]
    final fun component4(): kotlinx.io.bytestring/ByteString? // org.ton.lite.api.liteserver/LiteServerRunMethodResult.component4|component4(){}[0]
    final fun component5(): kotlinx.io.bytestring/ByteString? // org.ton.lite.api.liteserver/LiteServerRunMethodResult.component5|component5(){}[0]
    final fun component6(): kotlinx.io.bytestring/ByteString? // org.ton.lite.api.liteserver/LiteServerRunMethodResult.component6|component6(){}[0]
    final fun component7(): kotlinx.io.bytestring/ByteString? // org.ton.lite.api.liteserver/LiteServerRunMethodResult.component7|component7(){}[0]
    final fun component8(): kotlinx.io.bytestring/ByteString? // org.ton.lite.api.liteserver/LiteServerRunMethodResult.component8|component8(){}[0]
    final fun component9(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerRunMethodResult.component9|component9(){}[0]
    final fun copy(kotlin/Int = ..., org.ton.api.tonnode/TonNodeBlockIdExt = ..., org.ton.api.tonnode/TonNodeBlockIdExt = ..., kotlinx.io.bytestring/ByteString? = ..., kotlinx.io.bytestring/ByteString? = ..., kotlinx.io.bytestring/ByteString? = ..., kotlinx.io.bytestring/ByteString? = ..., kotlinx.io.bytestring/ByteString? = ..., kotlin/Int = ..., kotlinx.io.bytestring/ByteString? = ...): org.ton.lite.api.liteserver/LiteServerRunMethodResult // org.ton.lite.api.liteserver/LiteServerRunMethodResult.copy|copy(kotlin.Int;org.ton.api.tonnode.TonNodeBlockIdExt;org.ton.api.tonnode.TonNodeBlockIdExt;kotlinx.io.bytestring.ByteString?;kotlinx.io.bytestring.ByteString?;kotlinx.io.bytestring.ByteString?;kotlinx.io.bytestring.ByteString?;kotlinx.io.bytestring.ByteString?;kotlin.Int;kotlinx.io.bytestring.ByteString?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerRunMethodResult.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerRunMethodResult.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver/LiteServerRunMethodResult.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver/LiteServerRunMethodResult> { // org.ton.lite.api.liteserver/LiteServerRunMethodResult.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver/LiteServerRunMethodResult.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver/LiteServerRunMethodResult.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver/LiteServerRunMethodResult.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver/LiteServerRunMethodResult // org.ton.lite.api.liteserver/LiteServerRunMethodResult.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver/LiteServerRunMethodResult) // org.ton.lite.api.liteserver/LiteServerRunMethodResult.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.LiteServerRunMethodResult){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerRunMethodResult> { // org.ton.lite.api.liteserver/LiteServerRunMethodResult.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerRunMethodResult // org.ton.lite.api.liteserver/LiteServerRunMethodResult.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerRunMethodResult // org.ton.lite.api.liteserver/LiteServerRunMethodResult.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerRunMethodResult // org.ton.lite.api.liteserver/LiteServerRunMethodResult.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerRunMethodResult // org.ton.lite.api.liteserver/LiteServerRunMethodResult.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerRunMethodResult // org.ton.lite.api.liteserver/LiteServerRunMethodResult.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerRunMethodResult // org.ton.lite.api.liteserver/LiteServerRunMethodResult.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerRunMethodResult // org.ton.lite.api.liteserver/LiteServerRunMethodResult.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerRunMethodResult // org.ton.lite.api.liteserver/LiteServerRunMethodResult.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerRunMethodResult) // org.ton.lite.api.liteserver/LiteServerRunMethodResult.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerRunMethodResult){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerRunMethodResult) // org.ton.lite.api.liteserver/LiteServerRunMethodResult.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerRunMethodResult){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerRunMethodResult) // org.ton.lite.api.liteserver/LiteServerRunMethodResult.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerRunMethodResult){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerRunMethodResult) // org.ton.lite.api.liteserver/LiteServerRunMethodResult.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerRunMethodResult){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver/LiteServerRunMethodResult, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerRunMethodResult.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.LiteServerRunMethodResult;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver/LiteServerRunMethodResult, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerRunMethodResult.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.LiteServerRunMethodResult;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver/LiteServerRunMethodResult): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerRunMethodResult.Companion.hash|hash(org.ton.lite.api.liteserver.LiteServerRunMethodResult){}[0]
        final fun mode(kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ...): kotlin/Int // org.ton.lite.api.liteserver/LiteServerRunMethodResult.Companion.mode|mode(kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver/LiteServerRunMethodResult> // org.ton.lite.api.liteserver/LiteServerRunMethodResult.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver/LiteServerSendMsgStatus { // org.ton.lite.api.liteserver/LiteServerSendMsgStatus|null[0]
    constructor <init>(kotlin/Int) // org.ton.lite.api.liteserver/LiteServerSendMsgStatus.<init>|<init>(kotlin.Int){}[0]

    final val status // org.ton.lite.api.liteserver/LiteServerSendMsgStatus.status|{}status[0]
        final fun <get-status>(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerSendMsgStatus.status.<get-status>|<get-status>(){}[0]

    final fun component1(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerSendMsgStatus.component1|component1(){}[0]
    final fun copy(kotlin/Int = ...): org.ton.lite.api.liteserver/LiteServerSendMsgStatus // org.ton.lite.api.liteserver/LiteServerSendMsgStatus.copy|copy(kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerSendMsgStatus.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerSendMsgStatus.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver/LiteServerSendMsgStatus.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver/LiteServerSendMsgStatus> { // org.ton.lite.api.liteserver/LiteServerSendMsgStatus.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver/LiteServerSendMsgStatus.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver/LiteServerSendMsgStatus.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver/LiteServerSendMsgStatus.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver/LiteServerSendMsgStatus // org.ton.lite.api.liteserver/LiteServerSendMsgStatus.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver/LiteServerSendMsgStatus) // org.ton.lite.api.liteserver/LiteServerSendMsgStatus.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.LiteServerSendMsgStatus){}[0]
    }

    final object Companion : org.ton.tl/TlConstructor<org.ton.lite.api.liteserver/LiteServerSendMsgStatus> { // org.ton.lite.api.liteserver/LiteServerSendMsgStatus.Companion|null[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerSendMsgStatus // org.ton.lite.api.liteserver/LiteServerSendMsgStatus.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerSendMsgStatus) // org.ton.lite.api.liteserver/LiteServerSendMsgStatus.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerSendMsgStatus){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver/LiteServerSendMsgStatus> // org.ton.lite.api.liteserver/LiteServerSendMsgStatus.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver/LiteServerShardInfo { // org.ton.lite.api.liteserver/LiteServerShardInfo|null[0]
    constructor <init>(org.ton.api.tonnode/TonNodeBlockIdExt, org.ton.api.tonnode/TonNodeBlockIdExt, kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString) // org.ton.lite.api.liteserver/LiteServerShardInfo.<init>|<init>(org.ton.api.tonnode.TonNodeBlockIdExt;org.ton.api.tonnode.TonNodeBlockIdExt;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]

    final val id // org.ton.lite.api.liteserver/LiteServerShardInfo.id|{}id[0]
        final fun <get-id>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerShardInfo.id.<get-id>|<get-id>(){}[0]
    final val shardBlock // org.ton.lite.api.liteserver/LiteServerShardInfo.shardBlock|{}shardBlock[0]
        final fun <get-shardBlock>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerShardInfo.shardBlock.<get-shardBlock>|<get-shardBlock>(){}[0]
    final val shardDescr // org.ton.lite.api.liteserver/LiteServerShardInfo.shardDescr|{}shardDescr[0]
        final fun <get-shardDescr>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerShardInfo.shardDescr.<get-shardDescr>|<get-shardDescr>(){}[0]
    final val shardProof // org.ton.lite.api.liteserver/LiteServerShardInfo.shardProof|{}shardProof[0]
        final fun <get-shardProof>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerShardInfo.shardProof.<get-shardProof>|<get-shardProof>(){}[0]

    final fun component1(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerShardInfo.component1|component1(){}[0]
    final fun component2(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerShardInfo.component2|component2(){}[0]
    final fun component3(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerShardInfo.component3|component3(){}[0]
    final fun component4(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerShardInfo.component4|component4(){}[0]
    final fun copy(org.ton.api.tonnode/TonNodeBlockIdExt = ..., org.ton.api.tonnode/TonNodeBlockIdExt = ..., kotlinx.io.bytestring/ByteString = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.lite.api.liteserver/LiteServerShardInfo // org.ton.lite.api.liteserver/LiteServerShardInfo.copy|copy(org.ton.api.tonnode.TonNodeBlockIdExt;org.ton.api.tonnode.TonNodeBlockIdExt;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerShardInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerShardInfo.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver/LiteServerShardInfo.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver/LiteServerShardInfo> { // org.ton.lite.api.liteserver/LiteServerShardInfo.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver/LiteServerShardInfo.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver/LiteServerShardInfo.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver/LiteServerShardInfo.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver/LiteServerShardInfo // org.ton.lite.api.liteserver/LiteServerShardInfo.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver/LiteServerShardInfo) // org.ton.lite.api.liteserver/LiteServerShardInfo.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.LiteServerShardInfo){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerShardInfo> { // org.ton.lite.api.liteserver/LiteServerShardInfo.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerShardInfo // org.ton.lite.api.liteserver/LiteServerShardInfo.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerShardInfo // org.ton.lite.api.liteserver/LiteServerShardInfo.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerShardInfo // org.ton.lite.api.liteserver/LiteServerShardInfo.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerShardInfo // org.ton.lite.api.liteserver/LiteServerShardInfo.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerShardInfo // org.ton.lite.api.liteserver/LiteServerShardInfo.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerShardInfo // org.ton.lite.api.liteserver/LiteServerShardInfo.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerShardInfo // org.ton.lite.api.liteserver/LiteServerShardInfo.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerShardInfo // org.ton.lite.api.liteserver/LiteServerShardInfo.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerShardInfo) // org.ton.lite.api.liteserver/LiteServerShardInfo.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerShardInfo){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerShardInfo) // org.ton.lite.api.liteserver/LiteServerShardInfo.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerShardInfo){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerShardInfo) // org.ton.lite.api.liteserver/LiteServerShardInfo.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerShardInfo){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerShardInfo) // org.ton.lite.api.liteserver/LiteServerShardInfo.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerShardInfo){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver/LiteServerShardInfo, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerShardInfo.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.LiteServerShardInfo;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver/LiteServerShardInfo, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerShardInfo.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.LiteServerShardInfo;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver/LiteServerShardInfo): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerShardInfo.Companion.hash|hash(org.ton.lite.api.liteserver.LiteServerShardInfo){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver/LiteServerShardInfo> // org.ton.lite.api.liteserver/LiteServerShardInfo.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver/LiteServerSignature { // org.ton.lite.api.liteserver/LiteServerSignature|null[0]
    constructor <init>(kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString) // org.ton.lite.api.liteserver/LiteServerSignature.<init>|<init>(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]

    final val nodeIdShort // org.ton.lite.api.liteserver/LiteServerSignature.nodeIdShort|{}nodeIdShort[0]
        final fun <get-nodeIdShort>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerSignature.nodeIdShort.<get-nodeIdShort>|<get-nodeIdShort>(){}[0]
    final val signature // org.ton.lite.api.liteserver/LiteServerSignature.signature|{}signature[0]
        final fun <get-signature>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerSignature.signature.<get-signature>|<get-signature>(){}[0]

    final fun component1(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerSignature.component1|component1(){}[0]
    final fun component2(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerSignature.component2|component2(){}[0]
    final fun copy(kotlinx.io.bytestring/ByteString = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.lite.api.liteserver/LiteServerSignature // org.ton.lite.api.liteserver/LiteServerSignature.copy|copy(kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerSignature.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerSignature.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver/LiteServerSignature.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver/LiteServerSignature> { // org.ton.lite.api.liteserver/LiteServerSignature.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver/LiteServerSignature.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver/LiteServerSignature.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver/LiteServerSignature.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver/LiteServerSignature // org.ton.lite.api.liteserver/LiteServerSignature.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver/LiteServerSignature) // org.ton.lite.api.liteserver/LiteServerSignature.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.LiteServerSignature){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerSignature> { // org.ton.lite.api.liteserver/LiteServerSignature.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerSignature // org.ton.lite.api.liteserver/LiteServerSignature.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerSignature // org.ton.lite.api.liteserver/LiteServerSignature.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerSignature // org.ton.lite.api.liteserver/LiteServerSignature.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerSignature // org.ton.lite.api.liteserver/LiteServerSignature.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerSignature // org.ton.lite.api.liteserver/LiteServerSignature.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerSignature // org.ton.lite.api.liteserver/LiteServerSignature.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerSignature // org.ton.lite.api.liteserver/LiteServerSignature.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerSignature // org.ton.lite.api.liteserver/LiteServerSignature.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerSignature) // org.ton.lite.api.liteserver/LiteServerSignature.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerSignature){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerSignature) // org.ton.lite.api.liteserver/LiteServerSignature.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerSignature){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerSignature) // org.ton.lite.api.liteserver/LiteServerSignature.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerSignature){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerSignature) // org.ton.lite.api.liteserver/LiteServerSignature.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerSignature){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver/LiteServerSignature, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerSignature.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.LiteServerSignature;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver/LiteServerSignature, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerSignature.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.LiteServerSignature;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver/LiteServerSignature): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerSignature.Companion.hash|hash(org.ton.lite.api.liteserver.LiteServerSignature){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver/LiteServerSignature> // org.ton.lite.api.liteserver/LiteServerSignature.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver/LiteServerSignatureSet { // org.ton.lite.api.liteserver/LiteServerSignatureSet|null[0]
    constructor <init>(kotlin/Int, kotlin/Int, kotlin.collections/List<org.ton.lite.api.liteserver/LiteServerSignature>) // org.ton.lite.api.liteserver/LiteServerSignatureSet.<init>|<init>(kotlin.Int;kotlin.Int;kotlin.collections.List<org.ton.lite.api.liteserver.LiteServerSignature>){}[0]

    final val catchainSeqno // org.ton.lite.api.liteserver/LiteServerSignatureSet.catchainSeqno|{}catchainSeqno[0]
        final fun <get-catchainSeqno>(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerSignatureSet.catchainSeqno.<get-catchainSeqno>|<get-catchainSeqno>(){}[0]
    final val signatures // org.ton.lite.api.liteserver/LiteServerSignatureSet.signatures|{}signatures[0]
        final fun <get-signatures>(): kotlin.collections/List<org.ton.lite.api.liteserver/LiteServerSignature> // org.ton.lite.api.liteserver/LiteServerSignatureSet.signatures.<get-signatures>|<get-signatures>(){}[0]
    final val validatorSetHash // org.ton.lite.api.liteserver/LiteServerSignatureSet.validatorSetHash|{}validatorSetHash[0]
        final fun <get-validatorSetHash>(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerSignatureSet.validatorSetHash.<get-validatorSetHash>|<get-validatorSetHash>(){}[0]

    final fun component1(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerSignatureSet.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerSignatureSet.component2|component2(){}[0]
    final fun component3(): kotlin.collections/List<org.ton.lite.api.liteserver/LiteServerSignature> // org.ton.lite.api.liteserver/LiteServerSignatureSet.component3|component3(){}[0]
    final fun copy(kotlin/Int = ..., kotlin/Int = ..., kotlin.collections/List<org.ton.lite.api.liteserver/LiteServerSignature> = ...): org.ton.lite.api.liteserver/LiteServerSignatureSet // org.ton.lite.api.liteserver/LiteServerSignatureSet.copy|copy(kotlin.Int;kotlin.Int;kotlin.collections.List<org.ton.lite.api.liteserver.LiteServerSignature>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerSignatureSet.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerSignatureSet.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver/LiteServerSignatureSet.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver/LiteServerSignatureSet> { // org.ton.lite.api.liteserver/LiteServerSignatureSet.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver/LiteServerSignatureSet.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver/LiteServerSignatureSet.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver/LiteServerSignatureSet.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver/LiteServerSignatureSet // org.ton.lite.api.liteserver/LiteServerSignatureSet.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver/LiteServerSignatureSet) // org.ton.lite.api.liteserver/LiteServerSignatureSet.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.LiteServerSignatureSet){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerSignatureSet> { // org.ton.lite.api.liteserver/LiteServerSignatureSet.Companion|null[0]
        final val $childSerializers // org.ton.lite.api.liteserver/LiteServerSignatureSet.Companion.$childSerializers|{}$childSerializers[0]

        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerSignatureSet // org.ton.lite.api.liteserver/LiteServerSignatureSet.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerSignatureSet // org.ton.lite.api.liteserver/LiteServerSignatureSet.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerSignatureSet // org.ton.lite.api.liteserver/LiteServerSignatureSet.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerSignatureSet // org.ton.lite.api.liteserver/LiteServerSignatureSet.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerSignatureSet // org.ton.lite.api.liteserver/LiteServerSignatureSet.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerSignatureSet // org.ton.lite.api.liteserver/LiteServerSignatureSet.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerSignatureSet // org.ton.lite.api.liteserver/LiteServerSignatureSet.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerSignatureSet // org.ton.lite.api.liteserver/LiteServerSignatureSet.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerSignatureSet) // org.ton.lite.api.liteserver/LiteServerSignatureSet.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerSignatureSet){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerSignatureSet) // org.ton.lite.api.liteserver/LiteServerSignatureSet.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerSignatureSet){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerSignatureSet) // org.ton.lite.api.liteserver/LiteServerSignatureSet.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerSignatureSet){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerSignatureSet) // org.ton.lite.api.liteserver/LiteServerSignatureSet.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerSignatureSet){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver/LiteServerSignatureSet, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerSignatureSet.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.LiteServerSignatureSet;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver/LiteServerSignatureSet, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerSignatureSet.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.LiteServerSignatureSet;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver/LiteServerSignatureSet): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerSignatureSet.Companion.hash|hash(org.ton.lite.api.liteserver.LiteServerSignatureSet){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver/LiteServerSignatureSet> // org.ton.lite.api.liteserver/LiteServerSignatureSet.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver/LiteServerTransactionId { // org.ton.lite.api.liteserver/LiteServerTransactionId|null[0]
    final val account // org.ton.lite.api.liteserver/LiteServerTransactionId.account|{}account[0]
        final fun <get-account>(): kotlinx.io.bytestring/ByteString? // org.ton.lite.api.liteserver/LiteServerTransactionId.account.<get-account>|<get-account>(){}[0]
    final val hash // org.ton.lite.api.liteserver/LiteServerTransactionId.hash|{}hash[0]
        final fun <get-hash>(): kotlinx.io.bytestring/ByteString? // org.ton.lite.api.liteserver/LiteServerTransactionId.hash.<get-hash>|<get-hash>(){}[0]
    final val lt // org.ton.lite.api.liteserver/LiteServerTransactionId.lt|{}lt[0]
        final fun <get-lt>(): kotlin/Long? // org.ton.lite.api.liteserver/LiteServerTransactionId.lt.<get-lt>|<get-lt>(){}[0]
    final val mode // org.ton.lite.api.liteserver/LiteServerTransactionId.mode|{}mode[0]
        final fun <get-mode>(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerTransactionId.mode.<get-mode>|<get-mode>(){}[0]

    final fun component1(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerTransactionId.component1|component1(){}[0]
    final fun component2(): kotlinx.io.bytestring/ByteString? // org.ton.lite.api.liteserver/LiteServerTransactionId.component2|component2(){}[0]
    final fun component3(): kotlin/Long? // org.ton.lite.api.liteserver/LiteServerTransactionId.component3|component3(){}[0]
    final fun component4(): kotlinx.io.bytestring/ByteString? // org.ton.lite.api.liteserver/LiteServerTransactionId.component4|component4(){}[0]
    final fun copy(kotlin/Int = ..., kotlinx.io.bytestring/ByteString? = ..., kotlin/Long? = ..., kotlinx.io.bytestring/ByteString? = ...): org.ton.lite.api.liteserver/LiteServerTransactionId // org.ton.lite.api.liteserver/LiteServerTransactionId.copy|copy(kotlin.Int;kotlinx.io.bytestring.ByteString?;kotlin.Long?;kotlinx.io.bytestring.ByteString?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerTransactionId.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerTransactionId.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver/LiteServerTransactionId.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver/LiteServerTransactionId> { // org.ton.lite.api.liteserver/LiteServerTransactionId.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver/LiteServerTransactionId.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver/LiteServerTransactionId.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver/LiteServerTransactionId.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver/LiteServerTransactionId // org.ton.lite.api.liteserver/LiteServerTransactionId.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver/LiteServerTransactionId) // org.ton.lite.api.liteserver/LiteServerTransactionId.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.LiteServerTransactionId){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerTransactionId> { // org.ton.lite.api.liteserver/LiteServerTransactionId.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerTransactionId // org.ton.lite.api.liteserver/LiteServerTransactionId.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerTransactionId // org.ton.lite.api.liteserver/LiteServerTransactionId.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerTransactionId // org.ton.lite.api.liteserver/LiteServerTransactionId.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerTransactionId // org.ton.lite.api.liteserver/LiteServerTransactionId.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerTransactionId // org.ton.lite.api.liteserver/LiteServerTransactionId.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerTransactionId // org.ton.lite.api.liteserver/LiteServerTransactionId.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerTransactionId // org.ton.lite.api.liteserver/LiteServerTransactionId.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerTransactionId // org.ton.lite.api.liteserver/LiteServerTransactionId.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerTransactionId) // org.ton.lite.api.liteserver/LiteServerTransactionId.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerTransactionId){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerTransactionId) // org.ton.lite.api.liteserver/LiteServerTransactionId.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerTransactionId){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerTransactionId) // org.ton.lite.api.liteserver/LiteServerTransactionId.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerTransactionId){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerTransactionId) // org.ton.lite.api.liteserver/LiteServerTransactionId.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerTransactionId){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver/LiteServerTransactionId, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerTransactionId.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.LiteServerTransactionId;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver/LiteServerTransactionId, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerTransactionId.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.LiteServerTransactionId;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver/LiteServerTransactionId): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerTransactionId.Companion.hash|hash(org.ton.lite.api.liteserver.LiteServerTransactionId){}[0]
        final fun mode(kotlin/Boolean, kotlin/Boolean, kotlin/Boolean): kotlin/Int // org.ton.lite.api.liteserver/LiteServerTransactionId.Companion.mode|mode(kotlin.Boolean;kotlin.Boolean;kotlin.Boolean){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver/LiteServerTransactionId> // org.ton.lite.api.liteserver/LiteServerTransactionId.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver/LiteServerTransactionId3 { // org.ton.lite.api.liteserver/LiteServerTransactionId3|null[0]
    constructor <init>(kotlinx.io.bytestring/ByteString, kotlin/Long) // org.ton.lite.api.liteserver/LiteServerTransactionId3.<init>|<init>(kotlinx.io.bytestring.ByteString;kotlin.Long){}[0]

    final val account // org.ton.lite.api.liteserver/LiteServerTransactionId3.account|{}account[0]
        final fun <get-account>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerTransactionId3.account.<get-account>|<get-account>(){}[0]
    final val lt // org.ton.lite.api.liteserver/LiteServerTransactionId3.lt|{}lt[0]
        final fun <get-lt>(): kotlin/Long // org.ton.lite.api.liteserver/LiteServerTransactionId3.lt.<get-lt>|<get-lt>(){}[0]

    final fun component1(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerTransactionId3.component1|component1(){}[0]
    final fun component2(): kotlin/Long // org.ton.lite.api.liteserver/LiteServerTransactionId3.component2|component2(){}[0]
    final fun copy(kotlinx.io.bytestring/ByteString = ..., kotlin/Long = ...): org.ton.lite.api.liteserver/LiteServerTransactionId3 // org.ton.lite.api.liteserver/LiteServerTransactionId3.copy|copy(kotlinx.io.bytestring.ByteString;kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerTransactionId3.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerTransactionId3.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver/LiteServerTransactionId3.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver/LiteServerTransactionId3> { // org.ton.lite.api.liteserver/LiteServerTransactionId3.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver/LiteServerTransactionId3.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver/LiteServerTransactionId3.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver/LiteServerTransactionId3.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver/LiteServerTransactionId3 // org.ton.lite.api.liteserver/LiteServerTransactionId3.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver/LiteServerTransactionId3) // org.ton.lite.api.liteserver/LiteServerTransactionId3.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.LiteServerTransactionId3){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerTransactionId3> { // org.ton.lite.api.liteserver/LiteServerTransactionId3.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerTransactionId3 // org.ton.lite.api.liteserver/LiteServerTransactionId3.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerTransactionId3 // org.ton.lite.api.liteserver/LiteServerTransactionId3.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerTransactionId3 // org.ton.lite.api.liteserver/LiteServerTransactionId3.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerTransactionId3 // org.ton.lite.api.liteserver/LiteServerTransactionId3.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerTransactionId3 // org.ton.lite.api.liteserver/LiteServerTransactionId3.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerTransactionId3 // org.ton.lite.api.liteserver/LiteServerTransactionId3.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerTransactionId3 // org.ton.lite.api.liteserver/LiteServerTransactionId3.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerTransactionId3 // org.ton.lite.api.liteserver/LiteServerTransactionId3.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerTransactionId3) // org.ton.lite.api.liteserver/LiteServerTransactionId3.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerTransactionId3){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerTransactionId3) // org.ton.lite.api.liteserver/LiteServerTransactionId3.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerTransactionId3){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerTransactionId3) // org.ton.lite.api.liteserver/LiteServerTransactionId3.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerTransactionId3){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerTransactionId3) // org.ton.lite.api.liteserver/LiteServerTransactionId3.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerTransactionId3){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver/LiteServerTransactionId3, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerTransactionId3.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.LiteServerTransactionId3;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver/LiteServerTransactionId3, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerTransactionId3.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.LiteServerTransactionId3;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver/LiteServerTransactionId3): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerTransactionId3.Companion.hash|hash(org.ton.lite.api.liteserver.LiteServerTransactionId3){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver/LiteServerTransactionId3> // org.ton.lite.api.liteserver/LiteServerTransactionId3.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver/LiteServerTransactionInfo { // org.ton.lite.api.liteserver/LiteServerTransactionInfo|null[0]
    constructor <init>(org.ton.api.tonnode/TonNodeBlockIdExt, kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString) // org.ton.lite.api.liteserver/LiteServerTransactionInfo.<init>|<init>(org.ton.api.tonnode.TonNodeBlockIdExt;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]

    final val id // org.ton.lite.api.liteserver/LiteServerTransactionInfo.id|{}id[0]
        final fun <get-id>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerTransactionInfo.id.<get-id>|<get-id>(){}[0]
    final val proof // org.ton.lite.api.liteserver/LiteServerTransactionInfo.proof|{}proof[0]
        final fun <get-proof>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerTransactionInfo.proof.<get-proof>|<get-proof>(){}[0]
    final val transaction // org.ton.lite.api.liteserver/LiteServerTransactionInfo.transaction|{}transaction[0]
        final fun <get-transaction>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerTransactionInfo.transaction.<get-transaction>|<get-transaction>(){}[0]

    final fun component1(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerTransactionInfo.component1|component1(){}[0]
    final fun component2(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerTransactionInfo.component2|component2(){}[0]
    final fun component3(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerTransactionInfo.component3|component3(){}[0]
    final fun copy(org.ton.api.tonnode/TonNodeBlockIdExt = ..., kotlinx.io.bytestring/ByteString = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.lite.api.liteserver/LiteServerTransactionInfo // org.ton.lite.api.liteserver/LiteServerTransactionInfo.copy|copy(org.ton.api.tonnode.TonNodeBlockIdExt;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerTransactionInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerTransactionInfo.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver/LiteServerTransactionInfo.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver/LiteServerTransactionInfo> { // org.ton.lite.api.liteserver/LiteServerTransactionInfo.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver/LiteServerTransactionInfo.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver/LiteServerTransactionInfo.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver/LiteServerTransactionInfo.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver/LiteServerTransactionInfo // org.ton.lite.api.liteserver/LiteServerTransactionInfo.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver/LiteServerTransactionInfo) // org.ton.lite.api.liteserver/LiteServerTransactionInfo.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.LiteServerTransactionInfo){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerTransactionInfo> { // org.ton.lite.api.liteserver/LiteServerTransactionInfo.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerTransactionInfo // org.ton.lite.api.liteserver/LiteServerTransactionInfo.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerTransactionInfo // org.ton.lite.api.liteserver/LiteServerTransactionInfo.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerTransactionInfo // org.ton.lite.api.liteserver/LiteServerTransactionInfo.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerTransactionInfo // org.ton.lite.api.liteserver/LiteServerTransactionInfo.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerTransactionInfo // org.ton.lite.api.liteserver/LiteServerTransactionInfo.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerTransactionInfo // org.ton.lite.api.liteserver/LiteServerTransactionInfo.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerTransactionInfo // org.ton.lite.api.liteserver/LiteServerTransactionInfo.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerTransactionInfo // org.ton.lite.api.liteserver/LiteServerTransactionInfo.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerTransactionInfo) // org.ton.lite.api.liteserver/LiteServerTransactionInfo.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerTransactionInfo){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerTransactionInfo) // org.ton.lite.api.liteserver/LiteServerTransactionInfo.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerTransactionInfo){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerTransactionInfo) // org.ton.lite.api.liteserver/LiteServerTransactionInfo.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerTransactionInfo){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerTransactionInfo) // org.ton.lite.api.liteserver/LiteServerTransactionInfo.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerTransactionInfo){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver/LiteServerTransactionInfo, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerTransactionInfo.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.LiteServerTransactionInfo;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver/LiteServerTransactionInfo, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerTransactionInfo.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.LiteServerTransactionInfo;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver/LiteServerTransactionInfo): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerTransactionInfo.Companion.hash|hash(org.ton.lite.api.liteserver.LiteServerTransactionInfo){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver/LiteServerTransactionInfo> // org.ton.lite.api.liteserver/LiteServerTransactionInfo.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver/LiteServerTransactionList { // org.ton.lite.api.liteserver/LiteServerTransactionList|null[0]
    constructor <init>(kotlin.collections/List<org.ton.api.tonnode/TonNodeBlockIdExt>, kotlinx.io.bytestring/ByteString) // org.ton.lite.api.liteserver/LiteServerTransactionList.<init>|<init>(kotlin.collections.List<org.ton.api.tonnode.TonNodeBlockIdExt>;kotlinx.io.bytestring.ByteString){}[0]

    final val ids // org.ton.lite.api.liteserver/LiteServerTransactionList.ids|{}ids[0]
        final fun <get-ids>(): kotlin.collections/List<org.ton.api.tonnode/TonNodeBlockIdExt> // org.ton.lite.api.liteserver/LiteServerTransactionList.ids.<get-ids>|<get-ids>(){}[0]
    final val transactions // org.ton.lite.api.liteserver/LiteServerTransactionList.transactions|{}transactions[0]
        final fun <get-transactions>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerTransactionList.transactions.<get-transactions>|<get-transactions>(){}[0]

    final fun component1(): kotlin.collections/List<org.ton.api.tonnode/TonNodeBlockIdExt> // org.ton.lite.api.liteserver/LiteServerTransactionList.component1|component1(){}[0]
    final fun component2(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerTransactionList.component2|component2(){}[0]
    final fun copy(kotlin.collections/List<org.ton.api.tonnode/TonNodeBlockIdExt> = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.lite.api.liteserver/LiteServerTransactionList // org.ton.lite.api.liteserver/LiteServerTransactionList.copy|copy(kotlin.collections.List<org.ton.api.tonnode.TonNodeBlockIdExt>;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerTransactionList.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerTransactionList.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver/LiteServerTransactionList.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver/LiteServerTransactionList> { // org.ton.lite.api.liteserver/LiteServerTransactionList.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver/LiteServerTransactionList.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver/LiteServerTransactionList.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver/LiteServerTransactionList.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver/LiteServerTransactionList // org.ton.lite.api.liteserver/LiteServerTransactionList.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver/LiteServerTransactionList) // org.ton.lite.api.liteserver/LiteServerTransactionList.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.LiteServerTransactionList){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerTransactionList> { // org.ton.lite.api.liteserver/LiteServerTransactionList.Companion|null[0]
        final val $childSerializers // org.ton.lite.api.liteserver/LiteServerTransactionList.Companion.$childSerializers|{}$childSerializers[0]

        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerTransactionList // org.ton.lite.api.liteserver/LiteServerTransactionList.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerTransactionList // org.ton.lite.api.liteserver/LiteServerTransactionList.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerTransactionList // org.ton.lite.api.liteserver/LiteServerTransactionList.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerTransactionList // org.ton.lite.api.liteserver/LiteServerTransactionList.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerTransactionList // org.ton.lite.api.liteserver/LiteServerTransactionList.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerTransactionList // org.ton.lite.api.liteserver/LiteServerTransactionList.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerTransactionList // org.ton.lite.api.liteserver/LiteServerTransactionList.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerTransactionList // org.ton.lite.api.liteserver/LiteServerTransactionList.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerTransactionList) // org.ton.lite.api.liteserver/LiteServerTransactionList.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerTransactionList){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerTransactionList) // org.ton.lite.api.liteserver/LiteServerTransactionList.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerTransactionList){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerTransactionList) // org.ton.lite.api.liteserver/LiteServerTransactionList.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerTransactionList){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerTransactionList) // org.ton.lite.api.liteserver/LiteServerTransactionList.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerTransactionList){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver/LiteServerTransactionList, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerTransactionList.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.LiteServerTransactionList;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver/LiteServerTransactionList, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerTransactionList.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.LiteServerTransactionList;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver/LiteServerTransactionList): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerTransactionList.Companion.hash|hash(org.ton.lite.api.liteserver.LiteServerTransactionList){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver/LiteServerTransactionList> // org.ton.lite.api.liteserver/LiteServerTransactionList.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver/LiteServerValidatorStats { // org.ton.lite.api.liteserver/LiteServerValidatorStats|null[0]
    constructor <init>(kotlin/Int, org.ton.api.tonnode/TonNodeBlockIdExt, kotlin/Int, kotlin/Boolean, kotlinx.io.bytestring/ByteString, kotlinx.io.bytestring/ByteString) // org.ton.lite.api.liteserver/LiteServerValidatorStats.<init>|<init>(kotlin.Int;org.ton.api.tonnode.TonNodeBlockIdExt;kotlin.Int;kotlin.Boolean;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]

    final val complete // org.ton.lite.api.liteserver/LiteServerValidatorStats.complete|{}complete[0]
        final fun <get-complete>(): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerValidatorStats.complete.<get-complete>|<get-complete>(){}[0]
    final val count // org.ton.lite.api.liteserver/LiteServerValidatorStats.count|{}count[0]
        final fun <get-count>(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerValidatorStats.count.<get-count>|<get-count>(){}[0]
    final val dataProof // org.ton.lite.api.liteserver/LiteServerValidatorStats.dataProof|{}dataProof[0]
        final fun <get-dataProof>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerValidatorStats.dataProof.<get-dataProof>|<get-dataProof>(){}[0]
    final val id // org.ton.lite.api.liteserver/LiteServerValidatorStats.id|{}id[0]
        final fun <get-id>(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerValidatorStats.id.<get-id>|<get-id>(){}[0]
    final val mode // org.ton.lite.api.liteserver/LiteServerValidatorStats.mode|{}mode[0]
        final fun <get-mode>(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerValidatorStats.mode.<get-mode>|<get-mode>(){}[0]
    final val stateProof // org.ton.lite.api.liteserver/LiteServerValidatorStats.stateProof|{}stateProof[0]
        final fun <get-stateProof>(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerValidatorStats.stateProof.<get-stateProof>|<get-stateProof>(){}[0]

    final fun component1(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerValidatorStats.component1|component1(){}[0]
    final fun component2(): org.ton.api.tonnode/TonNodeBlockIdExt // org.ton.lite.api.liteserver/LiteServerValidatorStats.component2|component2(){}[0]
    final fun component3(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerValidatorStats.component3|component3(){}[0]
    final fun component4(): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerValidatorStats.component4|component4(){}[0]
    final fun component5(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerValidatorStats.component5|component5(){}[0]
    final fun component6(): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerValidatorStats.component6|component6(){}[0]
    final fun copy(kotlin/Int = ..., org.ton.api.tonnode/TonNodeBlockIdExt = ..., kotlin/Int = ..., kotlin/Boolean = ..., kotlinx.io.bytestring/ByteString = ..., kotlinx.io.bytestring/ByteString = ...): org.ton.lite.api.liteserver/LiteServerValidatorStats // org.ton.lite.api.liteserver/LiteServerValidatorStats.copy|copy(kotlin.Int;org.ton.api.tonnode.TonNodeBlockIdExt;kotlin.Int;kotlin.Boolean;kotlinx.io.bytestring.ByteString;kotlinx.io.bytestring.ByteString){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerValidatorStats.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerValidatorStats.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver/LiteServerValidatorStats.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver/LiteServerValidatorStats> { // org.ton.lite.api.liteserver/LiteServerValidatorStats.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver/LiteServerValidatorStats.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver/LiteServerValidatorStats.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver/LiteServerValidatorStats.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver/LiteServerValidatorStats // org.ton.lite.api.liteserver/LiteServerValidatorStats.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver/LiteServerValidatorStats) // org.ton.lite.api.liteserver/LiteServerValidatorStats.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.LiteServerValidatorStats){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerValidatorStats> { // org.ton.lite.api.liteserver/LiteServerValidatorStats.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerValidatorStats // org.ton.lite.api.liteserver/LiteServerValidatorStats.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerValidatorStats // org.ton.lite.api.liteserver/LiteServerValidatorStats.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerValidatorStats // org.ton.lite.api.liteserver/LiteServerValidatorStats.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerValidatorStats // org.ton.lite.api.liteserver/LiteServerValidatorStats.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerValidatorStats // org.ton.lite.api.liteserver/LiteServerValidatorStats.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerValidatorStats // org.ton.lite.api.liteserver/LiteServerValidatorStats.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerValidatorStats // org.ton.lite.api.liteserver/LiteServerValidatorStats.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerValidatorStats // org.ton.lite.api.liteserver/LiteServerValidatorStats.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerValidatorStats) // org.ton.lite.api.liteserver/LiteServerValidatorStats.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerValidatorStats){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerValidatorStats) // org.ton.lite.api.liteserver/LiteServerValidatorStats.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerValidatorStats){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerValidatorStats) // org.ton.lite.api.liteserver/LiteServerValidatorStats.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerValidatorStats){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerValidatorStats) // org.ton.lite.api.liteserver/LiteServerValidatorStats.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerValidatorStats){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver/LiteServerValidatorStats, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerValidatorStats.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.LiteServerValidatorStats;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver/LiteServerValidatorStats, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerValidatorStats.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.LiteServerValidatorStats;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver/LiteServerValidatorStats): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerValidatorStats.Companion.hash|hash(org.ton.lite.api.liteserver.LiteServerValidatorStats){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver/LiteServerValidatorStats> // org.ton.lite.api.liteserver/LiteServerValidatorStats.Companion.serializer|serializer(){}[0]
    }
}

final class org.ton.lite.api.liteserver/LiteServerVersion { // org.ton.lite.api.liteserver/LiteServerVersion|null[0]
    constructor <init>(kotlin/Int, kotlin/Int, kotlin/Long, kotlin/Int) // org.ton.lite.api.liteserver/LiteServerVersion.<init>|<init>(kotlin.Int;kotlin.Int;kotlin.Long;kotlin.Int){}[0]

    final val capabilities // org.ton.lite.api.liteserver/LiteServerVersion.capabilities|{}capabilities[0]
        final fun <get-capabilities>(): kotlin/Long // org.ton.lite.api.liteserver/LiteServerVersion.capabilities.<get-capabilities>|<get-capabilities>(){}[0]
    final val mode // org.ton.lite.api.liteserver/LiteServerVersion.mode|{}mode[0]
        final fun <get-mode>(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerVersion.mode.<get-mode>|<get-mode>(){}[0]
    final val now // org.ton.lite.api.liteserver/LiteServerVersion.now|{}now[0]
        final fun <get-now>(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerVersion.now.<get-now>|<get-now>(){}[0]
    final val version // org.ton.lite.api.liteserver/LiteServerVersion.version|{}version[0]
        final fun <get-version>(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerVersion.version.<get-version>|<get-version>(){}[0]

    final fun component1(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerVersion.component1|component1(){}[0]
    final fun component2(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerVersion.component2|component2(){}[0]
    final fun component3(): kotlin/Long // org.ton.lite.api.liteserver/LiteServerVersion.component3|component3(){}[0]
    final fun component4(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerVersion.component4|component4(){}[0]
    final fun copy(kotlin/Int = ..., kotlin/Int = ..., kotlin/Long = ..., kotlin/Int = ...): org.ton.lite.api.liteserver/LiteServerVersion // org.ton.lite.api.liteserver/LiteServerVersion.copy|copy(kotlin.Int;kotlin.Int;kotlin.Long;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // org.ton.lite.api.liteserver/LiteServerVersion.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // org.ton.lite.api.liteserver/LiteServerVersion.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // org.ton.lite.api.liteserver/LiteServerVersion.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<org.ton.lite.api.liteserver/LiteServerVersion> { // org.ton.lite.api.liteserver/LiteServerVersion.$serializer|null[0]
        final val descriptor // org.ton.lite.api.liteserver/LiteServerVersion.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // org.ton.lite.api.liteserver/LiteServerVersion.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // org.ton.lite.api.liteserver/LiteServerVersion.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): org.ton.lite.api.liteserver/LiteServerVersion // org.ton.lite.api.liteserver/LiteServerVersion.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, org.ton.lite.api.liteserver/LiteServerVersion) // org.ton.lite.api.liteserver/LiteServerVersion.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;org.ton.lite.api.liteserver.LiteServerVersion){}[0]
    }

    final object Companion : org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerVersion> { // org.ton.lite.api.liteserver/LiteServerVersion.Companion|null[0]
        final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerVersion // org.ton.lite.api.liteserver/LiteServerVersion.Companion.decode|decode(kotlin.ByteArray){}[0]
        final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerVersion // org.ton.lite.api.liteserver/LiteServerVersion.Companion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
        final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerVersion // org.ton.lite.api.liteserver/LiteServerVersion.Companion.decode|decode(kotlinx.io.Source){}[0]
        final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerVersion // org.ton.lite.api.liteserver/LiteServerVersion.Companion.decode|decode(org.ton.tl.TlReader){}[0]
        final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerVersion // org.ton.lite.api.liteserver/LiteServerVersion.Companion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
        final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerVersion // org.ton.lite.api.liteserver/LiteServerVersion.Companion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
        final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerVersion // org.ton.lite.api.liteserver/LiteServerVersion.Companion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
        final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerVersion // org.ton.lite.api.liteserver/LiteServerVersion.Companion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
        final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerVersion) // org.ton.lite.api.liteserver/LiteServerVersion.Companion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerVersion){}[0]
        final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerVersion) // org.ton.lite.api.liteserver/LiteServerVersion.Companion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerVersion){}[0]
        final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerVersion) // org.ton.lite.api.liteserver/LiteServerVersion.Companion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerVersion){}[0]
        final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerVersion) // org.ton.lite.api.liteserver/LiteServerVersion.Companion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerVersion){}[0]
        final fun encodeToByteArray(org.ton.lite.api.liteserver/LiteServerVersion, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerVersion.Companion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.LiteServerVersion;kotlin.Boolean){}[0]
        final fun encodeToByteString(org.ton.lite.api.liteserver/LiteServerVersion, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerVersion.Companion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.LiteServerVersion;kotlin.Boolean){}[0]
        final fun hash(org.ton.lite.api.liteserver/LiteServerVersion): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerVersion.Companion.hash|hash(org.ton.lite.api.liteserver.LiteServerVersion){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver/LiteServerVersion> // org.ton.lite.api.liteserver/LiteServerVersion.Companion.serializer|serializer(){}[0]
    }
}

sealed class org.ton.lite.api.exception/LiteServerException : kotlin/RuntimeException { // org.ton.lite.api.exception/LiteServerException|null[0]
    final val code // org.ton.lite.api.exception/LiteServerException.code|{}code[0]
        final fun <get-code>(): kotlin/Int // org.ton.lite.api.exception/LiteServerException.code.<get-code>|<get-code>(){}[0]
    open val message // org.ton.lite.api.exception/LiteServerException.message|{}message[0]
        open fun <get-message>(): kotlin/String // org.ton.lite.api.exception/LiteServerException.message.<get-message>|<get-message>(){}[0]

    final object Companion { // org.ton.lite.api.exception/LiteServerException.Companion|null[0]
        final fun create(kotlin/Int, kotlin/String): org.ton.lite.api.exception/LiteServerException // org.ton.lite.api.exception/LiteServerException.Companion.create|create(kotlin.Int;kotlin.String){}[0]
    }
}

final object org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo : kotlinx.serialization.internal/SerializerFactory, org.ton.tl/TLFunction<org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo, org.ton.lite.api.liteserver/LiteServerMasterchainInfo>, org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo> { // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo|null[0]
    final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo.decode|decode(kotlin.ByteArray){}[0]
    final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
    final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo.decode|decode(kotlinx.io.Source){}[0]
    final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo.decode|decode(org.ton.tl.TlReader){}[0]
    final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
    final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
    final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
    final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
    final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo) // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetMasterchainInfo){}[0]
    final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo) // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetMasterchainInfo){}[0]
    final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo) // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetMasterchainInfo){}[0]
    final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo) // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetMasterchainInfo){}[0]
    final fun encodeToByteArray(org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.functions.LiteServerGetMasterchainInfo;kotlin.Boolean){}[0]
    final fun encodeToByteString(org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.functions.LiteServerGetMasterchainInfo;kotlin.Boolean){}[0]
    final fun hash(org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo.hash|hash(org.ton.lite.api.liteserver.functions.LiteServerGetMasterchainInfo){}[0]
    final fun resultTlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerMasterchainInfo> // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo.resultTlCodec|resultTlCodec(){}[0]
    final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo> // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo.serializer|serializer(){}[0]
    final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo> // org.ton.lite.api.liteserver.functions/LiteServerGetMasterchainInfo.tlCodec|tlCodec(){}[0]
}

final object org.ton.lite.api.liteserver.functions/LiteServerGetTime : kotlinx.serialization.internal/SerializerFactory, org.ton.tl/TLFunction<org.ton.lite.api.liteserver.functions/LiteServerGetTime, org.ton.lite.api.liteserver/LiteServerCurrentTime>, org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetTime> { // org.ton.lite.api.liteserver.functions/LiteServerGetTime|null[0]
    final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetTime // org.ton.lite.api.liteserver.functions/LiteServerGetTime.decode|decode(kotlin.ByteArray){}[0]
    final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetTime // org.ton.lite.api.liteserver.functions/LiteServerGetTime.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
    final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetTime // org.ton.lite.api.liteserver.functions/LiteServerGetTime.decode|decode(kotlinx.io.Source){}[0]
    final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetTime // org.ton.lite.api.liteserver.functions/LiteServerGetTime.decode|decode(org.ton.tl.TlReader){}[0]
    final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetTime // org.ton.lite.api.liteserver.functions/LiteServerGetTime.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
    final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetTime // org.ton.lite.api.liteserver.functions/LiteServerGetTime.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
    final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetTime // org.ton.lite.api.liteserver.functions/LiteServerGetTime.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
    final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetTime // org.ton.lite.api.liteserver.functions/LiteServerGetTime.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
    final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetTime) // org.ton.lite.api.liteserver.functions/LiteServerGetTime.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetTime){}[0]
    final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetTime) // org.ton.lite.api.liteserver.functions/LiteServerGetTime.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetTime){}[0]
    final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetTime) // org.ton.lite.api.liteserver.functions/LiteServerGetTime.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetTime){}[0]
    final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetTime) // org.ton.lite.api.liteserver.functions/LiteServerGetTime.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetTime){}[0]
    final fun encodeToByteArray(org.ton.lite.api.liteserver.functions/LiteServerGetTime, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetTime.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.functions.LiteServerGetTime;kotlin.Boolean){}[0]
    final fun encodeToByteString(org.ton.lite.api.liteserver.functions/LiteServerGetTime, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver.functions/LiteServerGetTime.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.functions.LiteServerGetTime;kotlin.Boolean){}[0]
    final fun hash(org.ton.lite.api.liteserver.functions/LiteServerGetTime): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetTime.hash|hash(org.ton.lite.api.liteserver.functions.LiteServerGetTime){}[0]
    final fun resultTlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerCurrentTime> // org.ton.lite.api.liteserver.functions/LiteServerGetTime.resultTlCodec|resultTlCodec(){}[0]
    final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver.functions/LiteServerGetTime> // org.ton.lite.api.liteserver.functions/LiteServerGetTime.serializer|serializer(){}[0]
    final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // org.ton.lite.api.liteserver.functions/LiteServerGetTime.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetTime> // org.ton.lite.api.liteserver.functions/LiteServerGetTime.tlCodec|tlCodec(){}[0]
}

final object org.ton.lite.api.liteserver.functions/LiteServerGetTransactionsTlConstructor : org.ton.tl/TlConstructor<org.ton.lite.api.liteserver.functions/LiteServerGetTransactions> { // org.ton.lite.api.liteserver.functions/LiteServerGetTransactionsTlConstructor|null[0]
    final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetTransactions // org.ton.lite.api.liteserver.functions/LiteServerGetTransactionsTlConstructor.decode|decode(org.ton.tl.TlReader){}[0]
    final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetTransactions) // org.ton.lite.api.liteserver.functions/LiteServerGetTransactionsTlConstructor.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetTransactions){}[0]
}

final object org.ton.lite.api.liteserver.functions/LiteServerGetVersion : kotlinx.serialization.internal/SerializerFactory, org.ton.tl/TLFunction<org.ton.lite.api.liteserver.functions/LiteServerGetVersion, org.ton.lite.api.liteserver/LiteServerVersion>, org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetVersion> { // org.ton.lite.api.liteserver.functions/LiteServerGetVersion|null[0]
    final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetVersion // org.ton.lite.api.liteserver.functions/LiteServerGetVersion.decode|decode(kotlin.ByteArray){}[0]
    final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetVersion // org.ton.lite.api.liteserver.functions/LiteServerGetVersion.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
    final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetVersion // org.ton.lite.api.liteserver.functions/LiteServerGetVersion.decode|decode(kotlinx.io.Source){}[0]
    final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetVersion // org.ton.lite.api.liteserver.functions/LiteServerGetVersion.decode|decode(org.ton.tl.TlReader){}[0]
    final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver.functions/LiteServerGetVersion // org.ton.lite.api.liteserver.functions/LiteServerGetVersion.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
    final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver.functions/LiteServerGetVersion // org.ton.lite.api.liteserver.functions/LiteServerGetVersion.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
    final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver.functions/LiteServerGetVersion // org.ton.lite.api.liteserver.functions/LiteServerGetVersion.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
    final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver.functions/LiteServerGetVersion // org.ton.lite.api.liteserver.functions/LiteServerGetVersion.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
    final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetVersion) // org.ton.lite.api.liteserver.functions/LiteServerGetVersion.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetVersion){}[0]
    final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetVersion) // org.ton.lite.api.liteserver.functions/LiteServerGetVersion.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetVersion){}[0]
    final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver.functions/LiteServerGetVersion) // org.ton.lite.api.liteserver.functions/LiteServerGetVersion.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.functions.LiteServerGetVersion){}[0]
    final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver.functions/LiteServerGetVersion) // org.ton.lite.api.liteserver.functions/LiteServerGetVersion.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.functions.LiteServerGetVersion){}[0]
    final fun encodeToByteArray(org.ton.lite.api.liteserver.functions/LiteServerGetVersion, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetVersion.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.functions.LiteServerGetVersion;kotlin.Boolean){}[0]
    final fun encodeToByteString(org.ton.lite.api.liteserver.functions/LiteServerGetVersion, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver.functions/LiteServerGetVersion.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.functions.LiteServerGetVersion;kotlin.Boolean){}[0]
    final fun hash(org.ton.lite.api.liteserver.functions/LiteServerGetVersion): kotlin/ByteArray // org.ton.lite.api.liteserver.functions/LiteServerGetVersion.hash|hash(org.ton.lite.api.liteserver.functions.LiteServerGetVersion){}[0]
    final fun resultTlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerVersion> // org.ton.lite.api.liteserver.functions/LiteServerGetVersion.resultTlCodec|resultTlCodec(){}[0]
    final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver.functions/LiteServerGetVersion> // org.ton.lite.api.liteserver.functions/LiteServerGetVersion.serializer|serializer(){}[0]
    final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // org.ton.lite.api.liteserver.functions/LiteServerGetVersion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    final fun tlCodec(): org.ton.tl/TlCodec<org.ton.lite.api.liteserver.functions/LiteServerGetVersion> // org.ton.lite.api.liteserver.functions/LiteServerGetVersion.tlCodec|tlCodec(){}[0]
}

final object org.ton.lite.api.liteserver/LiteServerQueryPrefix : kotlinx.serialization.internal/SerializerFactory, org.ton.tl/TlCodec<org.ton.lite.api.liteserver/LiteServerQueryPrefix> { // org.ton.lite.api.liteserver/LiteServerQueryPrefix|null[0]
    final fun decode(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerQueryPrefix // org.ton.lite.api.liteserver/LiteServerQueryPrefix.decode|decode(kotlin.ByteArray){}[0]
    final fun decode(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerQueryPrefix // org.ton.lite.api.liteserver/LiteServerQueryPrefix.decode|decode(kotlinx.io.bytestring.ByteString){}[0]
    final fun decode(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerQueryPrefix // org.ton.lite.api.liteserver/LiteServerQueryPrefix.decode|decode(kotlinx.io.Source){}[0]
    final fun decode(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerQueryPrefix // org.ton.lite.api.liteserver/LiteServerQueryPrefix.decode|decode(org.ton.tl.TlReader){}[0]
    final fun decodeBoxed(kotlin/ByteArray): org.ton.lite.api.liteserver/LiteServerQueryPrefix // org.ton.lite.api.liteserver/LiteServerQueryPrefix.decodeBoxed|decodeBoxed(kotlin.ByteArray){}[0]
    final fun decodeBoxed(kotlinx.io.bytestring/ByteString): org.ton.lite.api.liteserver/LiteServerQueryPrefix // org.ton.lite.api.liteserver/LiteServerQueryPrefix.decodeBoxed|decodeBoxed(kotlinx.io.bytestring.ByteString){}[0]
    final fun decodeBoxed(kotlinx.io/Source): org.ton.lite.api.liteserver/LiteServerQueryPrefix // org.ton.lite.api.liteserver/LiteServerQueryPrefix.decodeBoxed|decodeBoxed(kotlinx.io.Source){}[0]
    final fun decodeBoxed(org.ton.tl/TlReader): org.ton.lite.api.liteserver/LiteServerQueryPrefix // org.ton.lite.api.liteserver/LiteServerQueryPrefix.decodeBoxed|decodeBoxed(org.ton.tl.TlReader){}[0]
    final fun encode(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerQueryPrefix) // org.ton.lite.api.liteserver/LiteServerQueryPrefix.encode|encode(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerQueryPrefix){}[0]
    final fun encode(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerQueryPrefix) // org.ton.lite.api.liteserver/LiteServerQueryPrefix.encode|encode(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerQueryPrefix){}[0]
    final fun encodeBoxed(kotlinx.io/Sink, org.ton.lite.api.liteserver/LiteServerQueryPrefix) // org.ton.lite.api.liteserver/LiteServerQueryPrefix.encodeBoxed|encodeBoxed(kotlinx.io.Sink;org.ton.lite.api.liteserver.LiteServerQueryPrefix){}[0]
    final fun encodeBoxed(org.ton.tl/TlWriter, org.ton.lite.api.liteserver/LiteServerQueryPrefix) // org.ton.lite.api.liteserver/LiteServerQueryPrefix.encodeBoxed|encodeBoxed(org.ton.tl.TlWriter;org.ton.lite.api.liteserver.LiteServerQueryPrefix){}[0]
    final fun encodeToByteArray(org.ton.lite.api.liteserver/LiteServerQueryPrefix, kotlin/Boolean): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerQueryPrefix.encodeToByteArray|encodeToByteArray(org.ton.lite.api.liteserver.LiteServerQueryPrefix;kotlin.Boolean){}[0]
    final fun encodeToByteString(org.ton.lite.api.liteserver/LiteServerQueryPrefix, kotlin/Boolean): kotlinx.io.bytestring/ByteString // org.ton.lite.api.liteserver/LiteServerQueryPrefix.encodeToByteString|encodeToByteString(org.ton.lite.api.liteserver.LiteServerQueryPrefix;kotlin.Boolean){}[0]
    final fun hash(org.ton.lite.api.liteserver/LiteServerQueryPrefix): kotlin/ByteArray // org.ton.lite.api.liteserver/LiteServerQueryPrefix.hash|hash(org.ton.lite.api.liteserver.LiteServerQueryPrefix){}[0]
    final fun serializer(): kotlinx.serialization/KSerializer<org.ton.lite.api.liteserver/LiteServerQueryPrefix> // org.ton.lite.api.liteserver/LiteServerQueryPrefix.serializer|serializer(){}[0]
    final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // org.ton.lite.api.liteserver/LiteServerQueryPrefix.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
}
